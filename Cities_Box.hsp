/*--------------------------------------------------------------------------------------------------

								       Cities Box Ver 1.1.0
										 Main Source Code
	
						 			  (C)YotioSoft 2017-2018
	
--------------------------------------------------------------------------------------------------*/

*packopt
#packopt name "Cities_Box"
#packopt icon "img/logo.ico"

*include
#include "hspinet.as"
#include "hspext.as"

*define
/*チップサイズ（64x64）*/
#define chip_size		64

/*タイルを塗りつぶすためのマクロ*/
#define qv(%1,%2)	macro1=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\
					gmode 3,,,128 : gsquare -1,macro1,macro2
	
/*クウォータービューの位置を取得するためのマクロ（チップ表示用）*/
#define qv2(%1,%2)	macro1@=%1*chip_size/2-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro1@(2)=%1*chip_size/2+chip_size-camx-%2*chip_size/2,%1*chip_size/2+chip_size/2-camx-%2*chip_size/2:\
					macro2@=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4-camy+%1*chip_size/4:\
					macro2@(2)=%2*chip_size/4+chip_size/4-camy+%1*chip_size/4,%2*chip_size/4+chip_size/2-camy+%1*chip_size/4:\

*uselib
	#uselib "user32.dll"
		#func FindWindow "FindWindowA" str, int
		#func GetWindowRect "GetWindowRect" int, int
		#func DrawText "DrawTextW" int,wstr,int,int,int
	
		#func ClientToScreen "ClientToScreen" int, int
	
		#func GetWindowLong "GetWindowLongA" int,int
		#func SetWindowLong "SetWindowLongA" int,int,int
	
		#define WM_SIZE	0x00005	//ウィンドウサイズ変更
		#define WS_MAXIMIZEBOX	0x10000	//最大化ボタン
		#define WS_THICKFRAME	0x40000	//サイズ変更可能
	
		#func SetTimer  "SetTimer"  int,int,int,int
		#func KillTimer "KillTimer" int,int
		#define WM_TIMER    0x0113
		#define TIMER_ID    1    ; タイマーID
	
*module
#module

/*指定された範囲内にマウスがあるか確認する関数（使用例：click_range (100, 0, 300, 300) ）*/
#defcfunc click_range int mouse_x, int mouse_y, int mouse_x2, int mouse_y2
	if ginfo_wx1 <= ginfo_mx and ginfo_wx2 >= ginfo_mx and ginfo_wy1 <= ginfo_my and ginfo_wy2 >= ginfo_my and mouse_x <= mousex and mouse_x2 >= mousex and mouse_y <= mousey and mouse_y2 >= mousey {
		return 1
	}
	
	return 0
	
/*アドオンの番号を取得する関数*/
#defcfunc addon_num str input_addon_name
	chdir directory@
	exist "data/temp/"+input_addon_name+".temp"
	
	if strsize = -1 {
		return addon_num@("tile_greenfield")	; 一時ファイルが見つからない場合、とりあえず更地（greenfield）の値を返す
	}	
	
	notesel temp_file
	noteload "data/temp/"+input_addon_name+".temp"
	
	return int(temp_file)
	
/*各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード") ）*/
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word
	value = instr(underlying_var, 0, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	return get_chapter_buf
	
/*指定された文字列が何番目の要素にあるかを取得（2次配列用）（使用例：element2 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列"）*/
#defcfunc element2 str search_addon_name, array search_var, array search_var_elements, str search_word
	chdir directory@
	exist "data/temp/"+search_addon_name+".temp"
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			finish = cnt
			break
		}
	loop
	
	return finish
	
/*指定された文字列が何番目の要素にあるかを取得（3次配列用）（使用例：element3 検索するアドオン名, 検索する文字列が含まれる変数名, その変数の要素数が格納されている変数, "検索する文字列", 検索する文字列が含まれる3番目の要素の変数名, その3番目の要素の変数の要素数が格納されている変数, "3番目の要素で検索する文字列"）*/
#defcfunc element3 str search_addon_name, array search_var, array search_var_elements, str search_word, array second_search_var, array second_search_var_elements, str second_search_word
	chdir directory@
	exist "data/temp/"+search_addon_name+".temp"
	
	if strsize = -1 {
		return -2
	}
	
	notesel temp_file
	noteload "data/temp/"+search_addon_name+".temp"
	
	finish = -1
	
	repeat search_var_elements( int(temp_file) )
		if search_var(int(temp_file), cnt) = search_word {
			icnt = cnt
			repeat second_search_var_elements( int(temp_file), icnt )
				if second_search_var(int(temp_file), icnt, cnt) = second_search_word {
					finish = cnt
					break
				}
			loop
		}
	loop
	
	return finish

/*割り算（0で除算する場合はv3の値を返す）*/
#defcfunc avoid_div_in_zero int v1, int v2, int v3
	if i2 = 0 {
		return v3
	} else {
		return (v1 / v2)
	}

/*文字を中央に表示（使用例：cmes "hogehoge", 0, 640, 0, 480, 0）*/
#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2, int redraw_exist
	RECT = cx, cy, cx2, cy2
	DrawText@ hdc, ctext, -1, varptr(RECT), $01
	
	if redraw_exist = 0 : redraw 1
	return

/*画像をぼかす（hsp/sample/new/gblur.hsp | 使用例：gblur 2）*/
#deffunc gblur int p1, int p2
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
/*半透明色表示命令*/
#deffunc boxfa int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gsquare -1,pdx, pdy
	return
	
/*半透明色表示命令（機能はboxfaと同じ）*/
#deffunc sboxf int depth, int ax, int ay, int bx, int by
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gmode 3,,,depth
	gsquare -1,pdx, pdy
	return
	
/*アドオンの情報を取得*/
#deffunc get_about_addon int search_addon_number@, int search_type_number@, int search_direction_number@, var input_top_left_x, var input_top_left_y, var input_bottom_right_x, var input_bottom_right_y,var input_size_x, var input_size_y, var input_chip_x, var input_chip_y
	//オブジェクトの画像上の座標を取得
		input_top_left_x = addon_top_left_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_top_left_y = addon_top_left_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_x = addon_bottom_right_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_bottom_right_y = addon_bottom_right_y@( search_addon_number@, search_type_number@, search_direction_number@ )
		
		input_size_x = addon_size_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_size_y = addon_size_y@( search_addon_number@, search_type_number@, search_direction_number@ )
	
		input_chip_x = addon_chip_x@( search_addon_number@, search_type_number@, search_direction_number@ )
		input_chip_y = addon_chip_y@( search_addon_number@, search_type_number@, search_direction_number@ )
	
	return
	
/*暗号化＆復号（言うほど難しいものでもないけど…）*/
//暗号化
#deffunc enc var p1, int key, int size
	repeat size
	    poke p1, cnt, peek(p1, cnt) + key
	loop
	
	return

//復号
#deffunc dec var p1, int key, int size
	repeat size
	    poke p1, cnt, peek(p1, cnt) - key
	loop
	
	return
	
//ダウンロード（要hspinet.dll）
#deffunc download str url, str request, str dlname
	netinit@
	neturl@ url
	
	netdlname@ dlname					;	ダウンロード後のファイル名
	netrequest@ request					;	ファイル名の指定（ここで指定する）
	
	repeat
		exist dlname
		netexec@ res
		if res : break
		await 50
	loop

	netterm@
	
	return

/*--------------透過input関連------------------*/
#uselib "gdi32.dll"
	#cfunc CreatePatternBrush "CreatePatternBrush" int
	#func DeleteObject "DeleteObject"
	#func SetBkMode "SetBkMode" int,int 
	#func SetBrushOrgEx "SetBrushOrgEx" int,int,int,int
	
#uselib "user32.dll"
	#func GetWindowRect "GetWindowRect" int,int
	#func MapWindowPoints "MapWindowPoints" int,int,int,int

	#func  SetWindowPos@  "SetWindowPos" int,int,int,int,int,int,int
	
#deffunc UpdateBackgroundBrush
    if ginfo_sel >= length(hBrush) : hBrush.ginfo_sel = 0
    mref bmscr,67 : hBrush.ginfo_sel = CreatePatternBrush(bmscr.7)
    oncmd gosub *onctlcolor, $133
	
    return

*onctlcolor
    oldsel = ginfo_sel : gsel ginfo_intid : dim rect,4
    setbkmode wparam, 1 // TRANSPARENT
    getwindowrect lparam, varptr(rect)
    mapwindowpoints 0, hwnd, varptr(rect), 2
    setbrushorgex wparam, -rect.0, -rect.1, 0
 
 	#include "gdi32.as"
	#define ctype RGB(%1,%2,%3) (%1 | %2 << 8 | %3 << 16)
    settextcolor wparam, RGB (255, 255, 255)
    
    gsel oldsel : return hBrush.ginfo_intid

/*------------------------------------------------*/
								
#global

*load_about
	//タイトルとバージョンの読み込み
		notesel about
		noteload "data/about.txt"
		
		noteget about_title, 0
		noteget about_version, 1
	
		split about_title, " : ", not_use, about_title
		split about_version, " : ", not_use, about_version
	
		title about_title
		
*load_config
	//本体設定読み込み
		notesel config
		noteload "data/config.dat"
	
		SystemFont = get_chapter(config, "SystemFont", " = \"", "\"")
		Set_Play_BGM = int( get_chapter(config, "Set_Play_BGM", " = ", ";") )
		Ignore_Update = int( get_chapter(config, "Ignore_Update", " = ", ";") )
		Get_Dev_Version = int( get_chapter(config, "Get_Dev_Version", " = ", ";") )

		OS = get_chapter(config, "OS", " = \"", "\"")

		Adjustment_Interval = int( get_chapter(config, "Adjustment_Interval", " = ", ";") )
		Drow_Interval = int( get_chapter(config, "Drow_Interval", " = ", ";") )
	
		Config_WindowSize_X = int( get_chapter(config, "Config_WindowSize_X", " = ", ";") )
		Config_WindowSize_Y = int( get_chapter(config, "Config_WindowSize_Y", " = ", ";") )
	
*changeable
	//ウィンドウのサイズを変更可能化
		windowx=Config_WindowSize_X : windowy=Config_WindowSize_Y
		screen 0, ginfo_dispx, ginfo_dispy : width windowx, windowy
		
		GetWindowLong hwnd, -16
		SetWindowLong hwnd, -16, stat | WS_THICKFRAME | WS_MAXIMIZEBOX
	
		gsel 0
	
*buffering
	//読み込み中画面
		color 0, 0, 0 : boxf
	
		color 255, 255, 255 : font SystemFont, 14
		;pos 10, 10 : mes "しばらくお待ちください\nLoading images..."
	
		now_loading = 1
		
	//ロゴ、背景画像（buffer 1は設定ウィンドウで使うため使用不可）
		celload "img/logo.png", 2										; ロゴ
		celload "img/logo2.png", 62										; ロゴ2（タイトル）
		celload "img/logo2_Mac.png", 75									; ロゴ2（macOS向け）
		celload "img/title_background.png", 15							; タイトル背景画像
	
	//メニューのアイコン
		celload "img/menu_icons/menu/cursor.png", 3							; 標準カーソル
		celload "img/menu_icons/menu/road.png", 4							; メニューアイコン（道路敷設）
		celload "img/menu_icons/menu/railroad.png", 50						; メニューアイコン（線路建設）
		celload "img/menu_icons/menu/low_density_residential.png", 5		; メニューアイコン（住居地区建設）
		celload "img/menu_icons/menu/commercial.png", 12					; メニューアイコン（商業地区建設）
		celload "img/menu_icons/menu/office.png", 6							; メニューアイコン（オフィス建設）
		celload "img/menu_icons/menu/industrial.png", 19					; メニューアイコン（工業地区建設）
		celload "img/menu_icons/menu/farm.png", 57							; メニューアイコン（農業地区建設）
		celload "img/menu_icons/menu/public.png", 7							; メニューアイコン（郵便局建設）
		celload "img/menu_icons/menu/park.png", 29							; メニューアイコン（公園建設）
	
		celload "img/menu_icons/menu/bulldozer.png", 10						; 撤去ボタン
		celload "img/menu_icons/save/save.png", 11							; 保存ボタン
		celload "img/menu_icons/setting/setting.png", 13					; 設定ボタン
		celload "img/menu_icons/stat/stat.png", 30							; 統計ボタン
		celload "img/menu_icons/budget/budget.png", 49						; 予算ボタン
		celload "img/menu_icons/information/information.png", 52			; 情報ボタン
	
	//小サイズのアイコン
		celload "img/menu_icons/mini/low_density_residential.png", 8		; 低密度住居地区
		celload "img/menu_icons/mini/high_density_residential.png", 9		; 高密度住居地区
		celload "img/menu_icons/mini/low_density_commercial.png", 20		; 低密度商業地区
		celload "img/menu_icons/mini/high_density_commercial.png", 21		; 高密度商業地区
		
		celload "img/menu_icons/mini/roadway.png", 66						; 車道
		celload "img/menu_icons/mini/promenade.png", 67						; 歩道 / 自転車道
	
	//設定で使うアイコン
		celload "img/menu_icons/setting/check.png", 14						; チェックボタン
		celload "img/menu_icons/setting/refer.png", 16						; 参照ボタン
	
	//統計メニューで使うアイコン
		celload "img/menu_icons/stat/type.png", 31							; 建築物の種類
		celload "img/menu_icons/stat/land_price.png", 32					; 地価
		celload "img/menu_icons/stat/crime_rate.png", 33					; 犯罪率
		celload "img/menu_icons/stat/education_rate.png", 47				; 教育度
		celload "img/menu_icons/stat/happiness.png", 51						; 幸福度
	
	//犯罪率、地価の統計で使うタイル
		celload "img/quarter/+3.png", 34									; 地価/犯罪率/教育度 : 最良
		celload "img/quarter/+2.png", 35									; 地価/犯罪率/教育度 : 良
		celload "img/quarter/+1.png", 36									; 地価/犯罪率/教育度 : 概ね良
		celload "img/quarter/0.png" , 48									; 地価/犯罪率/教育度 : 0
		celload "img/quarter/-1.png", 37									; 地価/犯罪率/教育度 : 少し低い/悪い
		celload "img/quarter/-2.png", 38									; 地価/犯罪率/教育度 : 低い/悪い
		celload "img/quarter/-3.png", 39									; 地価/犯罪率/教育度 : 最低/最悪
	
	//エリア設定で使うアイコン
		celload "img/area/residential.png", 40								; エリア : 住居地区
		celload "img/area/commercial.png", 41								; エリア : 商業地区
		celload "img/area/office.png", 42									; エリア : オフィス地区
		celload "img/area/industrial.png", 43								; エリア : 工業地区
		celload "img/area/farm.png", 58										; エリア : 農業地区
	
	//ポインター
		celload "img/pointer/blue.png", 17									; 青いポインター
		celload "img/pointer/red.png", 18									; 赤いポインター
	
	//地区を示すタイル
		celload "img/quarter/residential.png", 22							; 住居地区
		celload "img/quarter/commercial.png", 23							; 商業地区
		celload "img/quarter/office.png", 24								; オフィス地区
		celload "img/quarter/industrial.png", 25							; 工業地区
		celload "img/quarter/farm.png", 59									; 農業地区
		celload "img/quarter/public.png", 26								; 公共施設
		celload "img/quarter/h_residential.png", 44							; 高密度住居地区
		celload "img/quarter/h_commercial.png", 45							; 高密度商業地区
		celload "img/quarter/h_office.png", 46								; 高密度オフィス地区
	
	//最初のメニュー画面のボタン
		celload "img/start_menu/new.png", 27								; 新マップ
		celload "img/start_menu/load.png", 28								; 都市
	
		celload "img/start_menu/setting.png", 65							; 設定
		celload "img/start_menu/addon_maker.png", 72						; Addon Maker
	
	//メニューの設定画面で使うアイコン
		celload "img/menu_setting/general.png", 60							; 一般設定
		celload "img/menu_setting/information.png", 61						; 情報
		celload "img/menu_setting/bug.png", 63								; バグ・ご要望の送信
	
		celload "img/menu_setting/text.png", 64								; テキストファイルアイコン
	
	//読み込み中アイコン
		celload "img/loading/124856y.png", 53								; 読み込み中アイコン1
		celload "img/loading/124856y-2.png", 54								; 読み込み中アイコン2
		celload "img/loading/124856y-3.png", 55								; 読み込み中アイコン3
		celload "img/loading/124856y-4.png", 56								; 読み込み中アイコン4

	//速さ
		celload "img/speed/slow.png", 73									; 遅い
		celload "img/speed/normal.png", 68									; 普通
		celload "img/speed/fast.png", 69									; 速い
		celload "img/speed/very_fast.png", 74								; とても早い
		celload "img/speed/pause.png", 70									; 一時停止

	//建物詳細ダイアログ
		celload "img/show_detail/change_name.png", 71						; 建物名の変更
	
*preparation
	//読み込み中画面
		color 0, 0, 0 : boxf
	
		directory = dirinfo(0)
	
		color 255, 255, 255 : font SystemFont, 14
		pos windowx - 120, windowy - 40 : mes "Now Loading..."
		
	//onexit
		onexit *exit
	
	//mci登録
		mci "set Cities-Box time format milliseconds"
	
	//暗号化キー
		iCipherKey = 2147483647
	
	//バッファ番号1000以降はオブジェクト
		//まずAddonフォルダ内のアドオンの数を取得
			directory = dirinfo(0)
			
				chdir "addons"
	
				//まずパス名を覗いたファイル一覧を取得
					dirlist2h 2, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
		
					sdim addon_file_name, buf_addons
					dirlist2r addon_file_name
					
				//次にパス名を含めたファイル一覧を取得
					dirlist2h 1, ','
					dirlist2 buf_addons, "*.adat*", 1, '\\'
					
					sdim filelist, buf_addons
					dirlist2r filelist
					
					notesel filelist
					total_addons = notemax
	
					addon_number = 0
	
			//sdim＆dim
				sdim addon_name, total_addons
				sdim addon_jp_name, total_addons
				sdim addon_summary, total_addons
				sdim addon_icon, total_addons
				sdim addon_type, total_addons
				sdim addon_type_2, total_addons
				sdim addon_type_3, total_addons
				dim addon_maximum_capacity, total_addons
	
				sdim addon_crop, total_addons
				dim addon_crop_amount, total_addons
	
				sdim use_type, total_addons, 100
				dim addon_total_use_types, total_addons
	
				dim addon_transparent_color_r, total_addons
				dim addon_transparent_color_g, total_addons
				dim addon_transparent_color_b, total_addons
	
				dim addon_total_addon_direction, total_addons, 100
				sdim addon_direction, total_addons, 100, 100
				sdim addon_image, total_addons, 100

				dim addon_image_size_x, total_addons, 100
	
				addon_direction = ""
			
				sdim addon_size_x_buf, total_addons, 100, 100
				sdim addon_size_y_buf, total_addons, 100, 100
				dim addon_size_x, total_addons, 100, 100
				dim addon_size_y, total_addons, 100, 100
			
				sdim addon_chip_x_buf, total_addons, 100, 100
				sdim addon_chip_y_buf, total_addons, 100, 100
				dim addon_chip_x, total_addons, 100, 100
				dim addon_chip_y, total_addons, 100, 100
			
				sdim addon_top_left_x_buf, total_addons, 100, 100
				sdim addon_top_left_y_buf, total_addons, 100, 100
				dim addon_top_left_x, total_addons, 100, 100
				dim addon_top_left_y, total_addons, 100, 100
			
				sdim addon_bottom_right_x_buf, total_addons, 100, 100
				sdim addon_bottom_right_y_buf, total_addons, 100, 100
				dim addon_bottom_right_x, total_addons, 100, 100
				dim addon_bottom_right_y, total_addons, 100, 100
	
				dim addon_land_price_influence, 128
				dim addon_land_price_influence_grid, 128
	
				dim addon_crime_rate_influence, 128
				dim addon_crime_rate_influence_grid, 128
	
				dim addon_education_rate_influence, 128
				dim addon_education_rate_influence_grid, 128

				dim addon_night_mask_set, total_addons, 100
				sdim addon_night_mask, 128, total_addons, 100
	
				dim addon_build_limit, 128
	
				sdim type_Two_lane_road, 128
				sdim type_number_Two_lane_road, 128
				sdim type_low_density_residential, 128
				sdim type_number_low_density_residential, 128
				sdim type_high_density_residential, 128
				sdim type_number_high_density_residential, 128
				sdim type_office, 128
				sdim type_industrial, 128
				sdim type_public, 128
	
*load_addons
	//オブジェクトのadatファイルを読み込み
		repeat total_addons
			notesel filelist
			noteget buf_filelist, cnt
	
			notesel buf_adat
			noteload buf_filelist
	
			//ステータスバーの表示
				color 0, 167, 232 : boxf 0, windowy-2, (cnt+5) * double(double(windowx) / double(total_addons)), windowy
	
			//現在のパス名のみ取得
				addon_path = getpath(buf_filelist, 32)
	
			//ディレクトリ変更
				chdir addon_path
	
			//アドオン名取得
				addon_name(cnt) = get_chapter(buf_adat, "addon_name", " = \\", "\"")
	
			//読み込み中画面
				;color 0, 0, 0 : boxf
				
				;color 255, 255, 255 : font SystemFont, 14
				;pos 10, 10 : mes "しばらくお待ちください\nLoading addons : "+addon_name(cnt)+""
	
			//各項目の読み込み
	
				//日本語のアドオン名と説明
					addon_jp_name(cnt) = get_chapter(buf_adat, "addon_jp_name", " = \\", "\"")
					addon_summary(cnt) = get_chapter(buf_adat, "addon_summary", " = \\", "\"")
	
				//アドオンのアイコン
					addon_icon(cnt) = get_chapter(buf_adat, "addon_icon", " = \\", "\"")
							
				//アドオンのタイプ
					addon_type(cnt) = get_chapter(buf_adat, "addon_type", " = \"", "\"")
					addon_type_2(cnt) = get_chapter(buf_adat, "addon_type_2", " = \"", "\"")
					addon_type_3(cnt) = get_chapter(buf_adat, "addon_type_3", " = \"", "\"")
	
				//建物の収容可能人数（住居地区の場合は住民数、商業・オフィス・工業・公共施設は労働者数）
					addon_maximum_capacity(cnt) = int( get_chapter(buf_adat, "maximum_capacity", " = \"", "\"") )
	
				//地価の影響力
					addon_land_price_influence(cnt) = int( get_chapter(buf_adat, "land_price_influence", " = \"", "\"") )
					addon_land_price_influence_grid(cnt) = int( get_chapter(buf_adat, "land_price_influence_grid", " = \"", "\"") )
	
				//犯罪率への影響力（+なら犯罪率増、-なら犯罪率減）
					addon_crime_rate_influence(cnt) = int( get_chapter(buf_adat, "crime_rate_influence", " = \"", "\"") )
					addon_crime_rate_influence_grid(cnt) = int( get_chapter(buf_adat, "crime_rate_influence_grid", " = \"", "\"") )
	
				//教育度への影響率
					addon_education_rate_influence(cnt) = int( get_chapter(buf_adat, "education_rate_influence", " = \"", "\"") )
					addon_education_rate_influence_grid(cnt) = int( get_chapter(buf_adat, "education_rate_influence_grid", " = \"", "\"") )
	
				//建築物の建設可能回数
					addon_build_limit(cnt) = int( get_chapter(buf_adat, "build_limit", " = \"", "\"") )
	
				//生産物・生産量
					addon_crop(cnt) = get_chapter(buf_adat, "addon_crop", " = \"", "\"")
					addon_crop_amount(cnt) = int( get_chapter(buf_adat, "addon_crop_amount", " = \"", "\"") )
	
				//アドオンのadatファイルの詳細の読み込みへ
					gosub *load_adat
	
				//カテゴリ分け
					if addon_type(cnt) = "Two_lane_road" or addon_type(cnt) = "Two_lane_Road" {
						notesel type_Two_lane_road
						noteadd addon_name(cnt), -1
	
						notesel type_number_Two_lane_road
						noteadd str(cnt), -1
					}

					if addon_type(cnt) = "Promenade" or addon_type(cnt) = "promenade" {
						notesel type_Promenade
						noteadd addon_name(cnt), -1
	
						notesel type_number_Promenade
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "Two_lane_railroad" or addon_type(cnt) = "Two_lane_Railroad" or addon_type(cnt) = "station" or addon_type(cnt) = "Station" {
						notesel type_Two_lane_railroad
						noteadd addon_name(cnt), -1
	
						notesel type_number_Two_lane_railroad
						noteadd str(cnt), -1
					}
							
					if addon_type(cnt) = "low_density_residential" or addon_type(cnt) = "low_density_Residential" or addon_type(cnt) = "Low_density_Residential" {
						notesel type_low_density_residential
						noteadd addon_name(cnt), -1
	
						notesel type_number_low_density_residential
						noteadd str(cnt), -1
					}
					if addon_type(cnt) = "high_density_residential" or addon_type(cnt) = "high_density_Residential" or addon_type(cnt) = "High_density_Residential" {
						notesel type_high_density_residential
						noteadd addon_name(cnt), -1
	
						notesel type_number_high_density_residential
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "low_density_commercial" or addon_type(cnt) = "low_density_Commercial" or addon_type(cnt) = "Low_density_Commercial" {
						notesel type_low_density_commercial
						noteadd addon_name(cnt), -1
	
						notesel type_number_low_density_commercial
						noteadd str(cnt), -1
					}
					if addon_type(cnt) = "high_density_commercial" or addon_type(cnt) = "high_density_Commercial" or addon_type(cnt) = "High_density_Commercial" {
						notesel type_high_density_commercial
						noteadd addon_name(cnt), -1
	
						notesel type_number_high_density_commercial
						noteadd str(cnt), -1
					}
					
					if addon_type(cnt) = "office" or addon_type(cnt) = "Office" {
						notesel type_office
						noteadd addon_name(cnt), -1
	
						notesel type_number_office
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "industrial" or addon_type(cnt) = "Industrial" {
						notesel type_industrial
						noteadd addon_name(cnt), -1
						
						notesel type_number_industrial
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "farm" or addon_type(cnt) = "Farm" {
						notesel type_farm
						noteadd addon_name(cnt), -1
						
						notesel type_number_farm
						noteadd str(cnt), -1
					}
					
					if addon_type(cnt) = "public" or addon_type(cnt) = "Public" {
						notesel type_public
						noteadd addon_name(cnt), -1

						notesel type_number_public
						noteadd str(cnt), -1
					}
	
					if addon_type(cnt) = "park" or addon_type(cnt) = "Park" {
						notesel type_park
						noteadd addon_name(cnt), -1

						notesel type_number_park
						noteadd str(cnt), -1
					}
	
				//アドオンのバッファ（1000000〜）および画像の仮想分割、および画像のサイズ取得
					addon_buffer_number_basic = (addon_number+1) * 10 * 100 * 100

					//タイプが複数ある場合
					if addon_total_use_types(addon_number) > 1 {
						repeat addon_total_use_types(addon_number)
							addon_buffer_number_0 = addon_buffer_number_basic + (cnt*100)
							
							celload addon_image(addon_number, cnt), addon_buffer_number_0

							gsel addon_buffer_number_0
							img_x = ginfo(12) : img_y = ginfo(13)

							gsel 0
							;celdiv addon_buffer_number, (addon_size_x(addon_number, cnt, 0) + addon_top_left_x(addon_number, cnt, 0)), (addon_size_y(addon_number, cnt, 0) + addon_top_left_y(addon_number, cnt, 0))
							celdiv addon_buffer_number_0, (addon_size_x(addon_number, cnt, 0) + addon_top_left_x(addon_number, cnt, 0)), (addon_size_y(addon_number, cnt, 0) + addon_top_left_y(addon_number, cnt, 0))

							; 夜間バージョン
							addon_buffer_number_1 = addon_buffer_number_0 + 10000

							if addon_night_mask_set(addon_number, cnt) = 1 {
								celload addon_night_mask(addon_number, cnt), 998
							}
							
							buffer addon_buffer_number_1, img_x, img_y
								color : boxf
								pos 0, 0 : gcopy addon_buffer_number_0, 0, 0, img_x, img_y
								
								color 0, 0, 0 : sboxf 200, 0, 0, img_x, img_y
	
								if addon_night_mask_set(addon_number, cnt) = 1 {
									gmode 2, , , 256
									pos 0, 0 : gcopy 998, 0, 0, img_x, img_y
								}
							
							gsel 0

							celdiv addon_buffer_number_1, (addon_size_x(addon_number, cnt, 0) + addon_top_left_x(addon_number, cnt, 0)), (addon_size_y(addon_number, cnt, 0) + addon_top_left_y(addon_number, cnt, 0))

							; 夕方・明け方バージョン
							addon_buffer_number_2 = addon_buffer_number_0 + 20000

							buffer addon_buffer_number_2, img_x, img_y
								color : boxf
								pos 0, 0 : gcopy addon_buffer_number_0, 0, 0, img_x, img_y
								
								color 0, 0, 0 : sboxf 128, 0, 0, img_x, img_y
	
								if addon_night_mask_set(addon_number, cnt) = 1 and rnd(2) = 1 {
									gmode 2, , , 256
									pos 0, 0 : gcopy 998, 0, 0, img_x, img_y
								}
							
							gsel 0

							celdiv addon_buffer_number_2, (addon_size_x(addon_number, cnt, 0) + addon_top_left_x(addon_number, cnt, 0)), (addon_size_y(addon_number, cnt, 0) + addon_top_left_y(addon_number, cnt, 0))
							
							; 停電バージョン
							addon_buffer_number_3 = addon_buffer_number_0 + 30000

							buffer addon_buffer_number_3, img_x, img_y
								color : boxf
								pos 0, 0 : gcopy addon_buffer_number_0, 0, 0, img_x, img_y
								
								color 0, 0, 0 : sboxf 200, 0, 0, img_x, img_y
							
							gsel 0

							celdiv addon_buffer_number_3, (addon_size_x(addon_number, cnt, 0) + addon_top_left_x(addon_number, cnt, 0)), (addon_size_y(addon_number, cnt, 0) + addon_top_left_y(addon_number, cnt, 0))

							gmode 0

							/*
							color 0, 0, 0 : boxf

							color 255, 255, 255
							pos 0, 300 : mes ""+addon_buffer_number_1+" divx="+(addon_size_x(addon_number, cnt, 0) + addon_top_left_x(addon_number, cnt, 0))+" divy="+(addon_size_y(addon_number, cnt, 0) + addon_top_left_y(addon_number, cnt, 0))+""
							mes addon_top_left_x( addon_number, cnt, 0 )
							mes addon_top_left_y( addon_number, cnt, 0 )
							;pos 0, 0    : celput addon_buffer_number_1, 0
							;pos 0, 64*1 : celput addon_buffer_number_1, 1
							;pos 0, 64*2 : celput addon_buffer_number_1, 2
							;pos 0, 64*3 : celput addon_buffer_number_1, 3

							pos 0, 0 : gcopy addon_buffer_number_1, 0, 0, windowx, windowy

							wait 50
							*/
							
						loop
						
					} else {

						gsel 0

						;color 0, 0, 0 : boxf 0, 0, windowx, 50
						;pos 0, 0 : color 255, 255, 255 : mes addon_jp_name(addon_number)

						//向きごとに位置を変える（左向き：左上、上向き：右上、下向き：左下、右向き：右下）
							addon_buffer_number_0 = addon_buffer_number_basic + 0
							celload addon_image(addon_number, 0), addon_buffer_number_0

							gsel addon_buffer_number_0
							img_x = ginfo(12) : img_y = ginfo(13)
							
							buffer 999, img_x, img_y + (addon_top_left_y( addon_number, 0, 0 ) * 2)
							color : boxf
							pos 0, 0 : gcopy addon_buffer_number_0, 0, 0, img_x, img_y
							
							buffer addon_buffer_number_0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
							color : boxf

							pos 0, addon_top_left_y( addon_number, 0, 0 )																	 
									gcopy 999, addon_top_left_x( addon_number, 0, 0 ), addon_top_left_y( addon_number, 0, 0 ), addon_bottom_right_x( addon_number, 0, 0 ), addon_bottom_right_y( addon_number, 0, 0 )
							pos 64 + (addon_size_x(addon_number, 0, 0) + addon_top_left_x( addon_number, 0, 0 ) - 64), addon_top_left_y( addon_number, 0, 1 )									 
									gcopy 999, addon_top_left_x( addon_number, 0, 1 ), addon_top_left_y( addon_number, 0, 1 ), addon_bottom_right_x( addon_number, 0, 1 ), addon_bottom_right_y( addon_number, 0, 1 )
							pos 0, 64 + (addon_size_y(addon_number, 0, 0) - 64)		 
									gcopy 999, addon_top_left_x( addon_number, 0, 2 ), addon_top_left_y( addon_number, 0, 2 ), addon_bottom_right_x( addon_number, 0, 2 ), addon_bottom_right_y( addon_number, 0, 2 )
							pos 64 + (addon_size_x(addon_number, 0, 2) - 64), 64 + (addon_size_y(addon_number, 0, 1) - 64)
									gcopy 999, addon_top_left_x( addon_number, 0, 3 ), addon_top_left_y( addon_number, 0, 3 ), addon_bottom_right_x( addon_number, 0, 3 ), addon_bottom_right_y( addon_number, 0, 3 )

						//夜間向け
							addon_buffer_number_1 = addon_buffer_number_basic + 10000

							/*
							gsel 0
							color 0, 0, 0 : boxf
							pos 0, 0 : color 255, 255, 255 : mes addon_name(addon_number)
							*/

							if addon_night_mask_set(addon_number, 0) = 1 {
								celload addon_night_mask(addon_number, 0), addon_buffer_number_1
							
								buffer 998, img_x, img_y + (addon_top_left_y( addon_number, 0, 0 ) * 2)
								color : boxf
								pos 0, 0 : gcopy addon_buffer_number_1, 0, 0, img_x, img_y
							}
							
							buffer addon_buffer_number_1, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
								color : boxf
	
								pos 0, addon_top_left_y( addon_number, 0, 0 )																	 
										gcopy 999, addon_top_left_x( addon_number, 0, 0 ), addon_top_left_y( addon_number, 0, 0 ), addon_bottom_right_x( addon_number, 0, 0 ), addon_bottom_right_y( addon_number, 0, 0 )
								pos 64 + (addon_size_x(addon_number, 0, 0) + addon_top_left_x( addon_number, 0, 0 ) - 64), addon_top_left_y( addon_number, 0, 1 )									 
										gcopy 999, addon_top_left_x( addon_number, 0, 1 ), addon_top_left_y( addon_number, 0, 1 ), addon_bottom_right_x( addon_number, 0, 1 ), addon_bottom_right_y( addon_number, 0, 1 )
								pos 0, 64 + (addon_size_y(addon_number, 0, 0) - 64)		 
										gcopy 999, addon_top_left_x( addon_number, 0, 2 ), addon_top_left_y( addon_number, 0, 2 ), addon_bottom_right_x( addon_number, 0, 2 ), addon_bottom_right_y( addon_number, 0, 2 )
								pos 64 + (addon_size_x(addon_number, 0, 2) - 64), 64 + (addon_size_y(addon_number, 0, 1) - 64)
										gcopy 999, addon_top_left_x( addon_number, 0, 3 ), addon_top_left_y( addon_number, 0, 3 ), addon_bottom_right_x( addon_number, 0, 3 ), addon_bottom_right_y( addon_number, 0, 3 )
	
								color 0, 0, 0 : sboxf 200, 0, 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
	
								if addon_night_mask_set(addon_number, 0) = 1 {
									gmode 2, , , 256
									
									pos 0, addon_top_left_y( addon_number, 0, 0 )																	 
											gcopy 998, addon_top_left_x( addon_number, 0, 0 ), addon_top_left_y( addon_number, 0, 0 ), addon_bottom_right_x( addon_number, 0, 0 ), addon_bottom_right_y( addon_number, 0, 0 )
									pos 64 + (addon_size_x(addon_number, 0, 0) + addon_top_left_x( addon_number, 0, 0 ) - 64), addon_top_left_y( addon_number, 0, 1 )									 
											gcopy 998, addon_top_left_x( addon_number, 0, 1 ), addon_top_left_y( addon_number, 0, 1 ), addon_bottom_right_x( addon_number, 0, 1 ), addon_bottom_right_y( addon_number, 0, 1 )
									pos 0, 64 + (addon_size_y(addon_number, 0, 0) - 64)		 
											gcopy 998, addon_top_left_x( addon_number, 0, 2 ), addon_top_left_y( addon_number, 0, 2 ), addon_bottom_right_x( addon_number, 0, 2 ), addon_bottom_right_y( addon_number, 0, 2 )
									pos 64 + (addon_size_x(addon_number, 0, 2) - 64), 64 + (addon_size_y(addon_number, 0, 1) - 64)
											gcopy 998, addon_top_left_x( addon_number, 0, 3 ), addon_top_left_y( addon_number, 0, 3 ), addon_bottom_right_x( addon_number, 0, 3 ), addon_bottom_right_y( addon_number, 0, 3 )
								}

						//夕方・明け方バージョン
							addon_buffer_number_2 = addon_buffer_number_basic + 20000

							if addon_night_mask_set(addon_number, 0) = 1 {
								celload addon_night_mask(addon_number, 0), addon_buffer_number_2
							
								buffer 998, img_x, img_y + (addon_top_left_y( addon_number, 0, 0 ) * 2)
								color : boxf
								pos 0, 0 : gcopy addon_buffer_number_2, 0, 0, img_x, img_y
							}
							
							buffer addon_buffer_number_2, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
								color : boxf
	
								pos 0, addon_top_left_y( addon_number, 0, 0 )																	 
										gcopy 999, addon_top_left_x( addon_number, 0, 0 ), addon_top_left_y( addon_number, 0, 0 ), addon_bottom_right_x( addon_number, 0, 0 ), addon_bottom_right_y( addon_number, 0, 0 )
								pos 64 + (addon_size_x(addon_number, 0, 0) + addon_top_left_x( addon_number, 0, 0 ) - 64), addon_top_left_y( addon_number, 0, 1 )									 
										gcopy 999, addon_top_left_x( addon_number, 0, 1 ), addon_top_left_y( addon_number, 0, 1 ), addon_bottom_right_x( addon_number, 0, 1 ), addon_bottom_right_y( addon_number, 0, 1 )
								pos 0, 64 + (addon_size_y(addon_number, 0, 0) - 64)		 
										gcopy 999, addon_top_left_x( addon_number, 0, 2 ), addon_top_left_y( addon_number, 0, 2 ), addon_bottom_right_x( addon_number, 0, 2 ), addon_bottom_right_y( addon_number, 0, 2 )
								pos 64 + (addon_size_x(addon_number, 0, 2) - 64), 64 + (addon_size_y(addon_number, 0, 1) - 64)
										gcopy 999, addon_top_left_x( addon_number, 0, 3 ), addon_top_left_y( addon_number, 0, 3 ), addon_bottom_right_x( addon_number, 0, 3 ), addon_bottom_right_y( addon_number, 0, 3 )
	
								color 0, 0, 0 : sboxf 128, 0, 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
	
								if addon_night_mask_set(addon_number, 0) = 1 and rnd(2) = 1 {
									gmode 2, , , 256
									
									pos 0, addon_top_left_y( addon_number, 0, 0 )																	 
											gcopy 998, addon_top_left_x( addon_number, 0, 0 ), addon_top_left_y( addon_number, 0, 0 ), addon_bottom_right_x( addon_number, 0, 0 ), addon_bottom_right_y( addon_number, 0, 0 )
									pos 64 + (addon_size_x(addon_number, 0, 0) + addon_top_left_x( addon_number, 0, 0 ) - 64), addon_top_left_y( addon_number, 0, 1 )									 
											gcopy 998, addon_top_left_x( addon_number, 0, 1 ), addon_top_left_y( addon_number, 0, 1 ), addon_bottom_right_x( addon_number, 0, 1 ), addon_bottom_right_y( addon_number, 0, 1 )
									pos 0, 64 + (addon_size_y(addon_number, 0, 0) - 64)		 
											gcopy 998, addon_top_left_x( addon_number, 0, 2 ), addon_top_left_y( addon_number, 0, 2 ), addon_bottom_right_x( addon_number, 0, 2 ), addon_bottom_right_y( addon_number, 0, 2 )
									pos 64 + (addon_size_x(addon_number, 0, 2) - 64), 64 + (addon_size_y(addon_number, 0, 1) - 64)
											gcopy 998, addon_top_left_x( addon_number, 0, 3 ), addon_top_left_y( addon_number, 0, 3 ), addon_bottom_right_x( addon_number, 0, 3 ), addon_bottom_right_y( addon_number, 0, 3 )
								}

						//停電バージョン
							addon_buffer_number_3 = addon_buffer_number_basic + 30000

							if addon_night_mask_set(addon_number, 0) = 1 {
								celload addon_night_mask(addon_number, 0), addon_buffer_number_3
							
								buffer 998, img_x, img_y + (addon_top_left_y( addon_number, 0, 0 ) * 2)
								color : boxf
								pos 0, 0 : gcopy addon_buffer_number_3, 0, 0, img_x, img_y
							}
							
							buffer addon_buffer_number_3, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
								color : boxf
	
								pos 0, addon_top_left_y( addon_number, 0, 0 )																	 
										gcopy 999, addon_top_left_x( addon_number, 0, 0 ), addon_top_left_y( addon_number, 0, 0 ), addon_bottom_right_x( addon_number, 0, 0 ), addon_bottom_right_y( addon_number, 0, 0 )
								pos 64 + (addon_size_x(addon_number, 0, 0) + addon_top_left_x( addon_number, 0, 0 ) - 64), addon_top_left_y( addon_number, 0, 1 )									 
										gcopy 999, addon_top_left_x( addon_number, 0, 1 ), addon_top_left_y( addon_number, 0, 1 ), addon_bottom_right_x( addon_number, 0, 1 ), addon_bottom_right_y( addon_number, 0, 1 )
								pos 0, 64 + (addon_size_y(addon_number, 0, 0) - 64)		 
										gcopy 999, addon_top_left_x( addon_number, 0, 2 ), addon_top_left_y( addon_number, 0, 2 ), addon_bottom_right_x( addon_number, 0, 2 ), addon_bottom_right_y( addon_number, 0, 2 )
								pos 64 + (addon_size_x(addon_number, 0, 2) - 64), 64 + (addon_size_y(addon_number, 0, 1) - 64)
										gcopy 999, addon_top_left_x( addon_number, 0, 3 ), addon_top_left_y( addon_number, 0, 3 ), addon_bottom_right_x( addon_number, 0, 3 ), addon_bottom_right_y( addon_number, 0, 3 )
	
								color 0, 0, 0 : sboxf 200, 0, 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2

								
							gsel 0

						//仮想分割
							celdiv addon_buffer_number_0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
							celdiv addon_buffer_number_1, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
							celdiv addon_buffer_number_2, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
							celdiv addon_buffer_number_3, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
							
						//2マス以上のアドオンを更に分割
							if (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) > 64 {
								repeat 4
									buffer (addon_buffer_number_0 + cnt + 1), 64 * (((addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) / 64) + 1), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
										color : boxf
										pos 0, 0 : celput addon_buffer_number_0, cnt
	
									gsel 0
	
									celdiv (addon_buffer_number_0 + cnt + 1), 64, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))

									buffer (addon_buffer_number_1 + cnt + 1), 64 * (((addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) / 64) + 1), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
										color : boxf
										pos 0, 0 : celput addon_buffer_number_1, cnt
	
									gsel 0
	
									celdiv (addon_buffer_number_1 + cnt + 1), 64, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))

									buffer (addon_buffer_number_2 + cnt + 1), 64 * (((addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) / 64) + 1), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
										color : boxf
										pos 0, 0 : celput addon_buffer_number_2, cnt
	
									gsel 0
	
									celdiv (addon_buffer_number_2 + cnt + 1), 64, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))

									buffer (addon_buffer_number_3 + cnt + 1), 64 * (((addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) / 64) + 1), (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
										color : boxf
										pos 0, 0 : celput addon_buffer_number_3, cnt
	
									gsel 0
	
									celdiv (addon_buffer_number_3 + cnt + 1), 64, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
								loop
							}

						/*
						color 0, 0, 0 : boxf

						color 255, 255, 255
						pos 0, 300 : mes ""+addon_buffer_number+" divx="+(addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0))+" divy="+(addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))+""

						pos addon_size_x(addon_number, 0, 0)*0, addon_size_y(addon_number, 0, 0)*0 : celput addon_buffer_number, 0
						pos addon_size_x(addon_number, 0, 0)*1, addon_size_y(addon_number, 0, 0)*0 : celput addon_buffer_number, 1
						pos addon_size_x(addon_number, 0, 0)*0, addon_size_y(addon_number, 0, 0)*1 : celput addon_buffer_number, 2
						pos addon_size_x(addon_number, 0, 0)*1, addon_size_y(addon_number, 0, 0)*1 : celput addon_buffer_number, 3

						pos 0, 0 : gmode 0 : gcopy addon_buffer_number, 0, 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
						
						color 255, 255, 255
							line 0, 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, 0
							line 0, 0, 0, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
							line (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2
							line 0, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)) * 2

							line (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)), 0, (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)), img_y + (addon_top_left_y( addon_number, 0, 0 ) * 2)
							line 0, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0)), (addon_size_x(addon_number, 0, 0) + addon_top_left_x(addon_number, 0, 0)) * 2, (addon_size_y(addon_number, 0, 0) + addon_top_left_y(addon_number, 0, 0))
						*/
					}
	
				//アドオンのアイコンのバッファ（10001000〜）
					celload addon_icon(addon_number), addon_number + 90000

				//ディレクトリを戻す
					chdir directory
	
				//一時ファイルを保存
					temp_file = str(addon_number)

					exist "data/temp/"+addon_name(cnt)+".temp"
					
					if strsize != -1 {
						delete "data/temp/"+addon_name(cnt)+".temp"
					}
					
					notesel temp_file
					notesave "data/temp/"+addon_name(cnt)+".temp"
	
				//ディレクトリを戻す
					chdir ""+directory+"\\addons"
	
				addon_number++
		loop
	
	chdir directory

	goto *check_update

*load_adat
	notesel buf_adat
			
	use_types_buf = get_chapter(buf_adat, "use_types", " = \"", "\"")
	
	//adat_use_typesを更にタイプごとに分ける
		split use_types_buf, ", ", use_type_buf
	
		repeat stat
			use_type(addon_number, cnt) = use_type_buf(cnt)
			await 1
		loop
				
	//タイプの数を取得
		addon_total_use_types(addon_number) = stat
				
	//各タイプごとの概要を取得
	
		//取得開始
		repeat addon_total_use_types(addon_number)
			use_type_summary = get_chapter(buf_adat, ""+use_type(addon_number, cnt)+" {", " {", ";")
	
			//使用する画像の取得（image）
				addon_image(addon_number, cnt) = get_chapter(use_type_summary, "image", " = \"", "\"")

			//夜間向けマスク画像の取得（night_mask）
				addon_night_mask(addon_number, cnt) = get_chapter(use_type_summary, "night_mask", " = \"", "\"")
				
				if instr(use_type_summary, 0, "night_mask") != -1 {
					addon_night_mask_set(addon_number, cnt) = 1
				}
						
			//タイプの向きを取得（direction）
				addon_direction_buf = get_chapter(use_type_summary, "direction", " = \"", "\"")
						
				split addon_direction_buf, ", ", addon_direction_buf_2
	
				load_adat_cnt = cnt
	
				addon_total_addon_direction(addon_number, cnt) = stat
	
				repeat addon_total_addon_direction(addon_number, load_adat_cnt)
					addon_direction(addon_number, load_adat_cnt, cnt) = addon_direction_buf_2(cnt)
	
					addon_direction_summary = get_chapter(use_type_summary, ""+addon_direction(addon_number, load_adat_cnt, cnt)+" {", " {", "}")

					load_adat_cnt_2 = cnt
	
					//サイズを取得（size_x, size_y）
						addon_size_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_x", " = \"", "\"")
						addon_size_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "size_y", " = \"", "\"")
										
						addon_size_x(addon_number, load_adat_cnt, cnt) = int(addon_size_x_buf(addon_number, load_adat_cnt, cnt))
						addon_size_y(addon_number, load_adat_cnt, cnt) = int(addon_size_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップのゲーム上の座標サイズを取得（chip_x, chip_y）
						addon_chip_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_x", " = \"", "\"")
						addon_chip_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "chip_y", " = \"", "\"")
										
						addon_chip_x(addon_number, load_adat_cnt, cnt) = int(addon_chip_x_buf(addon_number, load_adat_cnt, cnt))
						addon_chip_y(addon_number, load_adat_cnt, cnt) = int(addon_chip_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの左上の座標を取得（top_left_x, top_left_y）
						addon_top_left_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_x", " = \"", "\"")
						addon_top_left_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "top_left_y", " = \"", "\"")
										
						addon_top_left_x(addon_number, load_adat_cnt, cnt) = int(addon_top_left_x_buf(addon_number, load_adat_cnt, cnt))
						addon_top_left_y(addon_number, load_adat_cnt, cnt) = int(addon_top_left_y_buf(addon_number, load_adat_cnt, cnt))
	
					//チップの右下の座標を取得（bottom_right_x, bottom_right_y）
						addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_x", " = \"", "\"")
						addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt) = get_chapter(addon_direction_summary, "bottom_right_y", " = \"", "\"")
										
						addon_bottom_right_x(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_x_buf(addon_number, load_adat_cnt, cnt))
						addon_bottom_right_y(addon_number, load_adat_cnt, cnt) = int(addon_bottom_right_y_buf(addon_number, load_adat_cnt, cnt))
						
					await 1
				loop
		
			wait 1
		loop
	
	return
	
*OnTimer__map_preparating
	redraw 0
	
	pos 0, 0 : gzoom windowx, windowy-titlebar_h, 15, 0, 0, 948, 635 : gblur 2
	color 0, 0, 0 : sboxf 128, 0, 0, windowx, windowy
	
	color 255, 255, 255 : font SystemFont, 14
	cmes "読み込み中...", 0, windowy-100, windowx, windowy-80
	
	//読み込み中アイコンを表示
		loading_icon_cnt ++
		
		if loading_icon_cnt = 1 {
			pos (windowx/2)-(200/2), (windowy/2)-(200/2) : gmode 2 : gcopy 53, 0, 0, 200, 200
		}
		if loading_icon_cnt = 2 {
			pos (windowx/2)-(200/2), (windowy/2)-(200/2) : gmode 2 : gcopy 54, 0, 0, 200, 200
		}
		if loading_icon_cnt = 3 {
			pos (windowx/2)-(200/2), (windowy/2)-(200/2) : gmode 2 : gcopy 55, 0, 0, 200, 200
		}
		if loading_icon_cnt = 4 {
			pos (windowx/2)-(200/2), (windowy/2)-(200/2) : gmode 2 : gcopy 56, 0, 0, 200, 200
			loading_icon_cnt = 0
		}
	
	redraw 1
	return
	
*check_update
	;color 0, 0, 0 : boxf
	
	;color 255, 255, 255 : font SystemFont, 14
	;pos 10, 10 : mes "しばらくお待ちください\nアップデートの確認中..."
	
	notesel about
	noteload "data/about.txt"
	noteget tmp_about, 2
	split tmp_about, " : ", tmp, NOW_Release_number
	NOW_Release_number = int(NOW_Release_number)
	
	//既にアップデーターがあれば削除
		exist "Cities_Box_UD.exe"
		if strsize != -1 {
			delete "Cities_Box_UD.exe"
		}

		exist "Cities_Box_UD_Dev.exe"
		if strsize != -1 {
			delete "Cities_Box_UD_Dev.exe"
		}
	
	//アップデート通知を受け取らない設定なら*menuへ
		if Ignore_Update = 1 {
			goto *menu
		}

	//通常のアップデートの確認
		download "http://joogle.web.fc2.com/datacenter/cities_box/", "datacenter_url.txt", "data/datacenter_url.txt"
		
		notesel datacenter_url
		noteload "data/datacenter_url.txt"
		
		if instr(datacenter_url, 0, "http://") = -1 {
			datacenter_url = "http://yotiosoft.com/dc/cities_box/"
		}
		
		download datacenter_url, "latest_version.txt", "data/latest_version.txt"
		
		notesel latest_version
		noteload "data/latest_version.txt"
		
		if instr(latest_version, 0, "<!DOCTYPE html>") != -1 {
			goto *menu
		}
		
		latest_version__Release_number = int(get_chapter(latest_version, "Release Number", " : ", ";"))
		latest_version__Title = get_chapter(latest_version, "Title", " : ", ";")
		latest_version__Version = get_chapter(latest_version, "Version", " : ", ";")
		latest_version__About = get_chapter(latest_version, "About", " : ", ";")
		latest_version__OS = get_chapter(latest_version, "OS", " : ", ";")
		
		if latest_version__Release_number > NOW_Release_number and instr(latest_version__OS, 0, OS) != -1 {
			normalUpdate = 1
	
			goto *menu
		}

	//開発版のアップデートの確認
		if get_Dev_Version = 1 {
			if instr(datacenter_url, 0, "http://") = -1 {
				datacenter_url = "http://yotiosoft.com/dc/cities_box/"
			}
			
			download datacenter_url, "Dev_latest_version.txt", "data/Dev_latest_version.txt"
			
			notesel Dev_latest_version
			noteload "data/Dev_latest_version.txt"
			
			if instr(Dev_latest_version, 0, "<!DOCTYPE html>") != -1 {
				goto *menu
			}
			
			Dev_latest_version__Release_number = int(get_chapter(Dev_latest_version, "Release Number", " : ", ";"))
			Dev_latest_version__Title = get_chapter(Dev_latest_version, "Title", " : ", ";")
			Dev_latest_version__Version = get_chapter(Dev_latest_version, "Version", " : ", ";")
			Dev_latest_version__About = get_chapter(Dev_latest_version, "About", " : ", ";")
			Dev_latest_version__OS = get_chapter(latest_version, "OS", " : ", ";")
			
			if Dev_latest_version__Release_number > NOW_Release_number and instr(Dev_latest_version__OS, 0, OS) != -1 {
				devUpdate = 1
		
				goto *menu
			}
		}
	
*menu
	onclick gosub *menu_onclick
	
	if (devUpdate = 1 or normalUpdate = 1) and update_button = 0 and Ignore_Update = 0 {
		objsize 150, 20
		pos windowx-150-20, windowy-titlebar_h-65+5 : button gosub "更新する", *update
		pos windowx-150-20, windowy-titlebar_h-65+30 : button gosub "更新通知を受け取らない", *set_ignore_update
		update_button = 1
	}
	
	now_loading = 0
	now_in_menu = 1
	
	repeat
		//ウィンドウサイズとタイトルバーの高さを取得
			gosub *get_windowsize
	
		redraw 0
				
		pos 0, 0 : gzoom windowx, windowy-titlebar_h, 15, 0, 0, 948, 635 : gblur 2
	
		color 0, 0, 0
		sboxf 128, 0, 0, windowx, windowy
				
		pos windowx/2-55, double(50./300)*(windowy-titlebar_h) : gmode 0 : gcopy 2, 0, 0, 110, 110
			
		font SystemFont, 14
			
		color 0, 162, 232
			
		if click_range(windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
			sboxf 200, windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
		}
		if click_range(windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
			sboxf 200, windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20
		}
	
		if click_range(8, 25, 8+32, 25+32) = 1 {
			sboxf 200, 8, 25, 8+32, 25+32
		}
		if click_range(45, 25, 45+32, 25+32) = 1 {
			sboxf 200, 45, 25, 45+32, 25+32
		}
	
		//マップ作成・読み込みボタン
			color 255, 255, 255
			
			gmode 2
			pos windowx/2-50-20, double(300./483)*(windowy-titlebar_h) : gcopy 27, 0, 0, 50, 50
				cmes "新しいマップ", windowx/2-50-20-50, double(300./483)*(windowy-titlebar_h)+50+2, windowx/2-50-20+50+50, double(300./483)*(windowy-titlebar_h)+50+2+20, 1
						
			pos windowx/2+20, double(300./483)*(windowy-titlebar_h) : gcopy 28, 0, 0, 50, 50
				cmes "読み込み", windowx/2+20-50, double(300./483)*(windowy-titlebar_h)+50+2, windowx/2+20+50+50, double(300./483)*(windowy-titlebar_h)+50+2+20, 1
	
		//左上のメニュー（設定ボタンなど）
			color 255, 255, 255 : font SystemFont, 14
			pos 8, 5 : mes about_title+" Ver."+about_version+" r"+NOW_Release_number+""
			
			gmode 2
			pos 8, 25  : gcopy 65, 0, 0, 32, 32
			pos 45, 25 : gcopy 72, 0, 0, 32, 32

			if OS = "macOS" {
				pos 82, 25 : gcopy 64, 0, 0, 32, 32
			}

			if click_range(8, 25, 8+32, 25+32) = 1 {
				font SystemFont, 10
				
				color 255, 255, 255 : sboxf 200, 8, 25+32, 8+50, 25+32+18
				color 0, 0, 0
				pos 8+2, 25+32+2 : mes "設定"
			}
			if click_range(45, 25, 45+32, 25+32) = 1 {
				font SystemFont, 10
				
				color 255, 255, 255 : sboxf 200, 45, 25+32, 45+70, 25+32+18
				color 0, 0, 0
				pos 45+2, 25+32+2 : mes "Addon Maker"
			}

			if OS = "macOS" {
				if click_range(82, 25, 82+32, 25+32) = 1 {
					font SystemFont, 10
					
					color 255, 255, 255 : sboxf 200, 82, 25+32, 82+70, 25+32+18
					color 0, 0, 0
					pos 82+2, 25+32+2 : mes "ReadMe.txt"
				}
			}
			
	
		//アップデートがあった場合
			if (latest_version__Release_number > NOW_Release_number or Dev_latest_version__Release_number > NOW_Release_number) and Ignore_Update = 0 {
				color 0, 162, 232 : sboxf 128, windowx-500-10, windowy-titlebar_h-70+5-10, windowx-10, windowy-titlebar_h-10
				color 255, 255, 255

				if latest_version__Release_number > NOW_Release_number {
					font SystemFont, 14 : pos windowx-500, windowy-titlebar_h-70+3 : mes "アップデートがあります！更新しますか？"
					font SystemFont, 11 : pos windowx-500, windowy-titlebar_h-50+3 : mes "Ver."+latest_version__Version+" r"+latest_version__Release_number+"\n"+latest_version__About+""
				} else : if Dev_latest_version__Release_number > NOW_Release_number {
					font SystemFont, 14 : pos windowx-500, windowy-titlebar_h-70+3 : mes "開発版にアップデートがあります！更新しますか？"
					font SystemFont, 11 : pos windowx-500, windowy-titlebar_h-50+3 : mes "Ver."+Dev_latest_version__Version+"(Dev) r"+Dev_latest_version__Release_number+"\n"+Dev_latest_version__About+""
				}
			}
		
		wait 10
		redraw 1
	loop
	
*menu_onclick
	//メニュー画面でクリックされたときに動作
	if click_range(windowx/2-50-20-10, double(300./483)*(windowy-titlebar_h), windowx/2-50-20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
		goto *new_map
	}
	if click_range(windowx/2+20-10, double(300./483)*(windowy-titlebar_h), windowx/2+20+50+10, double(300./483)*(windowy-titlebar_h)+50+2+20) = 1 {
		goto *load_map
	}
	
	if click_range(8, 25, 8+32, 25+32) = 1 {
		goto *menu_setting
	}
	if click_range(45, 25, 45+32, 25+32) = 1 {
		gosub *menu_addon_maker
	}

	if OS = "macOS" {
		if click_range(82, 25, 82+32, 25+32) = 1 {
			exec "ReadMe.txt", 16
		}
	}
	
	return
	
*menu_setting
	screen 1, 500, 300
	
	menu_setting__page = "general"
	
*menu_setting__2
	gsel 1, 2
	title "設定"
	
	onclick *menu_setting_onclick
	
	color 50, 50, 50 : boxf 0, 0, 64, 300
	color 75, 75, 75 : boxf 64, 0, 500, 28
	color 90, 90, 90 : boxf 64, 28, 500, 300
	
	//設定メニュー
		gmode 2
		
		pos 16, 28 + 0 + 16   : gcopy 60, 0, 0, 48, 48
		pos 16, 28 + 64 + 16  : gcopy 63, 0, 0, 48, 48
		pos 16, 28 + 128 + 16 : gcopy 61, 0, 0, 48, 48
	
	//設定画面
	
		; 一般設定
			if menu_setting__page = "general" {
				color 0, 162, 232 : boxf 60, 0+28, 64, 64+28
				
				font SystemFont, 16 : color 255, 255, 255
				pos 70, 3 : mes "一般設定"
	
				font SystemFont, 14 : color 255, 255, 255
	
				; BGMの再生(Set_Play_BGM)
					pos 90, 40 : mes "BGMを再生する"
					if Set_Play_BGM = 0 {
						pos 350, 40 : gcopy 14, 0, 0, 16, 16
					} else {
						pos 350, 40 : gcopy 14, 0, 16, 16, 16
					}
	
				; アップデート通知のON/OFF（Ignore_Update）
					pos 90, 70 : mes "アップデートを通知する"
					if Ignore_Update = 1 {
						pos 350, 70 : gcopy 14, 0, 0, 16, 16
					} else {
						pos 350, 70 : gcopy 14, 0, 16, 16, 16
					}

				; 開発版のアップデートを受け取る（Get_Dev_Version）
					pos 90, 100 : mes "開発版のアップデートを受け取る"
					if Get_Dev_Version = 0 {
						pos 350, 100 : gcopy 14, 0, 0, 16, 16
					} else {
						pos 350, 100 : gcopy 14, 0, 16, 16, 16
					}
	
				; フォント設定(SystemFont)
					pos 90, 130 : mes "フォント"

					gtmp = ginfo(14)
					
					pos 90+gtmp+100, 130 : objsize 150, 20 : input SystemFont : SyetmFont__stat = stat
					pos 90+gtmp+250, 130 : objsize 50, 20  : button gosub "参照", *refer_fonts

				; 動作モード設定(OS)
					pos 90, 160 : mes "動作モード"
					
					pos 90+gtmp+200, 160 : objsize 100, 20 : combox os_num, 100, "Windows\nmacOS"

				; 数値調節間隔（Adjustment_Interval）
					pos 90, 190 : mes "数値調節等の間隔（数値が低いほど間隔が短い）"
					
					pos 90+gtmp+250, 190 : objsize 50, 20 : input Adjustment_Interval : AIinpStat = stat

				; 描写間隔（Drow_Interval）
					pos 90, 220 : mes "描写間隔（数値が低いほど間隔が短い）"
					
					pos 90+gtmp+250, 220 : objsize 50, 20 : input Drow_Interval : DIinpStat = stat


				repeat
					if os_num != os_num_before and os_num = 0 {
						OS = "Windows"

						Adjustment_Interval = 2
						Drow_Interval = 16
						
						objprm AIinpStat, Adjustment_Interval
						objprm DIinpStat, Drow_Interval
					} else : if os_num != os_num_before and os_num = 1 {
						OS = "macOS"

						Adjustment_Interval = 2
						Drow_Interval = 8
						
						objprm AIinpStat, Adjustment_Interval
						objprm DIinpStat, Drow_Interval
					}

					os_num_before = os_num

					wait 100
				loop
			}
	
		; バグ・ご要望の送信
			if menu_setting__page = "bug" {
				clrobj
	
				color 0, 162, 232 : boxf 60, 64+28, 64, 128+28
	
				font SystemFont, 16 : color 255, 255, 255
				pos 70, 3 : mes "バグ・ご要望の送信"
	
				font SystemFont, 14 : color 255, 255, 255
				pos 90, 50 : mes "現在確認されているバグについては、\nReadMe.txtの「13.バグや問題点、今後の予定」をご覧ください。"
				pos ((500-64)/2)-16, 100 : gcopy 64, 0, 0, 32, 32
				pos ((500-64)/2)-16+45, 105 : mes "ReadMe.txtを開く"
	
				ginfo_tmp__bug_ReadMe = ginfo(14)
	
				pos 90, 150 : mes "この他にバグやご要望等がございましたら、\nお気軽にYotioSoft コンタクトフォームまでご一報ください。"
				pos ((500-64)/2)-16-40, 200 : gcopy 63, 0, 0, 32, 32
				pos ((500-64)/2)-16-40+45, 205 : mes "コンタクトフォームをブラウザで開く"
	
				ginfo_tmp__bug_Send = ginfo(14)
	
				
			}
	
		; 情報
			if menu_setting__page = "information" {
				clrobj
				
				color 0, 162, 232 : boxf 60, 128+28, 64, 192+28
				
				font SystemFont, 16 : color 255, 255, 255
				pos 70, 3 : mes "情報"
	
				pos 100, 40     : gcopy 2, 0, 0, 110, 110

				if OS = "Windows" {
					pos 120+110, 40 : gcopy 62, 0, 0, 230, 110
				} else : OS = "macOS" {
					pos 120+110, 40 : gcopy 75, 0, 0, 230, 110
				}
	
				font SystemFont, 14 : color 255, 255, 255
				pos 100, 170 : mes ""+about_title+"\nVersion : "+about_version+"\nRelease Number : "+NOW_Release_number+"\nDevelopment Language : HSP 3.5"
				font SystemFont, 10 : color 255, 255, 255
				pos 100, 270 : mes "Copyright(C) YotioSoft 2017-2018 All Rights Reserved."
			}
	
	stop
	
*menu_setting_onclick
	//設定上でクリックされたときの動作
	
	//設定メニュー
		if click_range(0, 28, 64, 28+64) = 1 {
			menu_setting__page = "general"
		}
		if click_range(0, 28+64, 64, 28+128) = 1 {
			menu_setting__page = "bug"
		}
		if click_range(0, 28+128, 64, 28+172) = 1 {
			menu_setting__page = "information"
		}
	
	//一般設定
		if menu_setting__page = "general" {
			if click_range(350, 40, 350+16, 40+16) = 1 {
				if Set_Play_BGM = 0 {
					Set_Play_BGM = 1
				} else {
					Set_Play_BGM = 0
				}
			}
			if click_range(350, 70, 350+16, 70+16) = 1 {
				if Ignore_Update = 0 {
					Ignore_Update = 1
				} else {
					Ignore_Update = 0
				}
			}
			if click_range(350, 100, 350+16, 100+16) = 1 {
				if Get_Dev_Version = 0 {
					Get_Dev_Version = 1
				} else {
					Get_Dev_Version = 0
				}
			}
		}
	
	//バグ・ご要望の送信
		if menu_setting__page = "bug" {
			; ReadMe.txtを開く
				if click_range(((500-64)/2)-16, 100, ((500-64)/2)-16+45+ginfo_tmp__bug_ReadMe, 100+32) = 1{
					exec "ReadMe.txt", 16
				}
	
			; コンタクトフォームを開く
				if click_range(((500-64)/2)-16-40, 200, ((500-64)/2)-16-40+45+ginfo_tmp__bug_Send, 200+32) = 1{
					exec "http://yotiosoft.com/contact-form/", 16
				}
		}
	
	goto *menu_setting__2

*menu_addon_maker
	exist "Addon_Maker/Cities_Box_Addon_Maker.exe"

	if strsize = -1 {
		dialog "Cities_Box_Addon_Maker.exeがありません\n別途ダウンロードしてください"
	} else {
		exec "Addon_Maker/Cities_Box_Addon_Maker.exe"
	}

	return
	
	
*new_map
	map_mode = "new_map"
	
	now_in_menu = 0
	
	//マップ新規作成
		mapsize = 100
	
		dim buffer_number, mapsize, mapsize
		dim atlx, mapsize, mapsize
		dim atly, mapsize, mapsize
		dim abrx, mapsize, mapsize
		dim abry, mapsize, mapsize
		dim sizex, mapsize, mapsize
		dim sizey, mapsize, mapsize
	
		dim map, mapsize, mapsize					//各座標のアドオン番号
		sdim name, 128, mapsize, mapsize			//各座標のアドオン名
		sdim category, 128, mapsize, mapsize		//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
		sdim category_2, 128, mapsize, mapsize		//アドオンの更に詳細なカテゴリー（公共施設などで使う）
		sdim category_3, 128, mapsize, mapsize		//アドオンの更に更に詳細なカテゴリー（学校などで使う）
		dim obj_type, mapsize, mapsize				//座標上にあるオブジェクトのタイプ
		dim obj_dire, mapsize, mapsize				//座標上にあるオブジェクトの向き
		dim obj_serial_num, mapsize, mapsize		//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトの通し番号（1マスの場合は0）
		dim obj_use_tiles_x, mapsize, mapsize		//ひとつのオブジェクトで複数のタイルを要するときの、必要なx方向のタイル数
		dim obj_use_tiles_y, mapsize, mapsize		//ひとつのオブジェクトで複数のタイルを要するときの、必要なy方向のタイル数
		dim obj_tiles_x, mapsize, mapsize			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのx方向のタイルの数
		dim obj_tiles_y, mapsize, mapsize			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのy方向のタイルの数
		
		dim residents, mapsize, mapsize				//各建築物の住民の数（住宅地のみ）
		dim workers_Commercial, mapsize, mapsize	//商業地区の従業員数（商業地区のみ）
		dim workers_Office, mapsize, mapsize		//オフィス地区の従業員数（オフィス地区のみ）
		dim workers_Industrial, mapsize, mapsize	//工業地区の従業員数（工業地区のみ）
		dim workers_Farm, mapsize, mapsize			//農業地区の従業員数（農業地区のみ）
		dim workers_Public, mapsize, mapsize		//公共施設の従業員数（公共施設のみ）
	
		dim students, mapsize, mapsize				//各学校の生徒・学生数
	
		dim land_price, mapsize, mapsize			//地価（万円/マス）
		dim crime_rate, mapsize, mapsize			//犯罪率
		dim education_rate, mapsize, mapsize		//教育度
		dim happiness, mapsize, mapsize				//幸福度
	
		sdim crop, 128, mapsize, mapsize			//生産物
		dim crop_amount, mapsize, mapsize			//生産量
	
		sdim age, 128, mapsize, mapsize				//住人の年齢
		sdim gender, 128, mapsize, mapsize			//住人の性別
		sdim workplace, 128, mapsize, mapsize		//住人が通うの職場の位置
		sdim school, 128, mapsize, mapsize			//住人が通う学校の位置
		
		sdim reservation, 128, mapsize, mapsize		//地区の予約（地域設定されたがまだ建物が立っていない区域）

		sdim original_name, 128, mapsize, mapsize	//建物名（ユーザーがつけた名前）
		
		repeat mapsize * mapsize
			map(ix,iy) = addon_num_buf
			name(ix,iy) = "tile_greenfield"
			category(ix,iy) = "tile"
			category_2(ix,iy) = ""
			category_3(ix,iy) = ""
	
			obj_type(ix,iy) = 0
			obj_dire(ix,iy) = 0
	
			obj_serial_num(ix,iy) = 0
			obj_use_tiles_x(ix,iy) = 0
			obj_use_tiles_y(ix,iy) = 0
			obj_tiles_x(ix,iy) = 0
			obj_tiles_y(ix,iy) = 0
	
			residents(ix,iy) = 0
			workers_Commercial(ix,iy) = 0
			workers_Office(ix,iy) = 0
			workers_Industrial(ix,iy) = 0
			workers_Farm(ix,iy) = 0
			workers_Public(ix,iy) = 0
	
			students(ix,iy) = 0
	
			land_price(ix,iy) = 20
			crime_rate(ix,iy) = 0
			education_rate(ix,iy) = 0
			happiness(ix,iy) = 0
	
			crop(ix,iy) = "none"
			crop_amount(ix,iy) = 0
	
			age(ix,iy) = ""
	
			reservation(ix,iy) = "none"

			original_name(ix,iy) = ""
			
			ix++
			if ix = mapsize {
				ix = 0
				iy += 1
			}
		loop
	
	City_Name = ""
	Mayor_Name = ""
	Set_Change_Weather = 1
	
	demand_Residential = 100			; 住宅地区の需要度
	demand_Commercial = 0				; 商業地区の需要度
	demand_Office = 0					; オフィス地区の需要度
	demand_Industrial = 0				; 工業地区の需要度
	demand_Farm = 0						; 農業地区の需要度
	
	time_Year = gettime(0)				; ゲーム内の時間の年
	time_Month = gettime(1)				; ゲーム内の時間の月
	time_Date = gettime(3)				; ゲーム内の時間の日
	time_Hour = 0						; ゲーム内の時間の時
	time_Minutes = 0					; ゲーム内の時間の分
	
	Total_Population = 0				; 都市の総人口
	total_maximum_capacity = 0			; 都市の収容可能人数
	
	next_obj_serial_num = 0				; 複数のタイルを要するオブジェクトの通し番号
	
	budget_of_Police = 100				; 警察への予算（%）
	budget_of_Fire_Depertment = 100		; 消防への予算（%）
	budget_of_Post_Office = 100			; 郵便への予算（%）
	budget_of_Education = 100			; 教育への予算（%）

	Money = 50000						; 資金
	
	Not_Played_NewMap_BGM = 1		; マップ作成直後のBGMをまだ鳴らしていない場合は1
	
	//気温の初期値
		//12月〜2月：-10℃〜15℃の範囲で気温を変動
		if time_Month = 12 or (1 <= time_Month and 2 >= time_Month) {
			temperature = rnd(25)-10
		}
	
		//3月〜5月：10℃〜25℃の範囲で気温を変動
		if 3 <= time_Month and 5 >= time_Month {
			temperature = rnd(15) + 10
		}
	
		//6月〜8月：20℃〜35℃の範囲で気温を変動
		if 6 <= time_Month and 8 >= time_Month {
			temperature= rnd(15) + 20
		}
	
		//9月〜11月：10℃〜25℃の範囲で気温を変動
		if 9 <= time_Month and 11 >= time_Month {
			temperature = rnd(15) + 10
		}
	
	from_new_map = 1
	goto *new_map_setting
	
*load_map
	if from_new_map = 0 {
		dialog "cbd;*.cbx", 16, "Cities Box マップデータ"
	}
	
	if stat = 1 or from_new_map = 1 {
		if from_new_map = 0 {
			load_mapdata_name = refstr
		}
		if from_new_map = 1 {
			load_mapdata_name = save_mapdata_name
		}
		
		chdir directory
	
		if from_new_map = 0 {
			map_mode = "load_map"
		}
	
		now_in_menu = 0
		
		goto *map_preparating
		
	} else {
		goto *menu
	}
	
*map_preparating
	clrobj
	
	oncmd gosub *OnTimer__map_preparating, WM_TIMER
	SetTimer hwnd, TIMER_ID, 1000, 0
	
	//変数を初期化
		camx=-300:camy=-150		//カメラの位地
		
		menu_line_y = 400		//メニューとの境界線
		cursor_mode = "normal"	//カーソルのモード
		
		pointer_icon = -1		//ポインタのアイコン（-1で四角形）
		
		before_mousex = 0
		before_mousey = 0
		
		before_camx = 0
		before_camy = 0
		
		put_addon_name = "tile_greenfield"
	
		stat_mode = ""
	
		nx = 0
		ny = 0
	
		showing_detail_x = -1
		showing_detail_y = -1

		speed = 2
		pause = 0

		mapsize = 100
	
	if from_new_map = 0 {
		dim buffer_number, mapsize, mapsize
		dim atlx, mapsize, mapsize
		dim atly, mapsize, mapsize
		dim abrx, mapsize, mapsize
		dim abry, mapsize, mapsize
		dim sizex, mapsize, mapsize
		dim sizey, mapsize, mapsize
	
		dim map, mapsize, mapsize					//各座標のアドオン番号
		sdim name, 128, mapsize, mapsize			//各座標のアドオン名
		sdim category, 128, mapsize, mapsize		//各マスに置かれているアドオンのカテゴリー（road, residentialなど）
		sdim category_2, 128, mapsize, mapsize		//アドオンの更に詳細なカテゴリー（公共施設などで使う）
		sdim category_3, 128, mapsize, mapsize		//アドオンの更に更に詳細なカテゴリー（学校などで使う）
		dim obj_type, mapsize, mapsize				//座標上にあるオブジェクトのタイプ
		dim obj_dire, mapsize, mapsize				//座標上にあるオブジェクトの向き
		dim obj_serial_num, mapsize, mapsize		//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトの通し番号（1マスの場合は0）
		dim obj_use_tiles_x, mapsize, mapsize		//ひとつのオブジェクトで複数のタイルを要するときの、必要なx方向のタイル数
		dim obj_use_tiles_y, mapsize, mapsize		//ひとつのオブジェクトで複数のタイルを要するときの、必要なy方向のタイル数
		dim obj_tiles_x, mapsize, mapsize			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのx方向のタイルの数
		dim obj_tiles_y, mapsize, mapsize			//ひとつのオブジェクトで複数のタイルを要するときの、オブジェクトを設置した場所からのy方向のタイルの数
		
		dim residents, mapsize, mapsize				//各建築物の住民の数（住宅地のみ）
		dim workers_Commercial, mapsize, mapsize	//商業地区の従業員数（商業地区のみ）
		dim workers_Office, mapsize, mapsize		//オフィス地区の従業員数（オフィス地区のみ）
		dim workers_Industrial, mapsize, mapsize	//工業地区の従業員数（工業地区のみ）
		dim workers_Farm, mapsize, mapsize			//農業地区の従業員数（農業地区のみ）
		dim workers_Public, mapsize, mapsize		//公共施設の従業員数（公共施設のみ）
	
		dim students, mapsize, mapsize				//各学校の生徒・学生数
	
		dim land_price, mapsize, mapsize			//地価（万円/マス）
		dim crime_rate, mapsize, mapsize			//犯罪率
		dim education_rate, mapsize, mapsize		//教育度
		dim happiness, mapsize, mapsize				//幸福度
	
		sdim crop, 128, mapsize, mapsize			//生産物
		dim crop_amount, mapsize, mapsize			//生産量
	
		sdim age, 128, mapsize, mapsize				//住人の年齢
		sdim gender, 128, mapsize, mapsize			//住人の性別
		sdim workplace, 128, mapsize, mapsize		//住人が通うの職場の位置
		sdim school, 128, mapsize, mapsize			//住人が通う学校の位置
		
		sdim reservation, 128, mapsize, mapsize		//地区の予約（地域設定されたがまだ建物が立っていない区域）

		sdim original_name, 128, mapsize, mapsize	//建物名（ユーザーがつけた名前）
	}
	if from_new_map = 1 {
		from_new_map = 0
	}
	
	ix = 0 : iy = 0
	
	addon_num_buf = addon_num("tile_greenfield")
	
	//マップ読み込み
		;if map_mode = "load_map" {
	
			//暗号化済みのマップデータの場合
			if instr(load_mapdata_name, 0, "cbx") != -1 {
				
				notesel load_mapdata_Cipher
				noteload load_mapdata_name
		
				l = notemax
				
				//復号
					repeat l
						notesel load_mapdata_Cipher
						noteget load_mapdata_Cipher_buf, cnt
		
						load_mapdata_Cipher_buf_strlen = strlen(load_mapdata_Cipher_buf)
						dec load_mapdata_Cipher_buf, (strlen(getpath(load_mapdata_name,8+1))/2), load_mapdata_Cipher_buf_strlen
		
						notesel load_mapdata
						noteadd load_mapdata_Cipher_buf, cnt
	
						await 1
					loop
	
				loaded_cbx = 1
	
			} else {
	
				notesel load_mapdata
				noteload load_mapdata_name
	
			}
	
			//保存バージョン(Version)を読み込み
				Saved_Version = int(get_chapter(load_mapdata, "Version", " = ", ";"))
	
			//都市名(City_Name)を読み込み
				City_Name = get_chapter(load_mapdata, "City_Name", " = \"", "\"")
	
			//市長名(Mayor_Name)を読み込み
				Mayor_Name = get_chapter(load_mapdata, "Mayor_Name", " = \"", "\"")
	
			//日時
				time_Year = int(get_chapter(load_mapdata, "time_Year", " = ", ";"))			; ゲーム内の時間の年
				time_Month = int(get_chapter(load_mapdata, "time_Month", " = ", ";"))		; ゲーム内の時間の月
				time_Date = int(get_chapter(load_mapdata, "time_Date", " = ", ";"))			; ゲーム内の時間の日
				time_Hour = int(get_chapter(load_mapdata, "time_Hour", " = ", ";"))			; ゲーム内の時間の時
				time_Minutes = int(get_chapter(load_mapdata, "time_Minutes", " = ", ";"))	; ゲーム内の時間の分
	
				if time_Year = 0 {
					time_Year = gettime(0)
				}
				if time_Month = 0 {
					time_Month = gettime(1)
				}
				if time_Date = 0 {
					time_Date = gettime(3)
				}
	
			//需要度(demand_○○)を読み込み
				demand_Residential = int( get_chapter(load_mapdata, "demand_Residential", " = ", ";") )
				demand_Commercial = int( get_chapter(load_mapdata, "demand_Commercial", " = ", ";") )
				demand_Office = int( get_chapter(load_mapdata, "demand_Office", " = ", ";") )
				demand_Industrial = int( get_chapter(load_mapdata, "demand_Industrial", " = ", ";") )
				demand_Farm = int( get_chapter(load_mapdata, "demand_Farm", " = ", ";") )
	
				if instr(load_mapdata, 0, "demand_Residential") = -1 {
					demand_Residential = 100
				}
				if instr(load_mapdata, 0, "demand_Commercial") = -1 {
					demand_Commercial = 0
				}
				if instr(load_mapdata, 0, "demand_Office") = -1 {
					demand_Office = 0
				}
				if instr(load_mapdata, 0, "demand_Industrial") = -1 {
					demand_Industrial = 0
				}
				if instr(load_mapdata, 0, "demand_Farm") = -1 {
					demand_Farm = 0
				}
			
			//資金(Money)を読み込み
				Money = int( get_chapter(load_mapdata, "Money", " = ", ";") )
	
				if instr(load_mapdata, 0, "Money") = -1 {
					Money = 50000
				}
	
			//設定読み込み
				//天候の変化(Set_Change_Weather)
					Set_Change_Weather = int( get_chapter(load_mapdata, "Set_Change_Weather", " = ", ";") )
					
				//気温(temperature)
					temperature = int( get_chapter(load_mapdata, "Temperature", " = ", ";") )
	
				//夜間は暗くする(Set_Dark_on_Night)
					Set_Dark_on_Night = int( get_chapter(load_mapdata, "Set_Dark_on_Night", " = ", ";") )
	
			//予算の読み込み
				if instr(load_mapdata, 0, "budget_of_Police") != -1 {
					budget_of_Police = int( get_chapter(load_mapdata, "budget_of_Police", " = ", ";") )
				} else {
					budget_of_Police = 100
				}
				
				if instr(load_mapdata, 0, "budget_of_Fire_Depertment") != -1 {
					budget_of_Fire_Depertment = int( get_chapter(load_mapdata, "budget_of_Fire_Depertment", " = ", ";") )
				} else {
					budget_of_Fire_Depertment = 100
				}
				
				if instr(load_mapdata, 0, "budget_of_Post_Office") != -1 {
					budget_of_Post_Office = int( get_chapter(load_mapdata, "budget_of_Post_Office", " = ", ";") )
				} else {
					budget_of_Post_Office = 100
				}
				
				if instr(load_mapdata, 0, "budget_of_Education") != -1 {
					budget_of_Education = int( get_chapter(load_mapdata, "budget_of_Education", " = ", ";") )
				} else {
					budget_of_Education = 100
				}
				
	
				if instr(load_mapdata, 0, "tax_of_Residential") != -1 {
					tax_of_Residential = int( get_chapter(load_mapdata, "tax_of_Residential", " = ", ";") )
				} else {
					tax_of_Residential = 100
				}
				
				if instr(load_mapdata, 0, "tax_of_Commercial") != -1 {
					tax_of_Commercial = int( get_chapter(load_mapdata, "tax_of_Commercial", " = ", ";") )
				} else {
					tax_of_Commercial = 100
				}
				
				if instr(load_mapdata, 0, "tax_of_Office") != -1 {
					tax_of_Office = int( get_chapter(load_mapdata, "tax_of_Office", " = ", ";") )
				} else {
					tax_of_Office = 100
				}
				
				if instr(load_mapdata, 0, "tax_of_Industrial") != -1 {
					tax_of_Industrial = int( get_chapter(load_mapdata, "tax_of_Industrial", " = ", ";") )
				} else {
					tax_of_Industrial = 100
				}
	
				if instr(load_mapdata, 0, "tax_of_Farm") != -1 {
					tax_of_Farm = int( get_chapter(load_mapdata, "tax_of_Farm", " = ", ";") )
				} else {
					tax_of_Farm = 100
				}
		
			//name(x,y)の読み込み＆name(x,y)をもとにmap(x,y)と都市の収容可能人数も取得
				name_buf = get_chapter(load_mapdata, "name(x,y)", " {", "}")
			
				repeat mapsize
					y = cnt
		
					notesel name_buf
					noteget name_buf_a_line, (y+1)
		
					sdim name_buf_a_tile, mapsize
					split name_buf_a_line, ", ", name_buf_a_tile
			
					repeat mapsize
						x = cnt
						name(x,y) = name_buf_a_tile(x)
						map(x,y) = addon_num(name_buf_a_tile(x))
	
						//各種の地区の収容可能人数に加算
							if addon_type(map(x,y)) = "low_density_residential" or addon_type(map(x,y)) = "high_density_residential" {
								total_Residential_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "low_density_commercial" or addon_type(map(x,y)) = "high_density_commercial" {
								total_Commercial_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "office" {
								total_Office_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "industrial" {
								total_Industrial_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "farm" {
								total_Farm_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
							if addon_type(map(x,y)) = "public" {
								total_Public_maximum_capacity += addon_maximum_capacity(map(x,y))
							}
					loop
			
				loop
			
			//category(x,y)の読み込み
				category_buf = get_chapter(load_mapdata, "category(x,y)", " {", "}")
			
				repeat mapsize
					y = cnt
		
					notesel category_buf
					noteget category_buf_a_line, (y+1)
		
					sdim category_buf_a_tile, mapsize
					split category_buf_a_line, ", ", category_buf_a_tile
			
					repeat mapsize
						x = cnt
						category(x,y) = category_buf_a_tile(x)
					loop
			
				loop
	
			//category_2(x,y)の読み込み
				if instr(load_mapdata, 0, "category_2(x,y)") != -1 {
					category_2_buf = get_chapter(load_mapdata, "category_2(x,y)", " {", "}")
				
					repeat mapsize
					y = cnt
		
					notesel category_2_buf
					noteget category_2_buf_a_line, (y+1)
		
					sdim category_2_buf_a_tile, mapsize
					split category_2_buf_a_line, ", ", category_2_buf_a_tile
			
					repeat mapsize
						x = cnt
						category_2(x,y) = category_2_buf_a_tile(x)
					loop
			
				loop
	
				} else {
					//セーブデータにcategory_2の情報がない場合は全て50万円/マスに設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								category_2(x,y) = ""
							loop
						loop
				}
	
			//category_3(x,y)の読み込み
				if instr(load_mapdata, 0, "category_3(x,y)") != -1 {
					category_3_buf = get_chapter(load_mapdata, "category_3(x,y)", " {", "}")
				
					repeat mapsize
					y = cnt
		
					notesel category_3_buf
					noteget category_3_buf_a_line, (y+1)
		
					sdim category_3_buf_a_tile, mapsize
					split category_3_buf_a_line, ", ", category_3_buf_a_tile
			
					repeat mapsize
						x = cnt
						category_3(x,y) = category_3_buf_a_tile(x)
					loop
			
				loop
	
				} else {
					//セーブデータにcategory_3の情報がない場合は全て50万円/マスに設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								category_3(x,y) = ""
							loop
						loop
				}
		
			//obj_type(x,y)の読み込み
				obj_type_buf = get_chapter(load_mapdata, "obj_type(x,y)", " {", "}")
			
				repeat mapsize
					y = cnt
		
					notesel obj_type_buf
					noteget obj_type_buf_a_line, (y+1)
		
					sdim obj_type_buf_a_tile, mapsize
					split obj_type_buf_a_line, ", ", obj_type_buf_a_tile
			
					repeat mapsize
						x = cnt
						obj_type(x,y) = int(obj_type_buf_a_tile(x))
					loop
			
				loop
		
			//obj_dire(x,y)の読み込み
				obj_dire_buf = get_chapter(load_mapdata, "obj_dire(x,y)", " {", "}")
			
				repeat mapsize
					y = cnt
		
					notesel obj_dire_buf
					noteget obj_dire_buf_a_line, (y+1)
		
					sdim obj_dire_buf_a_tile, mapsize
					split obj_dire_buf_a_line, ", ", obj_dire_buf_a_tile
			
					repeat mapsize
						x = cnt
						obj_dire(x,y) = int(obj_dire_buf_a_tile(x))
					loop
			
				loop
	
			//obj_serial_num(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_serial_num(x,y)") != -1 {
					obj_serial_num_buf = get_chapter(load_mapdata, "obj_serial_num(x,y)", " {", "}")
					
					repeat mapsize
						y = cnt
			
						notesel obj_serial_num_buf
						noteget obj_serial_num_buf_a_line, (y+1)
			
						sdim obj_serial_num_buf_a_tile, mapsize
						split obj_serial_num_buf_a_line, ", ", obj_serial_num_buf_a_tile
				
						repeat mapsize
							x = cnt
							obj_serial_num(x,y) = int(obj_serial_num_buf_a_tile(x))
	
							if obj_serial_num(x,y) > next_obj_serial_num {
								next_obj_serial_num = obj_serial_num(x,y)
							}
						loop
					loop
				}
	
			//obj_use_tiles_x(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_use_tiles_x(x,y)") != -1 {
					obj_use_tiles_x_buf = get_chapter(load_mapdata, "obj_use_tiles_x(x,y)", " {", "}")
					
					repeat mapsize
						y = cnt
			
						notesel obj_use_tiles_x_buf
						noteget obj_use_tiles_x_buf_a_line, (y+1)
			
						sdim obj_use_tiles_x_buf_a_tile, mapsize
						split obj_use_tiles_x_buf_a_line, ", ", obj_use_tiles_x_buf_a_tile
				
						repeat mapsize
							x = cnt
							obj_use_tiles_x(x,y) = int(obj_use_tiles_x_buf_a_tile(x))
						loop
				
					loop
				}
	
			//obj_use_tiles_y(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_use_tiles_y(x,y)") != -1 {
					obj_use_tiles_y_buf = get_chapter(load_mapdata, "obj_use_tiles_y(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel obj_use_tiles_y_buf
						noteget obj_use_tiles_y_buf_a_line, (y+1)
			
						sdim obj_use_tiles_y_buf_a_tile, mapsize
						split obj_use_tiles_y_buf_a_line, ", ", obj_use_tiles_y_buf_a_tile
				
						repeat mapsize
							x = cnt
							obj_use_tiles_y(x,y) = int(obj_use_tiles_y_buf_a_tile(x))
						loop
				
					loop
				}
	
			//obj_tiles_x(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_tiles_x(x,y)") != -1 {
					obj_tiles_x_buf = get_chapter(load_mapdata, "obj_tiles_x(x,y)", " {", "}")
					
					repeat mapsize
						y = cnt
			
						notesel obj_tiles_x_buf
						noteget obj_tiles_x_buf_a_line, (y+1)
			
						sdim obj_tiles_x_buf_a_tile, mapsize
						split obj_tiles_x_buf_a_line, ", ", obj_tiles_x_buf_a_tile
				
						repeat mapsize
							x = cnt
							obj_tiles_x(x,y) = int(obj_tiles_x_buf_a_tile(x))
						loop
				
					loop
				}
	
			//obj_tiles_y(x,y)の読み込み
				if instr(load_mapdata, 0, "obj_tiles_y(x,y)") != -1 {
					obj_tiles_y_buf = get_chapter(load_mapdata, "obj_tiles_y(x,y)", " {", "}")
	
					repeat mapsize
						y = cnt
			
						notesel obj_tiles_y_buf
						noteget obj_tiles_y_buf_a_line, (y+1)
			
						sdim obj_tiles_y_buf_a_tile, mapsize
						split obj_tiles_y_buf_a_line, ", ", obj_tiles_y_buf_a_tile
				
						repeat mapsize
							x = cnt
							obj_tiles_y(x,y) = int(obj_tiles_y_buf_a_tile(x))
						loop
				
					loop
				}
	
			//residents(x,y)の読み込み
				residents_buf = get_chapter(load_mapdata, "residents(x,y)", " {", "}")
			
				repeat mapsize
					y = cnt
		
					notesel residents_buf
					noteget residents_buf_a_line, (y+1)
		
					sdim residents_buf_a_tile, mapsize
					split residents_buf_a_line, ", ", residents_buf_a_tile
			
					repeat mapsize
						x = cnt
						residents(x,y) = int(residents_buf_a_tile(x))
						Total_Population += residents(x,y)
					loop
			
				loop
	
			//workers_Commercial(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Commercial(x,y)") != -1 {
					workers_Commercial_buf = get_chapter(load_mapdata, "workers_Commercial(x,y)", " {", "}")
	
					if Saved_Version >= 78 {
						repeat mapsize
							y = cnt
							
							notesel workers_Commercial_buf
							noteget workers_Commercial_buf_a_line, (y+1)
				
							sdim workers_Commercial_buf_a_tile, mapsize
							split workers_Commercial_buf_a_line, ", ", workers_Commercial_buf_a_tile
					
							repeat mapsize
								x = cnt
								workers_Commercial(x,y) = int(workers_Commercial_buf_a_tile(x))
								Total_workers_Commercial += workers_Commercial(x,y)
							loop
					
						loop
	
					} else {
						repeat mapsize
							y = cnt
	
							repeat mapsize
								x = cnt
	
								workers_Commercial(x,y) = 0
								Total_workers_Commercial = 0
							loop
						loop
					}
				}
	
			//workers_Office(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Office(x,y)") != -1 {
					workers_Office_buf = get_chapter(load_mapdata, "workers_Office(x,y)", " {", "}")
	
					if Saved_Version >= 78 {
						repeat mapsize
							y = cnt
				
							notesel workers_Office_buf
							noteget workers_Office_buf_a_line, (y+1)
				
							sdim workers_Office_buf_a_tile, mapsize
							split workers_Office_buf_a_line, ", ", workers_Office_buf_a_tile
					
							repeat mapsize
								x = cnt
								workers_Office(x,y) = int(workers_Office_buf_a_tile(x))
								Total_workers_Office += workers_Office(x,y)
							loop
					
						loop
					} else {
						repeat mapsize
							y = cnt
	
							repeat mapsize
								x = cnt
	
								workers_Office(x,y) = 0
								Total_workers_Office = 0
							loop
						loop
					}
				}
	
			//workers_Industrial(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Industrial(x,y)") != -1 {
					workers_Industrial_buf = get_chapter(load_mapdata, "workers_Industrial(x,y)", " {", "}")
	
					if Saved_Version >= 78 {
						repeat mapsize
							y = cnt
				
							notesel workers_Industrial_buf
							noteget workers_Industrial_buf_a_line, (y+1)
				
							sdim workers_Industrial_buf_a_tile, mapsize
							split workers_Industrial_buf_a_line, ", ", workers_Industrial_buf_a_tile
					
							repeat mapsize
								x = cnt
								workers_Industrial(x,y) = int(workers_Industrial_buf_a_tile(x))
								Total_workers_Industrial += workers_Industrial(x,y)
							loop
					
						loop
	
					} else {
						repeat mapsize
							y = cnt
	
							repeat mapsize
								x = cnt
	
								workers_Industrial(x,y) = 0
								Total_workers_Industrial = 0
							loop
						loop
					}
				}
	
			//workers_Farm(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Farm(x,y)") != -1 {
					workers_Farm_buf = get_chapter(load_mapdata, "workers_Farm(x,y)", " {", "}")
	
					if Saved_Version >= 78 {
						repeat mapsize
							y = cnt
				
							notesel workers_Farm_buf
							noteget workers_Farm_buf_a_line, (y+1)
				
							sdim workers_Farm_buf_a_tile, mapsize
							split workers_Farm_buf_a_line, ", ", workers_Farm_buf_a_tile
					
							repeat mapsize
								x = cnt
								workers_Farm(x,y) = int(workers_Farm_buf_a_tile(x))
								Total_workers_Farm += workers_Farm(x,y)
							loop
					
						loop
	
					} else {
						repeat mapsize
							y = cnt
	
							repeat mapsize
								x = cnt
	
								workers_Farm(x,y) = 0
								Total_workers_Farm = 0
							loop
						loop
					}
				}
	
			//workers_Public(x,y)の読み込み
				if instr(load_mapdata, 0, "workers_Public(x,y)") != -1 {
					workers_Public_buf = get_chapter(load_mapdata, "workers_Public(x,y)", " {", "}")
					
					if Saved_Version >= 78 {
						repeat mapsize
							y = cnt
				
							notesel workers_Public_buf
							noteget workers_Public_buf_a_line, (y+1)
				
							sdim workers_Public_buf_a_tile, mapsize
							split workers_Public_buf_a_line, ", ", workers_Public_buf_a_tile
					
							repeat mapsize
								x = cnt
								workers_Public(x,y) = int(workers_Public_buf_a_tile(x))
								Total_workers_Public += workers_Public(x,y)
							loop
					
						loop
	
					} else {
						repeat mapsize
							y = cnt
	
							repeat mapsize
								x = cnt
	
								workers_Commercial(x,y) = 0
								Total_workers_Public = 0
							loop
						loop
					}
				}
	
			//students(x,y)の読み込み
				if instr(load_mapdata, 0, "students(x,y)") != -1 {
					students_buf = get_chapter(load_mapdata, "students(x,y)", " {", "}")
	
					if Saved_Version >= 78 {
						repeat mapsize
							y = cnt
				
							notesel students_buf
							noteget students_buf_a_line, (y+1)
				
							sdim students_buf_a_tile, mapsize
							split students_buf_a_line, ", ", students_buf_a_tile
					
							repeat mapsize
								x = cnt
								students(x,y) = int(students_buf_a_tile(x))
								Total_students += students(x,y)
							loop
					
						loop
	
					} else {
						repeat mapsize
							y = cnt
	
							repeat mapsize
								x = cnt
	
								workers_Public(x,y) = 0
							loop
						loop
					}
				}
	
			//land_price(x,y)の読み込み
				if instr(load_mapdata, 0, "land_price(x,y)") != -1 {
					land_price_buf = get_chapter(load_mapdata, "land_price(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel land_price_buf
						noteget land_price_buf_a_line, (y+1)
			
						sdim land_price_buf_a_tile, mapsize
						split land_price_buf_a_line, ", ", land_price_buf_a_tile
				
						repeat mapsize
							x = cnt
							land_price(x,y) = int(land_price_buf_a_tile(x))
						loop
				
					loop
	
				} else {
					//セーブデータにland_priceの情報がない場合は全て50万円/マスに設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								land_price(x,y) = 50
							loop
						loop
				}
	
			//crime_rate(x,y)の読み込み
				if instr(load_mapdata, 0, "crime_rate(x,y)") != -1 {
					crime_rate_buf = get_chapter(load_mapdata, "crime_rate(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel crime_rate_buf
						noteget crime_rate_buf_a_line, (y+1)
			
						sdim crime_rate_buf_a_tile, mapsize
						split crime_rate_buf_a_line, ", ", crime_rate_buf_a_tile
				
						repeat mapsize
							x = cnt
							crime_rate(x,y) = int(crime_rate_buf_a_tile(x))
						loop
				
					loop
	
				} else {
					//セーブデータにcrime_rateの情報がない場合は全て0に設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								crime_rate(x,y) = 0
							loop
						loop
				}
	
			//education_rate(x,y)の読み込み
				if instr(load_mapdata, 0, "education_rate(x,y)") != -1 {
					education_rate_buf = get_chapter(load_mapdata, "education_rate(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel education_rate_buf
						noteget education_rate_buf_a_line, (y+1)
			
						sdim education_rate_buf_a_tile, mapsize
						split education_rate_buf_a_line, ", ", education_rate_buf_a_tile
				
						repeat mapsize
							x = cnt
							education_rate(x,y) = int(education_rate_buf_a_tile(x))
						loop
				
					loop
	
				} else {
					//セーブデータにeducation_rateの情報がない場合は全て0に設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								education_rate(x,y) = 0
							loop
						loop
				}
	
			//happiness(x,y)の読み込み
				if instr(load_mapdata, 0, "happiness(x,y)") != -1 {
					happiness_buf = get_chapter(load_mapdata, "happiness(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel happiness_buf
						noteget happiness_buf_a_line, (y+1)
			
						sdim happiness_buf_a_tile, mapsize
						split happiness_buf_a_line, ", ", happiness_buf_a_tile
				
						repeat mapsize
							x = cnt
							happiness(x,y) = int(happiness_buf_a_tile(x))
						loop
				
					loop
	
				} else {
					//セーブデータにhappinessの情報がない場合は全て0に設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								happiness(x,y) = 0
							loop
						loop
				}
	
			//crop(x,y)の読み込み
				if instr(load_mapdata, 0, "crop(x,y)") != -1 {
					crop_buf = get_chapter(load_mapdata, "crop(x,y)", " {", "}")
				
					repeat mapsize
					y = cnt
		
					notesel crop_buf
					noteget crop_buf_a_line, (y+1)
		
					sdim crop_buf_a_tile, mapsize
					split crop_buf_a_line, ", ", crop_buf_a_tile
			
					repeat mapsize
						x = cnt
						crop(x,y) = crop_buf_a_tile(x)
					loop
			
				loop
	
				} else {
					//セーブデータにcropの情報がない場合は全て50万円/マスに設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								crop(x,y) = "none"
							loop
						loop
				}
	
			//crop_amount(x,y)の読み込み
				if instr(load_mapdata, 0, "crop_amount(x,y)") != -1 {
					crop_amount_buf = get_chapter(load_mapdata, "crop_amount(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel crop_amount_buf
						noteget crop_amount_buf_a_line, (y+1)
			
						sdim crop_amount_buf_a_tile, mapsize
						split crop_amount_buf_a_line, ", ", crop_amount_buf_a_tile
				
						repeat mapsize
							x = cnt
							crop_amount(x,y) = int(crop_amount_buf_a_tile(x))
						loop
				
					loop
	
				} else {
					//セーブデータにcrop_amountの情報がない場合は全て0に設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								crop_amount(x,y) = 0
							loop
						loop
				}
	
			//age(x,y)の読み込み
				if instr(load_mapdata, 0, "age(x,y)") != -1 {
					age_buf = get_chapter(load_mapdata, "age(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel age_buf
						noteget age_buf_a_line, (y+1)
			
						sdim age_buf_a_tile, mapsize
						split age_buf_a_line, ", ", age_buf_a_tile
				
						repeat mapsize
							x = cnt
							age(x,y) = age_buf_a_tile(x)
						loop
				
					loop
	
				} else {
					//セーブデータにageの情報がない場合はランダムに決定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								repeat residents(x,y)
									if cnt = 0 {
										new_age = rnd(61) + 20
									} else {
										new_age = rnd(81)
									}
									
									age(x,y) += "["+new_age+"]"
								loop
							loop
						loop
				}
	
			//gender(x,y)の読み込み
				if instr(load_mapdata, 0, "gender(x,y)") != -1 {
					gender_buf = get_chapter(load_mapdata, "gender(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel gender_buf
						noteget gender_buf_a_line, (y+1)
			
						sdim gender_buf_a_tile, mapsize
						split gender_buf_a_line, ", ", gender_buf_a_tile
				
						repeat mapsize
							x = cnt
							gender(x,y) = gender_buf_a_tile(x)
						loop
				
					loop
	
				} else {
					//セーブデータにgenderの情報がない場合はランダムに決定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								repeat residents(x,y)
									new_gender_rnd = rnd(2)
	
									if new_gender_rnd = 0 {
										new_gender = "m"
									} else {
										new_gender = "f"
									}
									
									gender(x,y) += "["+new_gender+"]"
								loop
							loop
						loop
				}
	
			//workplace(x,y)の読み込み
				if instr(load_mapdata, 0, "workplace(x,y)") != -1 {
					workplace_buf = get_chapter(load_mapdata, "workplace(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel workplace_buf
						noteget workplace_buf_a_line, (y+1)
			
						sdim workplace_buf_a_tile, mapsize
						split workplace_buf_a_line, ", ", workplace_buf_a_tile
				
						repeat mapsize
							x = cnt
							workplace(x,y) = workplace_buf_a_tile(x)
						loop
				
					loop
	
				} else {
					//セーブデータにworkplaceの情報がない場合
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								workplace_tmp = ""
	
								repeat residents(x,y)
									workplace_tmp += "[]"
								loop
	
								workplace(x,y) = workplace_tmp
							loop
						loop
				}
	
			//school(x,y)の読み込み
				if instr(load_mapdata, 0, "school(x,y)") != -1 {
					school_buf = get_chapter(load_mapdata, "school(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel school_buf
						noteget school_buf_a_line, (y+1)
			
						sdim school_buf_a_tile, mapsize
						split school_buf_a_line, ", ", school_buf_a_tile
				
						repeat mapsize
							x = cnt
							school(x,y) = school_buf_a_tile(x)
						loop
				
					loop
	
				} else {
					//セーブデータにschoolの情報がない場合
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								school_tmp = ""
	
								repeat residents(x,y)
									school_tmp += "[]"
								loop
	
								school(x,y) = school_tmp
							loop
						loop
				}
	
			//reservation(x,y)の読み込み
				if instr(load_mapdata, 0, "reservation(x,y)") != -1 {
					reservation_buf = get_chapter(load_mapdata, "reservation(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel reservation_buf
						noteget reservation_buf_a_line, (y+1)
			
						sdim reservation_buf_a_tile, mapsize
						split reservation_buf_a_line, ", ", reservation_buf_a_tile
				
						repeat mapsize
							x = cnt
							reservation(x,y) = reservation_buf_a_tile(x)
						loop
				
					loop
	
				} else {
					//セーブデータにreservationの情報がない場合は全て0に設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								reservation(x,y) = "none"
							loop
						loop
				}

			//original_name(x,y)の読み込み
				if instr(load_mapdata, 0, "original_name(x,y)") != -1 {
					original_name_buf = get_chapter(load_mapdata, "original_name(x,y)", " {", "}")
				
					repeat mapsize
						y = cnt
			
						notesel original_name_buf
						noteget original_name_buf_a_line, (y+1)
			
						sdim original_name_buf_a_tile, mapsize
						split original_name_buf_a_line, ", ", original_name_buf_a_tile
				
						repeat mapsize
							x = cnt
							original_name(x,y) = original_name_buf_a_tile(x)
						loop
				
					loop
	
				} else {
					//セーブデータにoriginal_nameの情報がない場合は全て0に設定
						repeat mapsize
							x = cnt
							repeat mapsize
								y = cnt
	
								original_name(x,y) = ""
							loop
						loop
				}
	
	
			//総労働者数を読み込み
				repeat mapsize
					x = cnt
					repeat mapsize
						y = cnt
	
						sdim workplace_tmp, 8, residents(x,y)
						split workplace(x,y), "][", workplace_tmp
						
						workplace(x,y) = ""
						
						repeat residents(x,y)
							if instr(workplace_tmp(cnt), 0, "[") != -1 {
								split workplace_tmp(cnt), "[", cut, workplace_tmp(cnt)
							}
							if instr(workplace_tmp(cnt), 0, "]") != -1 {
								split workplace_tmp(cnt), "]", workplace_tmp(cnt), cut
							}
						
							//労働者が居るのに総労働者数が0の場合（バグ対策）
								if instr(workplace_tmp(cnt), 0, "c") != -1 {
									Total_workers_Commercial += 1
								}
								if instr(workplace_tmp(cnt), 0, "o") != -1 {
									Total_workers_Office += 1
								}
								if instr(workplace_tmp(cnt), 0, "i") != -1 {
									Total_workers_Industrial += 1
								}
								if instr(workplace_tmp(cnt), 0, "f") != -1 {
									Total_workers_Farm += 1
								}
								if instr(workplace_tmp(cnt), 0, "p") != -1 {
									Total_workers_Public += 1
								}
						loop
					loop
				loop
				
		;}
	
	//雨粒の初期位置
		randomize
	
		repeat 1000
			rain(cnt) = 0
			rain_x(cnt) = rnd(windowx)
			rain_y(cnt) = -rnd(windowy)
		loop
	
	//element2、element3関数は何度も使うと動作が重くなるため、よく使うtile_greenfieldの"null"のelement2およびelement3関数の内容を別の変数に保存
		//更地（tile_greenfield）の"null"のobj_type番号
			tile_greenfield_null_type_buf = element2( "tile_greenfield", use_type, addon_total_use_types, "null")
		
		//更地（tile_greenfield）の"null"のobj_dire番号
			tile_greenfield_null_dire_buf = element3( "tile_greenfield", use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "null")

		//更地（tile_greenfield）の"null"のobj_type番号
			tile_greenfield_autumn_type_buf = element2( "tile_greenfield", use_type, addon_total_use_types, "autumn")
		
		//更地（tile_greenfield）の"null"のobj_dire番号
			tile_greenfield_autumn_dire_buf = element3( "tile_greenfield", use_type, addon_total_use_types, "autumn", addon_direction, addon_total_addon_direction, "null")

		//更地（tile_greenfield）の"null"のobj_type番号
			tile_greenfield_snow_type_buf = element2( "tile_greenfield", use_type, addon_total_use_types, "snow")
		
		//更地（tile_greenfield）の"null"のobj_dire番号
			tile_greenfield_snow_dire_buf = element3( "tile_greenfield", use_type, addon_total_use_types, "snow", addon_direction, addon_total_addon_direction, "null")
	
	//需要度を増減
		//総求人数を取得
			Vacancies = (total_Commercial_maximum_capacity-Total_workers_Commercial) + (total_Office_maximum_capacity-Total_workers_Office) + (total_Industrial_maximum_capacity-Total_workers_Industrial) + (total_Public_maximum_capacity-Total_workers_Public)
		
		//総非労働者数を取得
			Total_Vagrants = Total_Population - Total_workers_Commercial - Total_workers_Office - Total_workers_Industrial - Total_workers_Public
	
	//読み込み後最初のループであることを示す
		first_loop = 1
	
	//読み込み中アイコンを閉じる
		oncmd 0

	//人口を反映
		before_Total_Population = Total_Population

		goto *main

*e
	dialoG""+(buffer_number(x,y) + obj_dire(x,y) + 1)+""
	end
		
*main
	title about_title
	
	randomize
	
	repeat
		dim trout_build, total_addons, (mapsize*mapsize) ; check
		dim done_build, 6, mapsize, mapsize
	
		main_cnt ++

		if pause = 0 {
	
			//Speed=2のとき、1回のループで1分とする
				if speed = 1 {
					if cnt \ 4 = 0 {
						time_Minutes += 1
					}
				} else {
					time_Minutes += speed - 1
				}
			
			//time_Minutes=60で1時間とする
				if time_Minutes > 59 {
					time_Minutes = 0
					time_Hour ++
				}
		
			//time_Hour=24で1日とする
				if time_Hour= 24 {
					time_Date ++
					time_Hour = 0
					time_Minutes = 0
		
					if time_Date > 28 and time_Month = 2 and time_Year\4 != 0 {
						time_Date = 1
						time_Month ++
					}
					if time_Date > 29 and time_Month = 2 and time_Year\4 = 0 {
						time_Date = 1
						time_Month ++
					}
					if time_Date > 30 and (time_Month = 4 or time_Month = 6 or time_Month = 9 or time_Month = 11) {
						time_Date = 1
						time_Month ++
					}
					if time_Date > 31 and (time_Month = 1 or time_Month = 3 or time_Month = 5 or time_Month = 7 or time_Month = 8 or time_Month = 10 or time_Month = 12) {
						time_Date = 1
						time_Month ++
					}
		
					if time_Month > 12 {
						time_Year ++
						time_Month = 1
						time_Date = 1
					}
				}
		
				if time_Hour = 0 and time_Minutes = 0 and time_Date = 1 {
					gosub *pay_budget
				}
		}
	
		/*カメラ操作*/
			getkey key_left, 37
			if key_left = 1 {
				camx -= 10
			}
			
			getkey key_up, 38
			if key_up = 1 {
				camy -= 5
			}
			
			getkey key_right, 39
			if key_right = 1 {
				camx += 10
			}
			
			getkey key_down, 40
			if key_down = 1 {
				camy += 5
			}
	
		/*マップ描写*/
			redraw 0
			color 0, 0, 0 : boxf

		/*マウス座標取得*/
			if mousex != before_mousex or mousey != before_mousey or camx != before_camx or camy != before_camy {
				mousex_=mousex+camx-(chip_size/2)	//mx,myにマウス座標取得
				mousey_=mousey+camy+16
				mx=(mousey_+mousex_/2)/(chip_size/2)
				my=(-mousex_+mousey_*2)/chip_size
	
				before_mousex = mousex
				before_mousey = mousey
			}
	
		; ------ FPS取得処理 ------
			  if gettime(7) < msecond { ; ミリ秒の桁上がりを確認する
			    ; fpsにカウントしたフレーム数を代入し、カウントを1フレーム目に戻す
			    fps = frame_count
			    frame_count = 1
			
			  } else {
			    ; 上記以外の場合フレームをカウント
			    frame_count = frame_count + 1
			
			  }
			  ; msecondへ現在のミリ秒値を代入
			  msecond = gettime(7)
	
		/*BGM再生*/
			gosub *play_BGM
	
		stick key,0 ; キー取得
	
*main_2
		onclick 0
	
		x = 0
		y = 0
	
		//表示する範囲や画面中央の座標などを取得
		if camx != before_camx or camy != before_camy or windowx != before_windowx or windowy != before_windowy {

			//(mx, my)を中心とした描写範囲
				if windowx != before_windowx or windowy != before_windowy {
					draw_area = (sqrt(powf(windowx, 2)+powf(windowy, 2))/sqrt(powf(64/2, 2)+powf(32/2, 2)))
				}
	
			//画面中央の座標
				x_=(windowx/2)+camx-chip_size/2	//mx,myにマウス座標取得
				y_=(windowy/2)+camy
				middle_x=(y_+x_/2)/(chip_size/2)
				middle_y=(-x_+y_*2)/chip_size
	
			//左上のx座標
				left_top_x_ = 0+camx-chip_size/2
				left_top_y_ = 0+camy
				left_top_x = (left_top_y_+left_top_x_/2)/(chip_size/2)
	
				if left_top_x < 0 {
					left_top_x = 0
				}
		
			//左下のy座標
				left_bottom_x_ = 0+camx-chip_size/2
				left_bottom_y_ = windowy+camy
				left_bottom_y = (-left_bottom_x_+left_bottom_y_*2)/chip_size
	
				if left_bottom_y >= mapsize {
					left_bottom_y = mapsize-1
				}
		
			//右上のy座標
				right_top_x_ = windowx+camx-chip_size/2
				right_top_y_ = 0+camy
				right_top_y = (-right_top_x_+right_top_y_*2)/chip_size
				
				if right_top_y < 0 {
					right_top_y = 0
				}
		
			//右下のx座標
				right_bottom_x_ = windowx+camx-chip_size/2
				right_bottom_y_ = windowy+camy
				right_bottom_x = (right_bottom_y_+right_bottom_x_/2)/(chip_size/2)
	
				if right_bottom_x >= mapsize {
					right_bottom_x = mapsize-1
				}
				
	
				before_camx = camx
				before_camy = camy

				before_windowx = windowx
				before_windowy = windowy
	
		}
	
		//各マスの値を調節
		if cnt \ Adjustment_Interval = 0 {
			ny = 0
		
			repeat mapsize
				ny = cnt
		
				//周囲のオブジェクトの番号を取得
					left_chip = ""
					top_chip = ""
					bottom_chip = ""
					right_chip = ""
						
					if nx > 0 {
						left_chip = category(nx-1, ny)
					}
					if ny > 0 {
						top_chip = category(nx, ny-1)
					}
					if mapsize-1 > ny {
						bottom_chip = category(nx, ny+1)
					}
					if mapsize-1 > nx {
						right_chip = category(nx+1, ny)
					}
			
					left_chip_2 = ""
					top_chip_2 = ""
					bottom_chip_2 = ""
					right_chip_2 = ""
				
					if nx > 0 {
						left_chip_2 = category_2(nx-1, ny)
					}
					if ny > 0 {
						top_chip_2 = category_2(nx, ny-1)
					}
					if mapsize-1 > ny {
						bottom_chip_2 = category_2(nx, ny+1)
					}
					if mapsize-1 > nx {
						right_chip_2 = category_2(nx+1, ny)
					}
		
				//道路・線路の向きを調節
					category_buf = category(nx,ny)
					category_2_buf = category_2(nx,ny)
								
					x = nx : y = ny
		
					put_addon_name_tmp = put_addon_name
								
					if category_buf = "road" {
						gosub *adjustment_road
					}
					if category_buf = "railroad" or category_buf = "station" {
						gosub *adjustment_railroad
					}
	
				//幸福度の平均値を取得するための加算
					if nx = 0 and ny = 0 {
						happiness_ave_tmp = 0
						happiness_ave_cnt = 0
					}
		
					if category(nx,ny) != "tile" and category(nx,ny) != "road" and category(nx,ny) != "railroad" {	; タイル（更地）や道路、線路などは含めない
						happiness_ave_tmp += happiness(nx,ny)
						happiness_ave_cnt ++
					}
		
					if nx = mapsize - 1 and ny = mapsize - 1 and happiness_ave_cnt != 0 {
						happiness_ave = happiness_ave_tmp / happiness_ave_cnt
						gosub *get_approval_rate	; 支持率を取得
					}
		
				//幸福度の更新
					gosub *get_happiness_level
	
				//予約地区に建物を建設
					if reservation(nx,ny) != "none" and rnd(10) = 0 {
						gosub *Build_on_Reservation_area
					}
	
				//name(x,y)が"tile_greenfield"にも関わらずobj_type(x,y)が0以外の場合（黒いマス防止）
					if name(nx,ny) = "tile_greenfield" and obj_type(nx,ny) != tile_greenfield_null_type_buf {
						obj_type(nx,ny) = tile_greenfield_null_type_buf
					}
		
				//値を元に戻す
					put_addon_name = put_addon_name_tmp
		
				//nx, nyを増加
					ny ++
		
					if ny >= mapsize {
						nx++
					}
					if nx >= mapsize {
						nx = 0
						ny = 0
					}
			loop
		}

		if time_Hour = 0 and time_Minutes = 0 {
			repeat mapsize
				y = cnt

				repeat mapsize
					x = cnt

					//人口・需要度変動
					gosub *fluctuation
				loop
			loop
		}

		if mx < left_top_x {
			mx = left_top_x
		}
		if my < right_top_y {
			my = right_top_y
		}
		if mx > right_bottom_x {
			mx = right_bottom_x
		}
		if my > left_bottom_y {
			my = left_bottom_y
		}

		qvvw1 = mx-draw_area-2	; mxを中心として、左draw_area-2マスまでを処理
		qvvw2 = mx+draw_area+2	; mxを中心として、右draw_area+2マスまでを処理
		qvvw3 = my-draw_area-2	; myを中心として、上draw_area-2マスまでを処理
		qvvw4 = my+draw_area+2	; myを中心として、下draw_area+2マスまでを処理

		if qvvw1 < left_top_x {
			qvvw1 = left_top_x
		}
		if qvvw2 > right_bottom_x {
			qvvw2 = right_bottom_x
		}
		if qvvw3 < right_top_y {
			qvvw3 = right_top_y
		}
		if qvvw4 > left_bottom_y {
			qvvw4 = left_bottom_y
		}

		x = qvvw1
		y = qvvw3

		if x < 0 {
			x = 0
		}
		if y < 0 {
			y = 0
		}

		if qvvw1 < -64 {
			goto *skip2
		}

		if qvvw2 > mapsize+64 {
			goto *skip2
		}

		if qvvw3 < -64 {
			goto *skip2
		}

		if qvvw4 > mapsize+64 {
			goto *skip2
		}


		//ここから描画

		repeat
				if x>(left_top_x-1) and x<(right_bottom_x+1) and y>(right_top_y-1) and y<(left_bottom_y+1) {
					/*
					//現在処理しているマス（常時非表示）
						;redraw 1
						;redraw 0
						color : boxf 0, 0, 80, 60
						pos 0, 0 : color 255, 255, 255 : mes "x:"+x+", y:"+y+"\nmx:"+mx+", my:"+my+"\nltx:"+left_top_x+", lby:"+left_bottom_y+"\nrbx:"+right_bottom_x+", rty:"+right_top_y+""
					*/

					//クォータービューの座標を画面上の座標に変換
						qv2 x, y

						if x < 0 {
							goto *skip1
						}
			
						if y < 0 {
							goto *skip1
						}
			
						if x = mapsize {
							x=qvvw1
							y+
							goto *skip1
						}
			
						if y = mapsize {
							break
						}
	
					//オブジェクトのバッファ番号、オブジェクトの左上の座標（atlx）、左下の座標（atly）、右上の座標（abrx）、右下の座標（abry）、サイズ（sizex, sizey）を取得
						if Set_Dark_on_Night = 1 {
							if (time_Hour >= 18 and time_Hour <= 23) or (time_Hour >= 0 and time_Hour <= 5) {
								buffer_number(x,y) = (map(x,y)+1) * 10 * 100 * 100 + 10000 + obj_type(x,y)*100
							} else : if (time_Hour >= 16 and time_Hour <= 17) or (time_hour = 6) {
								buffer_number(x,y) = (map(x,y)+1) * 10 * 100 * 100 + 20000 + obj_type(x,y)*100
							} else {
								buffer_number(x,y) = (map(x,y)+1) * 10 * 100 * 100 + obj_type(x,y)*100
							}
						} else {
							buffer_number(x,y) = (map(x,y)+1) * 10 * 100 * 100 + obj_type(x,y)*100
						}

						get_about_addon map(x,y), obj_type(x,y), obj_dire(x,y), atlx, atly, abrx, abry, sizex, sizey, chipx, chipy

						if name(x,y) = "tile_greenfield" {
							if time_Month >= 9 and time_Month <= 11 {
								;buffer_number(x,y) = (10 * map(x,y)) + tile_greenfield_autumn_type_buf
								tile_type_tmp = tile_greenfield_snow_type_buf
								get_about_addon map(x,y), tile_greenfield_autumn_type_buf, tile_greenfield_autumn_dire_buf, atlx, atly, abrx, abry, sizex, sizey, chipx, chipy
							} else : if time_Month = 12 or (time_Month >= 1 and time_Month <= 2) {
								;buffer_number(x,y) = (10 * map(x,y)) + tile_greenfield_snow_type_buf
								tile_type_tmp = tile_greenfield_snow_type_buf
								get_about_addon map(x,y), tile_greenfield_snow_type_buf, tile_greenfield_snow_dire_buf, atlx, atly, abrx, abry, sizex, sizey, chipx, chipy
							} else {
								;buffer_number(x,y) = (10 * map(x,y)) + tile_greenfield_null_type_buf
								tile_type_tmp = tile_greenfield_null_type_buf
								get_about_addon map(x,y), tile_greenfield_null_type_buf, tile_greenfield_null_dire_buf, atlx, atly, abrx, abry, sizex, sizey, chipx, chipy
							}
						}
	
						px = 0 : py = 0
						
						if chipx > 1 {
							if obj_dire(x,y) = 0 {
								atlx += 0
								px += 32 * obj_tiles_x(x,y)
								py += 16 * (obj_use_tiles_x(x,y) - 1 - obj_tiles_x(x,y))
								sizex = 64
							} else : if obj_dire(x,y) = 1 {
								atlx += 32 * obj_tiles_x(x,y)
								px += 32 * obj_tiles_x(x,y)
								py += ((obj_use_tiles_x(x,y)-1)-obj_tiles_x(x,y)) * 16
								sizex = 64
							} else : if obj_dire(x,y) = 2 {
								atlx += 32 * obj_tiles_x(x,y)
								px += 32 * obj_tiles_x(x,y)
								py += ((obj_use_tiles_x(x,y)-1)-obj_tiles_x(x,y)) * 16
								sizex = 64
							} else : if obj_dire(x,y) = 3 {
								atlx += 64 * ((obj_use_tiles_x(x,y)-1)-(-obj_tiles_x(x,y)))
								px += 32 * ((obj_use_tiles_x(x,y)-1)-(-obj_tiles_x(x,y)))
								py += ((obj_use_tiles_x(x,y)-1)+(-obj_tiles_x(x,y))) * 16 - 16
								sizex = 64
							}
						}
	
						if chipy > 1 {
							if obj_dire(x,y) = 0 {
								atlx += 32 * obj_tiles_y(x,y)
								px += 32 * (obj_use_tiles_y(x,y) - 1 - obj_tiles_y(x,y))
								py += ((obj_use_tiles_y(x,y)-1)-obj_tiles_y(x,y)) * 16
								sizex = 64
							} else : if obj_dire(x,y) = 1 {
								atly += 32 * ((obj_use_tiles_y(x,y)-1)-(-obj_tiles_y(x,y)))
								px += 32 * (obj_use_tiles_y(x,y) - 1 - obj_tiles_y(x,y))
								py += 16 * (obj_use_tiles_y(x,y) - 1 - obj_tiles_y(x,y))
								sizex = 64
							} else : if obj_dire(x,y) = 2 {
								atly += 32 * ((obj_use_tiles_y(x,y)-1)-(-obj_tiles_y(x,y)))
								px += 32 * abs(obj_tiles_y(x,y))
								py += 16 * abs(obj_tiles_y(x,y))
								sizex = 64
							} else : if obj_dire(x,y) = 3 {
								atlx += 32 * obj_tiles_y(x,y)
								px += 32 * (obj_use_tiles_y(x,y) - 1 - obj_tiles_y(x,y))
								py += ((obj_use_tiles_y(x,y)-1)-obj_tiles_y(x,y)) * 16
								sizex = 64
							}
						}
							
					//オブジェクトを表示
						if (atly*(abry/sizey)) - (sizey*(abry/sizey)) > 0 and (category(x,y) != "road" and category(x,y) != "railroad" and category(x,y) != "") and chipx = 0 and chipy = 0 {
							py -= atly
						}

						if (category(x,y) = "road" or category(x,y) = "railroad" or category(x,y) = "tile") {
							py -= 32
						}
						
						if abry-atly >= sizey and (category(x,y) = "road" or category(x,y) = "railroad" or category(x,y) = "") {
							atly -= sizey
						}
						
						pos macro1 + px, macro2 - sizey + 1 + py
	
						if addon_transparent_color_r(map(x,y)) = 0 and addon_transparent_color_g(map(x,y)) = 0 and addon_transparent_color_b(map(x,y)) = 0 {
							gmode 2
						} else {
							color addon_transparent_color_r(map(x,y)), addon_transparent_color_g(map(x,y)), addon_transparent_color_b(map(x,y))
							gmode 4, sizex, sizey, 256
						}
						
						if ( obj_use_tiles_x(x,y) != 0 or obj_use_tiles_y(x,y) != 0 ) and category(x,y) != "road" and category(x,y) != "railroad" and category(x,y) != "station" {
							if obj_use_tiles_x(x,y) != 0 and obj_use_tiles_y(x,y) = 0 {
								if obj_use_tiles_x(x,y) > 0 and (obj_dire(x,y) = 0 or obj_dire(x,y) = 1 or obj_dire(x,y) = 2) {
									celput buffer_number(x,y) + obj_dire(x,y) + 1, obj_tiles_x(x,y)
								} else : if obj_use_tiles_x(x,y) > 0 and obj_dire(x,y) = 3 {
									celput buffer_number(x,y) + obj_dire(x,y) + 1, obj_use_tiles_x(x,y) - 1 + obj_tiles_x(x,y)
								}
							}
							if obj_use_tiles_x(x,y) = 0 and obj_use_tiles_y(x,y) != 0 {
								if obj_use_tiles_y(x,y) > 0 and (obj_dire(x,y) = 0 or obj_dire(x,y) = 1 or obj_dire(x,y) = 3) {
									celput buffer_number(x,y) + obj_dire(x,y) + 1, obj_use_tiles_y(x,y) - 1 - obj_tiles_y(x,y)
								} else : if obj_use_tiles_y(x,y) > 0 and obj_dire(x,y) = 2 {
									onerror *e
									celput buffer_number(x,y) + obj_dire(x,y) + 1, abs(obj_tiles_y(x,y))
								}
							}
							if obj_use_tiles_x(x,y) != 0 and obj_use_tiles_y(x,y) != 0 {
								if obj_tiles_x(x,y) >= 0 {
									celput buffer_number(x,y) + obj_dire(x,y) + 1, (atlx / sizex + (2 * int((atly-1) / sizey)))
								} else {
									celput buffer_number(x,y) + obj_dire(x,y) + 1, (atlx / sizex + (2 * int((atly-1) / sizey))) + obj_tiles_x(x,y) + obj_tiles_y(x,y)
								}
							}
							
						} else {
							if category(x,y) = "tile" {
								celput buffer_number(x,y), tile_type_tmp
							} else {
								celput buffer_number(x,y), obj_dire(x,y)
							}
						}
							
						
				}

	*skip1				
			x += 1

			if x > qvvw2 {
				x = qvvw1
				y += 1
			}

			if y > qvvw4 : break

		loop

	*skip2
		/*
		//時間帯に応じて明るさを調節
			if Set_Dark_on_Night = 1 {
				//夜間
				if (time_Hour >= 18 and time_Hour <= 23) or (time_Hour >= 0 and time_Hour <= 5) {
					color 0, 0, 0 : sboxf 200, 0, 0, windowx, windowy
				}
		
				//夕方（だんだん暗く）
				if time_Hour = 17 {
					color 0, 0, 0 : sboxf double(time_Minutes+1.0)/60*200, 0, 0, windowx, windowy
				}
		
				//明け方（だんだん明るく）
				if time_Hour = 6 {
					color 0, 0, 0 : sboxf 200-double(time_Minutes+1.0)/60*200, 0, 0, windowx, windowy
				}
			}
		*/
		
		//マウスポインタの位置のチップを光らせる
			if opening_addon_menu = 1 {
				menu_line_y = windowy-70-titlebar_h-32-20
			} else {
				menu_line_y = windowy-70-titlebar_h
			}
					
			if mousey < menu_line_y and (ginfo(0)-ginfo(4)) >= 0 and (ginfo(0)-ginfo(4)) <= (ginfo(4)+windowx) and (ginfo(1)-ginfo(5)) >= titlebar_h {
				if pointer_icon = -1 or cursor_mode = "bulldozer" {
					color 0, 0, 0
					
					qv2 mx,my
					pos macro1, macro2-32
	
					if cursor_mode = "normal" {
						gmode 4,,,128 : gcopy 17, 0, 0, 64, 32
					}
					if cursor_mode = "bulldozer" {
						gmode 4,,,128 : gcopy 18, 0, 0, 64, 32
					}
							
				} else {
					color 0, 0, 0
					
					qv2 mx,my
					pos macro1, macro2-32
					gmode 4,,,128 : gcopy 17, 0, 0, 64, 32
								
					qv2 mx,my
					color : gmode 4,,,200
	
					if instr(put_addon_name, 0, "Area : ") != -1 or (pointer_icon >= 22 and pointer_icon <= 25) {
						pos macro1,macro2-32 : gcopy pointer_icon, 0, 0, 64, 32					; 地区設定の場合
	
					} else {
						pos macro1+16,macro2-32 : gcopy pointer_icon, 0, 0, 32, 32	; 個別の建物の場合
					}
				}
			}
		
	
		//メニューを開いているときはstat_mode = "type"にする
			if cursor_mode != "normal" and cursor_mode != "put_Road" {
				stat_mode = "type"
				stat_mode_changed = 1
			}
	
			if cursor_mode = "normal" and stat_mode_changed = 1 {
				stat_mode = ""
				stat_mode_changed = 0
			}
	
		//stat_mode = "type"の場合は地区を示す色を表示する
			if stat_mode = "type" {
		
				repeat mapsize
					x = cnt
					repeat mapsize
						y = cnt
	
						if x < left_top_x or x > right_bottom_x or y < right_top_y or y > left_bottom_y {
							continue
						}
						
						qv2 x,y
						category_buf = category(x,y)
						reservation_buf = reservation(x,y)
						
						if category_buf = "residential" or instr(reservation_buf, 0, "residential") != -1 {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 22, 0, 0, 64, 32
						}
						if category_buf = "commercial" or instr(reservation_buf, 0, "commercial") != -1 {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 23, 0, 0, 64, 32
						}
						if category_buf = "office" or instr(reservation_buf, 0, "office") != -1 {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 24, 0, 0, 64, 32
						}
						if category_buf = "industrial" or instr(reservation_buf, 0, "industrial") != -1 {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 25, 0, 0, 64, 32
						}
						if category_buf = "farm" or instr(reservation_buf, 0, "farm") != -1 {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 59, 0, 0, 64, 32
						}
						if category_buf = "public" {
							color : gmode 4,,,128
							pos macro1, macro2-32 : gcopy 26, 0, 0, 64, 32
						}
					loop
				loop
	
				color 255, 255, 255 : font SystemFont, 14
				pos 10, 10 : mes "表示中 : 建物の種類\n緑:住宅 青:商業 水色:オフィス 黄色:工場 茶色:農業 灰色:公共施設"
		
			}
	
		//stat_mode = "land_price"の場合は地価を示す色を表示する
			if stat_mode = "land_price" {
		
				repeat mapsize
					x = cnt
					repeat mapsize
						y = cnt
	
						if x < left_top_x or x > right_bottom_x or y < right_top_y or y > left_bottom_y {
							continue
						}
	
						category_buf = category(x,y)
	
						if category_buf != "road" and category_buf != "railroad" and category_buf != "tile" {
						
							qv2 x,y
							land_price_buf = land_price(x,y)
							
							if land_price_buf > 200 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 34, 0, 0, 64, 32
								
							} else : if land_price_buf > 150 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 35, 0, 0, 64, 32
		
							} else : if land_price_buf > 80 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 36, 0, 0, 64, 32
	
							} else : if land_price_buf = 50 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 48, 0, 0, 64, 32
		
							} else : if land_price_buf > 30 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 37, 0, 0, 64, 32
		
							} else : if land_price_buf > 15 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 38, 0, 0, 64, 32
		
							} else {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 39, 0, 0, 64, 32
							}
	
						}
		
					loop
				loop
	
				color 255, 255, 255 : font SystemFont, 14
				pos 10, 10 : mes "表示中 : 地価\n青:高い 赤:低い"
		
			}
	
		//stat_mode = "crime_rate"の場合は犯罪率を示す色を表示する
			if stat_mode = "crime_rate" {
				repeat mapsize
					x = cnt
					repeat mapsize
						y = cnt
	
						if x < left_top_x or x > right_bottom_x or y < right_top_y or y > left_bottom_y {
							continue
						}
	
						category_buf = category(x,y)
	
						if category_buf != "road" and category_buf != "railroad" and category_buf != "tile" {
						
							qv2 x,y
							crime_rate_buf = crime_rate(x,y)
							
							if crime_rate_buf <= -100 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 34, 0, 0, 64, 32
								
							} else : if crime_rate_buf <= -50 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 35, 0, 0, 64, 32
	
							} else : if crime_rate_buf = 0 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 48, 0, 0, 64, 32
		
							} else : if crime_rate_buf < 0 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 36, 0, 0, 64, 32
		
							} else : if crime_rate_buf <= 30 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 37, 0, 0, 64, 32
		
							} else : if crime_rate_buf <= 60 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 38, 0, 0, 64, 32
		
							} else {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 39, 0, 0, 64, 32
							}
	
						}
		
					loop
				loop
	
				color 255, 255, 255 : font SystemFont, 14
				pos 10, 10 : mes "表示中 : 犯罪率\n青:低い 赤:高い"
		
			}
	
		//stat_mode = "education_rate"の場合は教育度を示す色を表示する
			if stat_mode = "education_rate" {
		
				repeat mapsize
					x = cnt
					repeat mapsize
						y = cnt
	
						if x < left_top_x or x > right_bottom_x or y < right_top_y or y > left_bottom_y {
							continue
						}
	
						category_buf = category(x,y)
	
						if category_buf != "road" and category_buf != "railroad" and category_buf != "tile" {
						
							qv2 x,y
							education_rate_buf = education_rate(x,y)
							
							if education_rate_buf <= 0 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 39, 0, 0, 64, 32
								
							} else : if education_rate_buf <= 15 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 38, 0, 0, 64, 32
	
							} else : if education_rate_buf <= 30 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 48, 0, 0, 64, 32
		
							} else : if education_rate_buf <= 45 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 37, 0, 0, 64, 32
		
							} else : if education_rate_buf <= 60 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 36, 0, 0, 64, 32
		
							} else : if education_rate_buf <= 75 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 35, 0, 0, 64, 32
		
							} else {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 34, 0, 0, 64, 32
							}
	
						}
		
					loop
				loop
	
				color 255, 255, 255 : font SystemFont, 14
				pos 10, 10 : mes "表示中 : 教育度\n青:高い 赤:低い"
		
			}
	
		//stat_mode = "hsppiness"の場合は幸福度を示す色を表示する
			if stat_mode = "happiness" {
		
				repeat mapsize
					x = cnt
					repeat mapsize
						y = cnt
	
						if x < left_top_x or x > right_bottom_x or y < right_top_y or y > left_bottom_y {
							continue
						}
	
						category_buf = category(x,y)
	
						if category_buf != "road" and category_buf != "railroad" and category_buf != "tile" {
						
							qv2 x,y
							happiness_buf = happiness(x,y)
							
							if happiness_buf <= 15 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 39, 0, 0, 64, 32
								
							} else : if happiness_buf <= 30 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 38, 0, 0, 64, 32
	
							} else : if happiness_buf <= 45 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 48, 0, 0, 64, 32
		
							} else : if happiness_buf <= 60 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 37, 0, 0, 64, 32
		
							} else : if happiness_buf <= 75 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 36, 0, 0, 64, 32
		
							} else : if happiness_buf <= 90 {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 35, 0, 0, 64, 32
		
							} else {
								color : gmode 4,,,128
								pos macro1, macro2-32 : gcopy 34, 0, 0, 64, 32
							}
	
						}
		
					loop
				loop
	
				color 255, 255, 255 : font SystemFont, 14
				pos 10, 10 : mes "表示中 : 幸福度\n青:高い 赤:低い"
		
			}
	
		//天候の変動
			gosub *climate

		//タイルの詳細を表示している場合
			if showing_detail = 1 {
				gosub *show_detail
			}

		//建物名変更inputの背景
			if showing_new_name_input = 1 {
				color 0, 162, 232 : boxf windowx-370, 0, windowx, 30

				color 255, 255, 255 : font SystemFont, 14
				pos windowx-360, 5 : mes "新しい建物名 : "
			}

		//FPS値の表示（通常時非表示）
		/*
			color 0, 0, 0 
			sboxf 128, 0, 0, 50, 25
			
			color 255, 255, 255 : font SystemFont, 12
			pos 5, 5 : mes "FPS : "+fps+""
		*/
	
		//性別の人口を取得
			if time_Hour = 0 or time_Minutes = 0 {
				gosub *get_gender_all_people
			}

		//マウスのどのボタンが押されているか取得
			mouse_left = 0
			mouse_right = 0
						
			getkey mouse_left, 1
			getkey mouse_right, 2
		
			if mouse_left = 1 or mouse_right = 1 {
				gosub *main_onclick
			}

			mouse_left = 0
			mouse_right = 0
	
*menu_buttons
			//現在のウィンドウサイズとタイトルバーの高さを取得
				gosub *get_windowsize
			
			//メニュー
				color 0, 0, 0
				gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h, windowx, windowy
	
				//何のメニューも開かれていない場合は cursor_mode = "normal" に

				//アドオン選択メニューが開かれている場合はアドオン選択メニューの背景色を表示
					if opening_addon_menu = 1 {
						gosub *open_menu_addon_menu
					} else : if cursor_mode = "normal" {
						put_addon_name = ""
					}

					font SystemFont, 10
	
				//標準カーソルボタン
					if cursor_mode = "normal" {
						gmode 2
						pos 20, windowy-70-titlebar_h : gcopy 3, 0, 32, 32, 32
					} else {
						gmode 2
						pos 20, windowy-70-titlebar_h : gcopy 3, 0, 0, 32, 32
					}
					if click_range(20, windowy-70-titlebar_h, 20+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 20, windowy-70-titlebar_h-18, 20+60, windowy-70-titlebar_h
						color 0, 0, 0
						pos 20+2, windowy-70-titlebar_h-18+2 : mes "カーソル"
					}
	
				//道路ボタン
					if cursor_mode = "put_Road" {
						gmode 2
						pos 60, windowy-70-titlebar_h : gcopy 4, 0, 32, 32, 32

						if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 and opening_addon_menu = 1 {
							color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
							color 0, 0, 0
							pos 0+2, windowy-70-titlebar_h-2-32-18+2 : mes "車道"
						}
						if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 and opening_addon_menu = 1 {
							color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
							color 0, 0, 0
							pos 0+2, windowy-70-titlebar_h-2-16-18+2 : mes "歩道"
						}
					} else {
						gmode 2
						pos 60, windowy-70-titlebar_h : gcopy 4, 0, 0, 32, 32
					}
					if click_range(60, windowy-70-titlebar_h, 60+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 60, windowy-70-titlebar_h-18, 60+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 60+2, windowy-70-titlebar_h-18+2 : mes "道路・歩道"
					}
	
				//線路ボタン
					if cursor_mode = "put_Railroad" {
						gmode 2
						pos 92, windowy-70-titlebar_h : gcopy 50, 0, 32, 32, 32
					} else {
						gmode 2
						pos 92, windowy-70-titlebar_h : gcopy 50, 0, 0, 32, 32
					}
					if click_range(92, windowy-70-titlebar_h, 92+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 92, windowy-70-titlebar_h-18, 92+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 92+2, windowy-70-titlebar_h-18+2 : mes "線路・駅"
					}
	
				//建物（住居地区）ボタン
					if cursor_mode = "put_Residential" {
						gmode 2
						pos 124, windowy-70-titlebar_h : gcopy 5, 0, 32, 32, 32

						if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 and opening_addon_menu = 1 {
							color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
							color 0, 0, 0
							pos 0+2, windowy-70-titlebar_h-2-32-18+2 : mes "低密度"
						}
						if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 and opening_addon_menu = 1 {
							color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
							color 0, 0, 0
							pos 0+2, windowy-70-titlebar_h-2-16-18+2 : mes "高密度"
						}
					} else {
						gmode 2
						pos 124, windowy-70-titlebar_h : gcopy 5, 0, 0, 32, 32
					}
					if click_range(124, windowy-70-titlebar_h, 124+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 124, windowy-70-titlebar_h-18, 124+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 124+2, windowy-70-titlebar_h-18+2 : mes "住居区画"
					}
	
				//建物（商業地区）ボタン
					if cursor_mode = "put_Commercial" {
						gmode 2
						pos 156, windowy-70-titlebar_h : gcopy 12, 0, 32, 32, 32

						if click_range(0, windowy-70-titlebar_h-2-32, 0+16, windowy-70-titlebar_h-2-32+16) = 1 and opening_addon_menu = 1 {
							color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-32-18, 16+40, windowy-70-titlebar_h-2-32
							color 0, 0, 0
							pos 0+2, windowy-70-titlebar_h-2-32-18+2 : mes "低密度"
						}
						if click_range(0, windowy-70-titlebar_h-2-16, 0+16, windowy-70-titlebar_h-2-16+16) = 1 and opening_addon_menu = 1 {
							color 255, 255, 255 : sboxf 200, 0, windowy-70-titlebar_h-2-16-18, 16+40, windowy-70-titlebar_h-2-16
							color 0, 0, 0
							pos 0+2, windowy-70-titlebar_h-2-16-18+2 : mes "高密度"
						}
					} else {
						gmode 2
						pos 156, windowy-70-titlebar_h : gcopy 12, 0, 0, 32, 32
					}
					if click_range(156, windowy-70-titlebar_h, 156+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 156, windowy-70-titlebar_h-18, 156+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 156+2, windowy-70-titlebar_h-18+2 : mes "商業区画"
					}
	
				//建物（オフィス）ボタン
					if cursor_mode = "put_Office" {
						gmode 2
						pos 188, windowy-70-titlebar_h : gcopy 6, 0, 32, 32, 32
					} else {
						gmode 2
						pos 188, windowy-70-titlebar_h : gcopy 6, 0, 0, 32, 32
					}
					if click_range(188, windowy-70-titlebar_h, 188+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 188, windowy-70-titlebar_h-18, 188+60, windowy-70-titlebar_h
						color 0, 0, 0
						pos 188+2, windowy-70-titlebar_h-18+2 : mes "オフィス区画"
					}
	
				//建物（工業地区）ボタン
					if cursor_mode = "put_Industrial" {
						gmode 2
						pos 220, windowy-70-titlebar_h : gcopy 19, 0, 32, 32, 32
					} else {
						gmode 2
						pos 220, windowy-70-titlebar_h : gcopy 19, 0, 0, 32, 32
					}
					if click_range(220, windowy-70-titlebar_h, 220+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 220, windowy-70-titlebar_h-18, 220+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 220+2, windowy-70-titlebar_h-18+2 : mes "工業区画"
					}
	
				//建物（農業地区）ボタン
					if cursor_mode = "put_Farm" {
						gmode 2
						pos 252, windowy-70-titlebar_h : gcopy 57, 0, 32, 32, 32
					} else {
						gmode 2
						pos 252, windowy-70-titlebar_h : gcopy 57, 0, 0, 32, 32
					}
					if click_range(252, windowy-70-titlebar_h, 252+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 252, windowy-70-titlebar_h-18, 252+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 252+2, windowy-70-titlebar_h-18+2 : mes "農業区画"
					}
	
				//建物（公共施設）ボタン
					if cursor_mode = "put_Public" {
						gmode 2
						pos 284, windowy-70-titlebar_h : gcopy 7, 0, 32, 32, 32
					} else {
						gmode 2
						pos 284, windowy-70-titlebar_h : gcopy 7, 0, 0, 32, 32
					}
					if click_range(284, windowy-70-titlebar_h, 284+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 284, windowy-70-titlebar_h-18, 284+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 284+2, windowy-70-titlebar_h-18+2 : mes "公共施設"
					}
	
				//公園ボタン
					if cursor_mode = "put_Park" {
						gmode 2
						pos 316, windowy-70-titlebar_h : gcopy 29, 0, 32, 32, 32
					} else {
						gmode 2
						pos 316, windowy-70-titlebar_h : gcopy 29, 0, 0, 32, 32
					}
					if click_range(316, windowy-70-titlebar_h, 316+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, 316, windowy-70-titlebar_h-18, 316+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos 316+2, windowy-70-titlebar_h-18+2 : mes "公園"
					}
	
				//情報ボタン
					gmode 2
					pos windowx-54-64, windowy-70-titlebar_h : gcopy 52, 0, 0, 32, 32
					
					if click_range(windowx-54-64, windowy-70-titlebar_h, windowx-54-64+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, windowx-54-64, windowy-70-titlebar_h-18, windowx-54-64+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos windowx-54-64+2, windowy-70-titlebar_h-18+2 : mes "情報"
					}
	
				//予算ボタン
					gmode 2
					pos windowx-54-64, windowy-40-titlebar_h : gcopy 49, 0, 0, 32, 32

					if click_range(windowx-54-64, windowy-40-titlebar_h, windowx-54-64+32, windowy-40-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 200, windowx-54-64, windowy-40-titlebar_h-18, windowx-54-64+50, windowy-40-titlebar_h
						color 0, 0, 0
						pos windowx-54-64+2, windowy-40-titlebar_h-18+2 : mes "予算"
					}
	
				//撤去ボタン
					if cursor_mode = "bulldozer" {
						gmode 2
						pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 32, 32, 32
					} else {
						gmode 2
						pos windowx-54, windowy-70-titlebar_h : gcopy 10, 0, 0, 32, 32
					}

					if click_range(windowx-54, windowy-70-titlebar_h, windowx-54+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, windowx-54, windowy-70-titlebar_h-18, windowx-54+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos windowx-54+2, windowy-70-titlebar_h-18+2 : mes "撤去"
					}
	
				//設定ボタン
					gmode 2
					pos windowx-54-32, windowy-40-titlebar_h : gcopy 13, 0, 0, 32, 32

					if click_range(windowx-54-32, windowy-40-titlebar_h, windowx-54-32+32, windowy-40-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 200, windowx-54-32, windowy-40-titlebar_h-18, windowx-54-32+50, windowy-40-titlebar_h
						color 0, 0, 0
						pos windowx-54-32+2, windowy-40-titlebar_h-18+2 : mes "設定"
					}
	
				//保存ボタン
					gmode 2
					pos windowx-54, windowy-40-titlebar_h : gcopy 11, 0, 0, 32, 32

					if click_range(windowx-54, windowy-40-titlebar_h, windowx-54+32, windowy-40-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 200, windowx-54, windowy-40-titlebar_h-18, windowx-54+50, windowy-40-titlebar_h
						color 0, 0, 0
						pos windowx-54+2, windowy-40-titlebar_h-18+2 : mes "保存"
					}
	
				//統計ボタン
					gmode 2
					pos windowx-54-32, windowy-70-titlebar_h : gcopy 30, 0, 0, 32, 32

					if click_range(windowx-54-32, windowy-70-titlebar_h, windowx-54-32+32, windowy-70-titlebar_h+32) = 1 and opening_addon_menu = 0 {
						color 255, 255, 255 : sboxf 128, windowx-32-54, windowy-70-titlebar_h-18, windowx-32-54+50, windowy-70-titlebar_h
						color 0, 0, 0
						pos windowx-32-54+2, windowy-70-titlebar_h-18+2 : mes "統計"
					}
	
				//統計メニュー（oepn_stat_menu = 1のとき）
					if open_stat_menu = 1 {
						sboxf 128, windowx-92-32-1, windowy-70-titlebar_h-20-1, windowx-92-32-1+(20*5)+1, windowy-70-titlebar_h
	
						gmode 2
	
						if stat_mode = "type" {
							pos windowx-92-32, windowy-70-titlebar_h-20 : gcopy 31, 0, 20, 20, 20
						} else {
							pos windowx-92-32, windowy-70-titlebar_h-20 : gcopy 31, 0, 0, 20, 20
						}
						if click_range(windowx-92-32, windowy-70-titlebar_h-20, windowx-92-32+20, windowy-70-titlebar_h-20+20) = 1 {
							color 255, 255, 255 : sboxf 128, windowx-92-32, windowy-70-titlebar_h-20-18, windowx-92-32+50, windowy-70-titlebar_h-20
							color 0, 0, 0
							pos windowx-92-32+2, windowy-70-titlebar_h-20-18+2 : mes "種類"
						}
	
						if stat_mode = "land_price" {
							pos windowx-92-32+20, windowy-70-titlebar_h-20 : gcopy 32, 0, 20, 20, 20
						} else {
							pos windowx-92-32+20, windowy-70-titlebar_h-20 : gcopy 32, 0, 0, 20, 20
						}
						if click_range(windowx-92-32+20, windowy-70-titlebar_h-20, windowx-92-32+20+20, windowy-70-titlebar_h-20+20) = 1 {
							color 255, 255, 255 : sboxf 128, windowx-92-32+20, windowy-70-titlebar_h-20-18, windowx-92-32+20+50, windowy-70-titlebar_h-20
							color 0, 0, 0
							pos windowx-92-32+20+2, windowy-70-titlebar_h-20-18+2 : mes "地価"
						}
	
						if stat_mode = "crime_rate" {
							pos windowx-92-32+40, windowy-70-titlebar_h-20 : gcopy 33, 0, 20, 20, 20
						} else {
							pos windowx-92-32+40, windowy-70-titlebar_h-20 : gcopy 33, 0, 0, 20, 20
						}
						if click_range(windowx-92-32+40, windowy-70-titlebar_h-20, windowx-92-32+40+20, windowy-70-titlebar_h-20+20) = 1 {
							color 255, 255, 255 : sboxf 128, windowx-92-32+40, windowy-70-titlebar_h-20-18, windowx-92-32+40+50, windowy-70-titlebar_h-20
							color 0, 0, 0
							pos windowx-92-32+40+2, windowy-70-titlebar_h-20-18+2 : mes "犯罪率"
						}
	
						if stat_mode = "education_rate" {
							pos windowx-92-32+60, windowy-70-titlebar_h-20 : gcopy 47, 0, 20, 20, 20
						} else {
							pos windowx-92-32+60, windowy-70-titlebar_h-20 : gcopy 47, 0, 0, 20, 20
						}
						if click_range(windowx-92-32+60, windowy-70-titlebar_h-20, windowx-92-32+60+20, windowy-70-titlebar_h-20+20) = 1 {
							color 255, 255, 255 : sboxf 128, windowx-92-32+60, windowy-70-titlebar_h-20-18, windowx-92-32+60+50, windowy-70-titlebar_h-20
							color 0, 0, 0
							pos windowx-92-32+60+2, windowy-70-titlebar_h-20-18+2 : mes "教育度"
						}
	
						if stat_mode = "happiness" {
							pos windowx-92-32+80, windowy-70-titlebar_h-20 : gcopy 51, 0, 20, 20, 20
						} else {
							pos windowx-92-32+80, windowy-70-titlebar_h-20 : gcopy 51, 0, 0, 20, 20
						}
						if click_range(windowx-92-32+80, windowy-70-titlebar_h-20, windowx-92-32+80+20, windowy-70-titlebar_h-20+20) = 1 {
							color 255, 255, 255 : sboxf 128, windowx-92-32+80, windowy-70-titlebar_h-20-18, windowx-92-32+80+50, windowy-70-titlebar_h-20
							color 0, 0, 0
							pos windowx-92-32+80+2, windowy-70-titlebar_h-20-18+2 : mes "幸福度"
						}
					}	

				//速さ
					gmode 2
					pos 20, windowy-45-titlebar_h+10

					if speed = 1 {	; 遅い
						gcopy 73, 0, 0, 32, 32
					}
					if speed = 2 {	; 普通
						gcopy 68, 0, 0, 32, 32
					}
					if speed = 3 {	; 早い
						gcopy 69, 0, 0, 32, 32
					}
					if speed = 4 {	; とても早い
						gcopy 74, 0, 0, 32, 32
					}

					pos 52, windowy-45-titlebar_h+10
					if pause = 1 {	; 一時停止中
						gcopy 70, 0, 32, 32, 32
					} else {		; 一時停止していないとき
						gcopy 70, 0, 0, 32, 32
					}

					font SystemFont, 10

					if click_range(20, windowy-45-titlebar_h+10, 20+32, windowy-45-titlebar_h+10+32) = 1 {
						color 255, 255, 255 : sboxf 200, 20, windowy-45-titlebar_h+10-18, 20+50, windowy-45-titlebar_h+10
						color 0, 0, 0
						pos 20+2, windowy-45-titlebar_h+10-18+2 : mes "時間の早さ"
					}
					if click_range(52, windowy-45-titlebar_h+10, 52+32, windowy-45-titlebar_h+10+32) = 1 {
						color 255, 255, 255 : sboxf 200, 52, windowy-45-titlebar_h+10-18, 52+50, windowy-45-titlebar_h+10
						color 0, 0, 0
						pos 52+2, windowy-45-titlebar_h+10-18+2 : mes "一時停止"
					}
	
				//人口、日付・気温を表示
					color 255, 255, 255 : font SystemFont, 11
					pos 90, windowy-45-titlebar_h+10 : mes ""+time_Year+"年"+time_Month+"月"+time_Date+"日 "+strf("%02d",time_Hour)+":"+strf("%02d",time_Minutes)+"   人口 "+Total_Population+"人   § "+Money+"   気温 "+temperature+"℃"
	
				//[一時的に廃止]ニュースの表示（0時0分、6時0分、12時0分、18時0分 あるいは マップ読み込み直後に新しいニュースを取得）	
					if (time_Hour = 0 and time_Minutes = 0) or (time_Hour = 6 and time_Minutes = 0) or (time_Hour = 12 and time_Minutes = 0) or (time_Hour = 18 and time_Minutes = 0) or first_loop = 1 {
						gosub *get_news
					}
	
					color 255, 255, 255 : font "Yu Gothic UI", 10
					pos 90, windowy-30-titlebar_h+10 : mes "News : "+news_content+""
				
				//RCOI需要メータ
					if demand_Residential < 0 {
						demand_Residential = 1
					}
					if demand_Commercial < 0 {
						demand_Commercial = 1
					}
					if demand_Office < 0 {
						demand_Office = 1
					}
					if demand_Industrial < 0 {
						demand_Industrial = 1
					}
					if demand_Farm < 0 {
						demand_Farm = 1
					}
					
					font SystemFont, 10
					
					//R - 住居区画
						color 34, 177, 76 : boxf windowx-180, windowy-titlebar_h-20-(demand_Residential/3), windowx-180+10, windowy-titlebar_h-20
						cmes "R", windowx-180, windowy-titlebar_h-20, windowx-180+10, windowy-titlebar_h-10, 1
					//C - 商業区画
						color 63, 72, 204 : boxf windowx-170, windowy-titlebar_h-20-(demand_Commercial/3), windowx-170+10, windowy-titlebar_h-20
						cmes "C", windowx-170, windowy-titlebar_h-20, windowx-170+10, windowy-titlebar_h-10, 1
					//O - オフィス区画
						color 0, 162, 232 : boxf windowx-160, windowy-titlebar_h-20-(demand_Office/3), windowx-160+10, windowy-titlebar_h-20
						cmes "O", windowx-160, windowy-titlebar_h-20, windowx-160+10, windowy-titlebar_h-10, 1
					//I - 工業区画
						color 255, 242, 0 : boxf windowx-150, windowy-titlebar_h-20-(demand_Industrial/3), windowx-150+10, windowy-titlebar_h-20
						cmes "I", windowx-150, windowy-titlebar_h-20, windowx-150+10, windowy-titlebar_h-10, 1
					//F - 農業区画
						color 185, 122, 87 : boxf windowx-140, windowy-titlebar_h-20-(demand_Farm/3), windowx-140+10, windowy-titlebar_h-20
						cmes "F", windowx-140, windowy-titlebar_h-20, windowx-140+10, windowy-titlebar_h-10, 1
					
			redraw 1
			await Drow_Interval
			c+=16
	loop
	
*main_onclick
	//メニューバーの上辺（windowy-70-titlebar_h）より上がクリックされた場合はreturn
		if opening_addon_menu = 1 {
			menu_line_y = windowy-70-titlebar_h-32-20
		} else {
			menu_line_y = windowy-70-titlebar_h-20
		}
	
		if mousey <= menu_line_y and (mousex >= 0 and mousey >= 0 and mousex <= windowx and mousey <= windowy) {
			if cursor_mode = "normal" {
				if showing_detail = 1 and click_range(macro1_sd+32+15+diax+25-20, macro2_sd-100-(diay1+5+diay2+5), macro1_sd+32+15+diax+25-20+20, macro2_sd-100-(diay1+5+diay2+5)+20) = 1 {
					if showing_new_name_input = 0 {
						if original_name(clicked_mx, clicked_my) != "" {
							new_name = original_name(clicked_mx, clicked_my)
						} else {
							new_name = addon_jp_name(map(clicked_mx,clicked_my))
						}

						showing_new_name_input = 1
						
						objsize 200, 16
						pos windowx-255, 7 : input new_name : new_name_stat = stat

						objsize 40, 16
						pos windowx-255+200, 7 : button gosub "OK", *fix_new_name

						await 10
						return
					}
				}

				if click_range(macro1_sd+32, macro2_sd-100-(diay1+5+diay2+5), macro1_sd+32+15+diax+25, macro2_sd-100) = 1 {
					return
				} else : if cnt \ 5 = 0 {
					await 10

					if showing_new_name_input = 0 {
						clicked_mx = mx : clicked_my = my
						clicked += 1
					}
					
					gosub *show_detail
				}
				
			} else {
				if new_name_stat != 0 {
					clrobj new_name_stat
					showing_new_name_input = 0
				}
				
				gosub *build_obj
			}
			
			return
		}
	
	/*------------------------------------------メニューのボタンの動作------------------------------------------------*/
		//標準カーソルボタン
			if click_range( 20, windowy-70-titlebar_h, 20+32, windowy-70-titlebar_h+32 ) = 1 {
				cursor_mode = "normal"
		
				opening_addon_menu = 0
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
	
				pointer_icon = -1
			}
				
		//道路ボタン
			if click_range( 60, windowy-70-titlebar_h, 60+32, windowy-70-titlebar_h+32 ) = 1 {
					
				if opening_menu_put_Road = 0 {
					cursor_mode = "put_Road"
					density = ""
					road_type = "roadway"
		
					opening_addon_menu = 1
					opening_menu_put_Road = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_Two_lane_road
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_Two_lane_road
							noteget addon_num_normal_road, clicked_addon_number
							addon_num_normal_road = int(addon_num_normal_road)
				}
	
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
	
		//線路ボタン
			if click_range( 92, windowy-70-titlebar_h, 92+32, windowy-70-titlebar_h+32 ) = 1 {
					
				if opening_menu_put_Road = 0 {
					cursor_mode = "put_Railroad"
					density = ""
		
					opening_addon_menu = 1
					opening_menu_put_Railroad = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
		
						//選択されたアドオンのアドオン名を取得
							notesel type_Two_lane_railroad
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_Two_lane_railroad
							noteget addon_num_normal_railroad, clicked_addon_number
							addon_num_normal_railroad = int(addon_num_normal_railroad)
				}
	
				opening_menu_put_Road = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
		
		//建物（住居地区）ボタン
			if click_range( 124, windowy-70-titlebar_h, 124+32, windowy-70-titlebar_h+32 ) = 1 {
					
				if opening_menu_put_Reaidential = 0 {
					cursor_mode = "put_Residential"
					density = "low"
					
					opening_addon_menu = 1
					opening_menu_put_Residential = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
					
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
		
		//建物（商業地区）ボタン
			if click_range( 156, windowy-70-titlebar_h, 156+32, windowy-70-titlebar_h+32 ) = 1 {
		
				if opening_menu_put_Commercial = 0 {
					cursor_mode = "put_Commercial"
					density = "low"
					
					opening_addon_menu = 1
					opening_menu_put_Commercial = 1
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_commercial
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_commercial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
		
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
		
		//建物（オフィス）ボタン
			if click_range( 188, windowy-70-titlebar_h, 188+32, windowy-70-titlebar_h+32 ) = 1 {
		
				if opening_menu_put_Office = 0 {
					cursor_mode = "put_Office"
	
					opening_addon_menu = 1
					opening_menu_put_Office = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_Office
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_Office
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
		
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
		
		//建物（工業地区）ボタン
			if click_range( 220, windowy-70-titlebar_h, 220+32, windowy-70-titlebar_h+32 ) = 1 {
		
				if opening_menu_put_Office = 0 {
					cursor_mode = "put_Industrial"
	
					opening_addon_menu = 1
					opening_menu_put_Industrial = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_industrial
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_industrial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
		
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Office = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
	
		//建物（農業地区）ボタン
			if click_range( 252, windowy-70-titlebar_h, 252+32, windowy-70-titlebar_h+32 ) = 1 {
		
				if opening_menu_put_Office = 0 {
					cursor_mode = "put_Farm"
	
					opening_addon_menu = 1
					opening_menu_put_Farm = 1
	
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_farm
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_farm
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
		
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Public = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
				
		//建物（公共施設）ボタン
			if click_range( 284, windowy-70-titlebar_h, 284+32, windowy-70-titlebar_h+32 ) = 1 {
		
				if opening_menu_put_Public = 0 {
					cursor_mode = "put_Public"
		
					opening_addon_menu = 1
					opening_menu_put_Public = 1
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_public
							noteget put_addon_name, clicked_addon_number
			
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_public
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
		
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Park = 0
	
				open_stat_menu = 0
			}
		
		//建物（公園）ボタン
			if click_range( 316, windowy-70-titlebar_h, 316+32, windowy-70-titlebar_h+32 ) = 1 {
		
				if opening_menu_put_Park = 0 {
					cursor_mode = "put_Park"
		
					opening_addon_menu = 1
					opening_menu_put_Park = 1
		
					//とりあえず一番左にあるアドオンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_park
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_park
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
				}
		
				opening_menu_put_Road = 0
				opening_menu_put_Railroad = 0
				opening_menu_put_Residential = 0
				opening_menu_put_Commercial = 0
				opening_menu_put_Office = 0
				opening_menu_put_Industrial = 0
				opening_menu_put_Farm = 0
				opening_menu_put_Public = 0
	
				open_stat_menu = 0
			}
	
		if (ginfo(0)-ginfo(4)) >= 0 and (ginfo(0)-ginfo(4)) <= (ginfo(4)+windowx) and (ginfo(1)-ginfo(5)) >= titlebar_h and (ginfo(1)-ginfo(5)) <= (ginfo(5)+windowy) {
	
			//情報パネルボタン
				if click_range( windowx-54-64, windowy-70-titlebar_h, windowx-54-32, windowy-70-titlebar_h+32 ) = 1 {
					gosub *information_panel
					return
				}
	
			//予算パネルボタン
				if click_range( windowx-54-64, windowy-40-titlebar_h, windowx-54-32, windowy-40-titlebar_h+32 ) = 1 {
					gosub *budget_panel
					return
				}
				
			//統計ボタン
				if click_range( windowx-54-32, windowy-70-titlebar_h, windowx-54, windowy-70-titlebar_h+32 ) = 1 {
					if open_stat_menu = 0 {
						open_stat_menu = 1
						stat_mode = ""
			
					} else {
						open_stat_menu = 0
						stat_mode = ""
					}
				}
			
			//撤去ボタン
				if click_range( windowx-54, windowy-70-titlebar_h, windowx-54+32, windowy-70-titlebar_h+32 ) = 1 {
					cursor_mode = "bulldozer"
			
					opening_addon_menu = 0
					opening_menu_put_Road = 0
					opening_menu_put_Railroad = 0
					opening_menu_put_Residential = 0
					opening_menu_put_Commercial = 0
					opening_menu_put_Office = 0
					opening_menu_put_Public = 0
				}
			
			//設定ボタン
				if click_range( windowx-54-32, windowy-40-titlebar_h, windowx-54, windowy-40-titlebar_h+32 ) = 1 {
					cursor_mode = "normal"
					opening_addon_menu = 0
					gosub *setting
				}
			
			//保存ボタン
				if click_range( windowx-54, windowy-40-titlebar_h, windowx-54+32, windowy-40-titlebar_h+32 ) = 1 {
					cursor_mode = "normal"
					opening_addon_menu = 0
					gosub *save
				}
			
			//統計メニュー
				if open_stat_menu = 1 and click_range( windowx-92-32, windowy-70-titlebar_h-20, windowx-92-32+19, windowy-70-titlebar_h ) = 1 {
					if stat_mode != "type" {
						stat_mode = "type"
					} else {
						stat_mode = ""
					}

					return
				}
				if open_stat_menu = 1 and click_range( windowx-92-32+20, windowy-70-titlebar_h-20, windowx-92-32+39, windowy-70-titlebar_h ) = 1 {
					if stat_mode != "land_price" {
						stat_mode = "land_price"
					} else {
						stat_mode = ""
					}

					return
				}
				if open_stat_menu = 1 and click_range( windowx-92-32+40, windowy-70-titlebar_h-20, windowx-92-32+59, windowy-70-titlebar_h ) = 1 {
					if stat_mode != "crime_rate" {
						stat_mode = "crime_rate"
					} else {
						stat_mode = ""
					}

					return
				}
				if open_stat_menu = 1 and click_range( windowx-92-32+60, windowy-70-titlebar_h-20, windowx-92-32+79, windowy-70-titlebar_h ) = 1 {
					if stat_mode != "education_rate" {
						stat_mode = "education_rate"
					} else {
						stat_mode = ""
					}

					return
				}
				if open_stat_menu = 1 and click_range( windowx-92-32+80, windowy-70-titlebar_h-20, windowx-92-32+100, windowy-70-titlebar_h ) = 1 {
					if stat_mode != "happiness" {
						stat_mode = "happiness"
					} else {
						stat_mode = ""
					}

					return
				}
	
		}

		//速さ
			if cnt \ 5 = 0 {
				if click_range(20, windowy-45-titlebar_h+10, 20+32, windowy-45-titlebar+10+32) = 1 {
					speed++
	
					if speed > 4 {
						speed = 1
					}
	
					return
				}
				if click_range(52, windowy-45-titlebar_h+10, 52+32, windowy-45-titlebar+10+32) = 1 {
					if pause = 0 {
						pause = 1
					} else {
						pause = 0
					}
	
					return
				}
			}
		
		//アドオン選択ボタン（水色のメニューバー）
			
			/*-------------------------------------------道路---------------------------------------------------*/
				notesel type_Two_lane_road
				if opening_menu_put_Road = 1 and click_range( 0, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Road"

					clicked_addon_number = 0

					//車道
						if (cursor_mode = "put_Road" and click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1) or road_type = "roadway" {
							road_type = "roadway"

							clicked_addon_number = mousex/35 - 1
							
							//選択されたアドオンのアドオン名を取得
								notesel type_Two_lane_road
								noteget put_addon_name, clicked_addon_number
						
							//選択されたアドオンのアドオン番号を取得
								notesel type_number_Two_lane_road
								noteget addon_num_normal_road, clicked_addon_number
								addon_num_normal_road = int(addon_num_normal_road)
						}

					//歩道 / 自転車道
						if (cursor_mode = "put_Road" and click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1) or road_type = "promenade" {
							road_type = "promenade"

							clicked_addon_number = mousex/35 - 1
							
							//選択されたアドオンのアドオン名を取得
								notesel type_Promenade
								noteget put_addon_name, clicked_addon_number
						
							//選択されたアドオンのアドオン番号を取得
								notesel type_number_Promenade
								noteget addon_num_Promenade, clicked_addon_number
								addon_num_Promenade = int(addon_num_Promenade)
						}
	
					gosub *build_obj
				}
	
			/*-------------------------------------------線路----------------------------------------------------*/
				notesel type_Two_lane_railroad
				if opening_menu_put_Railroad = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Railroad"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_Two_lane_railroad
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_Two_lane_railroad
						noteget addon_num_normal_railroad, clicked_addon_number
						addon_num_normal_railroad = int(addon_num_normal_railroad)
						
					gosub *build_obj
				}
	
			/*-----------------------------------------住居地区-------------------------------------------------*/
	
			//住居地区の低密度・高密度選択ボタン
				//低密度
					if cursor_mode = "put_Residential" and click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1 {
						density = "low"
		
					//とりあえず地区設定アイコンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_residential
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
								
						gosub *open_menu_addon_menu
					}
				//高密度
					if cursor_mode = "put_Residential" and click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1 {
						density = "high"
		
						//とりあえず地区設定アイコンを選択させておく
							clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_high_density_residential
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_high_density_residential
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
							
						gosub *open_menu_addon_menu
					}
			
			//低密度住居地区
				notesel type_low_density_residential
				if opening_menu_put_Residential = 1 and density = "low" and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Residential"
					
					clicked_addon_number = mousex/35 - 1
					
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_residential
						noteget put_addon_name, clicked_addon_number - 1
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_residential
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
				
			//高密度住居地区
				notesel type_high_density_residential
				if opening_menu_put_Residential = 1 and density = "high" and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Residential"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_residential
						noteget put_addon_name, clicked_addon_number - 1
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_residential
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
	
			/*--------------------------------------------商業地区---------------------------------------------*/
	
			//商業地区の低密度・高密度選択ボタン
				//低密度
					if cursor_mode = "put_Commercial" and click_range( 0, windowy-70-titlebar_h-32, 16, windowy-70-titlebar_h-16 ) = 1 {
						density = "low"
		
					//とりあえず地区設定アイコンを選択させておく
						clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_low_density_commercial
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_low_density_commercial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
								
						gosub *open_menu_addon_menu
					}
				//高密度
					if cursor_mode = "put_Commercial" and click_range( 0, windowy-70-titlebar_h-16, 16, windowy-70-titlebar_h ) = 1 {
						density = "high"
		
						//とりあえず地区設定アイコンを選択させておく
							clicked_addon_number = 0
			
						//選択されたアドオンのアドオン名を取得
							notesel type_high_density_commercial
							noteget put_addon_name, clicked_addon_number
				
						//選択されたアドオンのアドオン番号を取得
							notesel type_number_high_density_commercial
							noteget addon_num_buf, clicked_addon_number
							addon_num_buf = int(addon_num_buf)
							
						gosub *open_menu_addon_menu
					}
			
			//低密度商業地区
				notesel type_low_density_commercial
				if opening_menu_put_commercial = 1 and density = "low" and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Commercial"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_low_density_commercial
						noteget put_addon_name, clicked_addon_number - 1
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_low_density_commercial
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
	
			//高密度商業地区
				notesel type_high_density_commercial
				if opening_menu_put_commercial = 1 and density = "high" and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Commercial"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_high_density_commercial
						noteget put_addon_name, clicked_addon_number - 1
		
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_high_density_commercial
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
						
					gosub *build_obj
				}
	
			/*--------------------------------------------オフィス-----------------------------------------------*/
			
			//オフィス
				notesel type_office
				if opening_menu_put_office = 1 and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Office"
		
					clicked_addon_number = mousex/35 - 1
						
					//選択されたアドオンのアドオン名を取得
						notesel type_office
						noteget put_addon_name, clicked_addon_number - 1
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_office
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
	
			/*--------------------------------------------工業地区-----------------------------------------------*/
			
			//工業地区
				notesel type_industrial
				if opening_menu_put_industrial = 1 and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Industrial"
		
					clicked_addon_number = mousex/35 - 1
						
					//選択されたアドオンのアドオン名を取得
						notesel type_industrial
						noteget put_addon_name, clicked_addon_number - 1
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_industrial
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
	
			/*--------------------------------------------農業地区-----------------------------------------------*/
			
			//農業地区
				notesel type_farm
				if opening_menu_put_farm = 1 and click_range( 10+35, windowy-70-titlebar_h-32, (notemax+1)*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Farm"
		
					clicked_addon_number = mousex/35 - 1
						
					//選択されたアドオンのアドオン名を取得
						notesel type_farm
						noteget put_addon_name, clicked_addon_number - 1
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_farm
						noteget addon_num_buf, clicked_addon_number - 1
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
				
			/*---------------------------------------------公共施設-----------------------------------------------*/
			
			//公共施設
				notesel type_public
				if opening_menu_put_public = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Public"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_public
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_public
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
	
			/*-----------------------------------------------公園-------------------------------------------------*/
			
			//公園
				notesel type_public
				if opening_menu_put_Park = 1 and click_range( 10+35, windowy-70-titlebar_h-32, notemax*35+10+35, windowy-70-titlebar_h ) = 1 {
					cursor_mode = "put_Park"
		
					clicked_addon_number = mousex/35 - 1
		
					//選択されたアドオンのアドオン名を取得
						notesel type_park
						noteget put_addon_name, clicked_addon_number
						
					//選択されたアドオンのアドオン番号を取得
						notesel type_number_park
						noteget addon_num_buf, clicked_addon_number
						addon_num_buf = int(addon_num_buf)
	
					gosub *build_obj
				}
	
			/*----------------------------------------------------------------------------------------------------*/
	
	return
	
*build_obj
	dim cannot_build, 4
	dim direction_check, 4
	
*build_obj_2
	/*-----------------道路・線路・建物の建設・敷設（左クリック）、撤去（右クリック or 撤去モード）---------------------*/
		//標準カーソルモードあるいはクリックされたマウスy座標がmenu_line_y以上の場合はreturn
			if from_Build_on_Reservation_area = 0 and (cursor_mode = "normal" or mousey >= menu_line_y or mx < 0 or my < 0) {
				pointer_icon = -1
				return
			}
	
		//撤去モードの場合は選択されたマスを更地にする
			if from_Build_on_Reservation_area = 0 and cursor_mode = "bulldozer" {
				gosub *delete_obj
				return
			}
	
		//カーソルがマップ外にある場合はreturn
			if from_Build_on_Reservation_area = 0 and (mx < 0 or my < 0 or mx > mapsize-1 or my > mapsize-1) {
				return
			}
			
		//アドオンに建設可能回数が設定されていて、建物が建設可能回数を超えている場合はreturn
			if addon_build_limit(addon_num_buf) >= 1 and cursor_mode != "put_Road" and instr(put_addon_name, 0, "Area : ") = -1 {
				s = 0
				
				repeat mapsize
					sx = cnt
					repeat mapsize
						sy = cnt
	
						if map(sx, sy) = addon_num_buf {
							s ++
						}
					loop
				loop
	
				wait 10		; ←waitを入れないと誤作動を起こすため
				
				if s + 1 > addon_build_limit(addon_num_buf) {
					dialog "この建物は既に建設可能回数を超えています！"
					return
				}
			}
	
		//周囲のオブジェクトのカテゴリを取得
			if instr(put_addon_name, 0, "Area : ") = -1 {
				left_chip = ""
				top_chip = ""
				bottom_chip = ""
				right_chip = ""
				
				if mx-1 >= 0 and my-1 >= 0 and mx+1 < mapsize and my+1 < mapsize {
					left_chip = category(mx-1, my)
					top_chip = category(mx, my-1)
					bottom_chip = category(mx+1, my)
					right_chip = category(mx, my+1)
		
				} else {
					if mx-1 < 0 {
						left_chip = ""
					}
					if my-1 < 0 {
						top_chip = ""
					}
					if mx+1 > mapsize {
						bottom_chip = ""
					}
					if my+1 > mapsize {
						right_chip = ""
					}
				}
		
				left_chip_2 = ""
				top_chip_2 = ""
				bottom_chip_2 = ""
				right_chip_2 = ""
				
				if mx-1 >= 0 and my-1 >= 0 and mx+1 < mapsize and my+1 < mapsize {
					left_chip_2 = category_2(mx-1, my)
					top_chip_2 = category_2(mx, my-1)
					bottom_chip_2 = category_2(mx, my+1)
					right_chip_2 = category_2(mx+1, my)
		
				} else {
					if mx-1 < 0 {
						left_chip_2 = ""
					}
					if my-1 < 0 {
						top_chip_2 = ""
					}
					if mx+1 > mapsize {
						bottom_chip_2 = ""
					}
					if my+1 > mapsize {
						right_chip_2 = ""
					}
				}
			}
	
			if mx = -1 or my = -1 {
				return
			}
			
		//建設・敷設
			if mouse_left = 1 {
				
				//道路敷設
					if cursor_mode = "put_Road" and map(mx, my) != addon_num_normal_road and map(mx, my) != addon_num_Promenade {
	
						//資金を減らす（§5/1マス）
							Money -= 5
	
						//敷設した地点の情報を書き換え
							gosub *delete_obj
							
							cetegory_buf = category(mx,my)

							if road_type = "roadway" {
								map(mx, my) = addon_num_normal_road
							} else : if road_type = "promenade" {
								map(mx, my) = addon_num_Promenade
							}
							
							name(mx, my) = put_addon_name
							category(mx, my) = "road"
							
							obj_serial_num(mx, my) = 0
							obj_use_tiles_x(mx,my) = 0
							obj_use_tiles_y(mx,my) = 0
							obj_tiles_x(mx, my) = 0
							obj_tiles_y(mx, my) = 0

							reservation(mx, my) = "none"

							original_name(mx, my) = ""

							if road_type = "roadway" {
								category_3(mx, my) = "roadway"
							} else : if road_type = "promenade" {
								category_3(mx, my) = "promenade"
							}
							
							if category_buf = "railroad" {
								//線路と交差している場合は予め踏切を設置しておく
									if category(mx-1, my) = "road" or category(mx+1, my) = "road" {
										obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
										obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
									}
									if category(mx, my-1) = "road" or category(mx, my+1) = "road" {
										obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
										obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
									}
									
									category_2(mx, my) = "train_crossing"
								
							} else {
								//建設中のタイプを指定する
									obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "under_construction")
									obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "under_construction", addon_direction, addon_total_addon_direction, "null")
			
									category_2(mx, my) = "under_construction"
							}
	
						return
					}
	
				//線路敷設
					if cursor_mode = "put_Railroad" and map(mx, my) != addon_num_normal_railroad {
	
						//資金を減らす（§5/1マス）
							Money -= 5
							
						//敷設した地点の情報を書き換え
							gosub *delete_obj
							
							cetegory_buf = category(mx,my)
							
							map(mx, my) = addon_num_normal_railroad
							name(mx, my) = put_addon_name
	
							if instr(addon_type(addon_num_normal_railroad), 0, "railroad") != -1 or instr(addon_type(addon_num_normal_railroad), 0, "Railroad") != -1 {
								category(mx, my) = "railroad"
							}
							if instr(addon_type(addon_num_normal_railroad), 0, "station") != -1 or instr(addon_type(addon_num_normal_railroad), 0, "Station") != -1 {
								category(mx, my) = "station"
	
								//地価の変動（駅の場合のみ）
								addon_land_price_influence__tmp = addon_land_price_influence(addon_num_normal_railroad)
								addon_land_price_influence_grid__tmp = addon_land_price_influence_grid(addon_num_normal_railroad)
								
								add_value = addon_land_price_influence__tmp / addon_land_price_influence_grid__tmp
								round = 0
								
								for round, 1, addon_land_price_influence_grid__tmp+1, 1
									
									repeat (round*2-1)
										if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize and my+round-1>0 and my+round-1<mapsize {
											if done_build(2, mx+cnt-(round-1), my+round-1) = 0 {
												land_price(mx+cnt-(round-1),my+round-1) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx+cnt-(round-1), my+round-1) = 1
											}
										}
									loop
									
									repeat (round*2-1)
										if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize and my-round+1>0 and my-round+1<mapsize {
											if done_build(2, mx+cnt-(round-1), my-round+1) = 0 {
												land_price(mx+cnt-(round-1),my-round+1) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx+cnt-(round-1), my-round+1) = 1
											}
										}
									loop
	
									repeat (round*2-1)
										if mx+round-1>0 and mx+round-1<mapsize and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize {
											if done_build(2, mx+round-1, my+cnt-(round-1)) = 0 {
												land_price(mx+round-1,my+cnt-(round-1)) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx+round-1, my+cnt-(round-1)) = 1
											}
										}
									loop
	
									repeat (round*2-1)
										if mx-round+1>0 and mx-round+1<mapsize and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize {
											if done_build(2, mx-round+1, my+cnt-(round-1)) = 0 {
												land_price(mx-round+1,my+cnt-(round-1)) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx-round+1, my+cnt-(round-1)) = 1
											}
										}
									loop
								next
	
							//犯罪率の変動（駅の場合のみ）
								addon_crime_rate_influence__tmp = addon_crime_rate_influence(addon_num_normal_railroad)
								
								if addon_crime_rate_influence__tmp != 0 {
	
									addon_crime_rate_influence_grid__tmp = addon_crime_rate_influence_grid(addon_num_normal_railroad)
									
									add_value = addon_crime_rate_influence__tmp / addon_crime_rate_influence_grid__tmp
									round = 0
									
									for round, 1, addon_crime_rate_influence_grid__tmp+1, 1
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my+round-1) >= 0 and (my+round-1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my+round-1) = 0 {
													crime_rate(mx+cnt-(round-1),my+round-1) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+cnt-(round-1),my+round-1) > 100 {
														crime_rate(mx+cnt-(round-1),my+round-1) = 100
													}
													if crime_rate(mx+cnt-(round-1),my+round-1) < -100 {
														crime_rate(mx+cnt-(round-1),my+round-1) = -100
													}
													done_build(5, mx+cnt-(round-1), my+round-1) = 1
												}
											}
										loop
										
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my-round+1) >= 0 and (my-round+1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my-round+1) = 0 {
													crime_rate(mx+cnt-(round-1),my-round+1) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+cnt-(round-1),my-round+1) > 100 {
														crime_rate(mx+cnt-(round-1),my-round+1) = 100
													}
													if crime_rate(mx+cnt-(round-1),my-round+1) < -100 {
														crime_rate(mx+cnt-(round-1),my-round+1) = -100
													}
													done_build(5, mx+cnt-(round-1), my-round+1) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx+round-1) >= 0 and (mx+round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx+round-1, my+cnt-(round-1)) = 0 {
													crime_rate(mx+round-1,my+cnt-(round-1)) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+round-1,my+cnt-(round-1)) > 100 {
														crime_rate(mx+round-1,my+cnt-(round-1)) = 100
													}
													if crime_rate(mx+round-1,my+cnt-(round-1)) < -100 {
														crime_rate(mx+round-1,my+cnt-(round-1)) = -100
													}
													done_build(5, mx+round-1, my+cnt-(round-1)) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx-round-1) >= 0 and (mx-round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx-round+1, my+cnt-(round-1)) = 0 {
													crime_rate(mx-round+1,my+cnt-(round-1)) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx-round+1,my+cnt-(round-1)) > 100 {
														crime_rate(mx-round+1,my+cnt-(round-1)) = 100
													}
													if crime_rate(mx-round+1,my+cnt-(round-1)) < -100 {
														crime_rate(mx-round+1,my+cnt-(round-1)) = -100
													}
													done_build(5, mx-round+1, my+cnt-(round-1)) = 1
												}
											}
										loop
									next
	
								}
							}
							
							obj_serial_num(mx, my) = 0
							obj_use_tiles_x(mx,my) = 0
							obj_use_tiles_y(mx,my) = 0
							obj_tiles_x(mx, my) = 0
							obj_tiles_y(mx, my) = 0

							reservation(mx, my) = "none"

							original_name(mx, my) = ""
							
							if cetegory_buf = "road" and category(mx, my) != "station" {
								//線路と交差している場合は予め踏切を設置しておく
									if category(mx-1, my) = "railroad" or category(mx+1, my) = "railroad" {
										obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
										obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
									}
									if category(mx, my-1) = "railroad" or category(mx, my+1) = "railroad" {
										obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
										obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
									}
									
									category_2(mx, my) = "train_crossing"
	
							} else {
								//建設中のタイプを指定する
									obj_type(mx, my) = element2( put_addon_name, use_type, addon_total_use_types, "under_construction")
									obj_dire(mx, my) = element3( put_addon_name, use_type, addon_total_use_types, "under_construction", addon_direction, addon_total_addon_direction, "null")
									
									category_2(mx, my) = "under_construction"
							}
	
						return
					}
					
				//道路・線路敷設以外の場合、選択されたマスの周囲（上下左右）に道路があるかどうか（道路に接続できるか）
					if cursor_mode != "put_Road" and cursor_mode != "put_Railroad" {
	
						//そもそも建設地に道路がある場合
							if (category(mx,my) = "road" or category(mx,my) = "railroad") and (cursor_mode != "put_Road" and cursor_mode != "put_Railroad") and (ginfo_mx>=ginfo_wx1 & ginfo_mx<=ginfo_wx2) and (ginfo_my>=ginfo_wy1+titlebar_h & ginfo_my<=ginfo_wy2) {
								;dialog "この区画は既に占有されています"
								return
							}
	
						around_road_exist = -1

						if instr(put_addon_name, 0, "Area : ") = -1 {
							if mx > 0 {
								if category(mx-1, my) = "road" and cannot_build(0) = 0 {
									around_road_exist += 1
		
									direction = "left"
									direction_check(0) = 1
		
									now_direction_num = 0
								}
							}
							if my > 0 {
								if category(mx, my-1) = "road" and cannot_build(1) = 0 {
									around_road_exist += 1
		
									direction = "top"
									direction_check(1) = 1
		
									now_direction_num = 1
								}
							}
							if my < mapsize {
								if category(mx, my+1) = "road" and cannot_build(2) = 0 {
									around_road_exist += 1
		
									direction = "bottom"
									direction_check(2) = 1
		
									now_direction_num = 2
								}
							}
							if mx < mapsize {
								if category(mx+1, my) = "road" and cannot_build(3) = 0 {
									around_road_exist += 1
		
									direction = "right"
									direction_check(3) = 1
		
									now_direction_num = 3
								}
							}
						}
	
						//道路に接続されていない場所に建設しようとしている場合
							if around_road_exist = -1 and (ginfo_mx>=ginfo_wx1 & ginfo_mx<=ginfo_wx2) and (ginfo_my>=ginfo_wy1+titlebar_h&ginfo_my<=ginfo_wy2) and instr(put_addon_name, 0, "Area : ") = -1 and from_Build_on_Reservation_area = 0 {
								if category(mx, my+1) = "road" and cannot_build(2) = 0 or cursor_mode = "put_Park" or cursor_mode = "put_Farm" {		; 公園、農業地区は道路に接続していない場合は下向きとする
									around_road_exist += 1
		
									direction = "bottom"
									direction_check(2) = 1
		
									now_direction_num = 2
	
								} else {
									dialog "道路に接続されていない場所には建設できません！"
									return
								}
							}
	
						//地区設定の場合
							if instr(put_addon_name, 0, "Area : ") != -1 {
								gosub *set_area
								return
							}
							
						if around_road_exist >= 0 {
							//建物（住居地区）建設
								if cursor_mode = "put_Residential" {
									category_buf = "residential"
								}
	
							//建物（商業地区）建設
								if cursor_mode = "put_Commercial" {
									category_buf = "commercial"
								}
				
							//建物（高密度オフィス）建設
								if cursor_mode = "put_Office" {
									category_buf = "office"
								}
	
							//建物（工業地区）建設
								if cursor_mode = "put_Industrial" {
									category_buf = "industrial"
								}
	
							//建物（農業地区）建設
								if cursor_mode = "put_Farm" {
									category_buf = "farm"
								}
				
							//建物（公共施設）建設
								if cursor_mode = "put_Public" {
									category_buf = "public"
								}
	
							//建物（公園）建設
								if cursor_mode = "put_Park" {
									category_buf = "park"
								}
	
							//向きに応じてobj_type_bufとobj_dire_bufを代入
								if direction = "left" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "left")
								}
								if direction = "top" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "top")
								}
								if direction = "bottom" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "bottom")
								}
								if direction = "right" {
									obj_type_buf = element2( put_addon_name, use_type, addon_total_use_types, "null")
									obj_dire_buf = element3( put_addon_name, use_type, addon_total_use_types, "null", addon_direction, addon_total_addon_direction, "right")
								}
	
								if obj_type_buf < 0 or obj_dire_buf < 0 {
									return
								}
								
							//2マス以上の建築物の場合、建設する方向にほかの建築物がないか確認
								if addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf) >= 2 or addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf) >= 2 {
									found_other_obj = 0
									
									repeat addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf)
										rx = mx + cnt
	
										if direction = "right" and addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
											rx -= 1
										}
										
										repeat addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf)
											ry = my + cnt
	
											if direction = "bottom" and addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
												ry -= 1
											}
	
											if done_build(0,rx,ry) = 0 and category(rx,ry) != "tile" and (category(rx,ry) = "road" or category(rx,ry) = "railroad" or obj_use_tiles_x(rx,ry) != 0 or obj_use_tiles_y(rx,ry) != 0) {
												found_other_obj = 1
												
												if direction = "left" {
													cannot_build(0) = 1
												}
												if direction = "top" {
													cannot_build(1) = 1
												}
												if direction = "bottom" {
													cannot_build(2) = 1
												}
												if direction = "right" {
													cannot_build(3) = 1
												}
		
												//ほかに建設可能な向きを探す
													found_other_direction = 0
														
													repeat 4
															
														if direction_check(cnt) = 1 and cnt != now_direction_num and cannot_build(cnt) = 0 {
															found_other_direction = 1
															direction_check(now_direction_num) = 0
															
															if cnt = 0 {
																direction = "left"
																now_direction_num = 0
																break
															}
															if cnt = 1 {
																direction = "top"
																now_direction_num = 1
																break
															}
															if cnt = 2 {
																direction = "bottom"
																now_direction_num = 2
																break
															}
															if cnt = 3 {
																direction = "right"
																now_direction_num = 3
																break
															}
														}
													loop
		
												//ほかに建設可能な向きが見つかった場合
													if found_other_direction = 1 {
														able_build_here = 1
														break
														
												//ほかに建設可能な向きが見つからなかった場合
													} else {				
														cannot_build_here = 1
														break
													}
											}
	
											done_build(0,rx,ry) = 1
										loop
									loop
	
									if able_build_here = 1 and found_other_obj = 1 {
										able_build_here = 0
										found_other_obj = 0
										
										goto *build_obj_2
									}
									
									if cannot_build_here = 1 and found_other_obj = 1 {
										if cursor_mode = "put_Park" or cursor_mode = "put_Farm" {		; 公園、農業地区はとりあえず下向きとする
											direction = "bottom"
											now_direction_num = 2
											
											able_build_here = 1
	
											return	
										}
	
										if from_Build_on_Reservation_area = 0 and (addon_chip_x(addon_num_buf, 0, obj_dire(mx,my)) = 1 and addon_chip_y(addon_num_buf, 0, obj_dire(mx,my)) = 1) {
											dialog "この区画は既に占有されています"
										}
	
										if from_Build_on_Reservation_area = 0 {
											cannot_build_here = 0
										}
										
										found_other_obj = 0
										
										return
									}
										
								}
	
							//Build_on_Reservation_areaからきた場合はfrom_Build_on_Reservation_area = 0に
								if from_Build_on_Reservation_area = 1 {
									from_Build_on_Reservation_area = 0
								}
	
							//obj_type_bufをobj_type(mx,my)に、obj_dire_bufをobj_dire(mx,my)に代入
								obj_type(mx,my) = obj_type_buf
								obj_dire(mx,my) = obj_dire_buf
	
							//x方向に1マスしか使わない建築物の場合、obj_use_tiles_xは0に
								if addon_chip_x(addon_num_buf, obj_type(mx,my), obj_dire(mx,my)) = 1 {
									acx = 0
								} else {
									acx = 1
								}
	
							//y方向に1マスしか使わない建築物の場合、obj_use_tiles_yは0に
								if addon_chip_y(addon_num_buf, obj_type(mx,my), obj_dire(mx,my)) = 1 {
									acy = 0
								} else {
									acy = 1
								}
	
							//オブジェクトの通し番号
								if obj_serial_num(mx, my) = 0 {
									next_obj_serial_num += 1
								}
								
							//建設処理
								repeat addon_chip_x(addon_num_buf, obj_type(mx,my), obj_dire(mx,my))
									rx = cnt
									
									if direction = "right" and addon_chip_x(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
										rx -= 1
									}
									
									repeat addon_chip_y(addon_num_buf, obj_type(mx,my), obj_dire(mx,my))
										ry = cnt
	
										if direction = "bottom" and addon_chip_y(addon_num_buf, obj_type_buf, obj_dire_buf) > 1 {
											ry -= 1
										}
										
										before_category = category(mx+rx,my+ry)
										
										map(mx+rx,my+ry) = addon_num_buf
										name(mx+rx,my+ry) = put_addon_name
										category(mx+rx,my+ry) = category_buf
										category_2(mx+rx,my+ry) = addon_type_2(addon_num_buf)
										category_3(mx+rx,my+ry) = addon_type_3(addon_num_buf)
	
										obj_type(mx+rx,my+ry) = obj_type(mx, my)
										obj_dire(mx+rx,my+ry) = obj_dire(mx, my)
			
										obj_serial_num(mx+rx,my+ry) = next_obj_serial_num
										obj_use_tiles_x(mx+rx,my+ry) = addon_chip_x(addon_num_buf, 0, obj_dire(mx+rx,my+ry)) * acx
										obj_use_tiles_y(mx+rx,my+ry) = addon_chip_y(addon_num_buf, 0, obj_dire(mx+rx,my+ry)) * acy
										obj_tiles_x(mx+rx,my+ry) = rx
										obj_tiles_y(mx+rx,my+ry) = ry
	
										crop(mx+rx,my+ry) = addon_crop(addon_num_buf)
										crop_amount(mx+rx,mx+ry) = addon_crop_amount(addon_num_buf)
										
										reservation(mx+rx,my+ry) = "none"

										original_name(mx+rx,my+ry) = ""
	
										if done_build(1,mx+rx,my+ry) = 0 and rx = 0 and ry = 0 {
											//資金を減らす（§5/1マス）
												Money -= 5
										}
										
										if before_category = "residential" and done_build(1,mx+rx,my+ry) = 0 {
											Total_Population -= residents(mx+rx,my+ry)
											total_Residential_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											residents(mx+rx,my+ry) = 0
		
											done_build(1,mx+rx,my+ry) = 1
										}
		
										if before_category = "commercial" and done_build(1,mx+rx,my+ry) = 0 {
											Total_workers_Commercial -= workers_Commercial(mx+rx,my+ry)
											total_Commercial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Commercial(mx+rx,my+ry) = 0
		
											done_build(1,mx+rx,my+ry) = 1
										}
										
										if before_category = "office" and done_build(1,mx+rx,my+ry) = 0 {
											Total_workers_Office -= workers_Office(mx+rx,my+ry)
											total_Office_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Office(mx+rx,my+ry) = 0
		
											done_build(1,mx+rx,my+ry) = 1
										}
		
										if before_category = "industrial" and done_build(1,mx+rx,my+ry) = 0 {
											Total_workers_Industrial -= workers_Industrial(mx+rx,my+ry)
											total_Industrial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Industrial(mx+rx,my+ry) = 0
		
											done_build(1,mx+rx,my+ry) = 1
										}
	
										if before_category = "farm" and done_build(1,mx+rx,my+ry) = 0 {
											Total_workers_Farm -= workers_Farm(mx+rx,my+ry)
											total_Farm_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Farm(mx+rx,my+ry) = 0
		
											done_build(1,mx+rx,my+ry) = 1
										}
		
										if before_category = "public" and done_build(1,mx+rx,my+ry) = 0 {
											Total_workers_Public -= workers_Public(mx+rx,my+ry)
											total_Public_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
											workers_Public(mx+rx,my+ry) = 0
		
											done_build(1,mx+rx,my+ry) = 1
										}
	
										done_build(1,mx+rx,my+ry) = 1
									loop
								loop
	
							//地価の変動
								addon_land_price_influence__tmp = addon_land_price_influence(addon_num_buf)
	
								addon_land_price_influence_grid__tmp = addon_land_price_influence_grid(addon_num_buf)
	
								if addon_land_price_influence_grid__tmp != 0 {
									add_value = addon_land_price_influence__tmp / addon_land_price_influence_grid__tmp
								} else : if addon_land_price_influence_grid__tmp = 0 {
									add_value = 0
								}
								
								round = 0
								
								for round, 1, addon_land_price_influence_grid__tmp+1, 1
									
									repeat (round*2-1)
										if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize and my+round-1>0 and my+round-1<mapsize {
											if done_build(2, mx+cnt-(round-1), my+round-1) = 0 {
												land_price(mx+cnt-(round-1),my+round-1) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx+cnt-(round-1), my+round-1) = 1
											}
										}
									loop
									
									repeat (round*2-1)
										if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize and my-round+1>0 and my-round+1<mapsize {
											if done_build(2, mx+cnt-(round-1), my-round+1) = 0 {
												land_price(mx+cnt-(round-1),my-round+1) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx+cnt-(round-1), my-round+1) = 1
											}
										}
									loop
	
									repeat (round*2-1)
										if mx+round-1>0 and mx+round-1<mapsize and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize {
											if done_build(2, mx+round-1, my+cnt-(round-1)) = 0 {
												land_price(mx+round-1,my+cnt-(round-1)) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx+round-1, my+cnt-(round-1)) = 1
											}
										}
									loop
	
									repeat (round*2-1)
										if mx-round+1>0 and mx-round+1<mapsize and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize {
											if done_build(2, mx-round+1, my+cnt-(round-1)) = 0 {
												land_price(mx-round+1,my+cnt-(round-1)) += int( addon_land_price_influence__tmp - (add_value*(round-1)) )
												done_build(2, mx-round+1, my+cnt-(round-1)) = 1
											}
										}
									loop
								next
	
							//犯罪率の変動
								addon_crime_rate_influence__tmp = addon_crime_rate_influence(addon_num_buf)
								
								if addon_crime_rate_influence__tmp != 0 {
	
									addon_crime_rate_influence_grid__tmp = addon_crime_rate_influence_grid(addon_num_buf)
									
									add_value = addon_crime_rate_influence__tmp / addon_crime_rate_influence_grid__tmp
									round = 0
									
									for round, 1, addon_crime_rate_influence_grid__tmp+1, 1
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my+round-1) >= 0 and (my+round-1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my+round-1) = 0 {
													crime_rate(mx+cnt-(round-1),my+round-1) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+cnt-(round-1),my+round-1) > 100 {
														crime_rate(mx+cnt-(round-1),my+round-1) = 100
													}
													if crime_rate(mx+cnt-(round-1),my+round-1) < -100 {
														crime_rate(mx+cnt-(round-1),my+round-1) = -100
													}
													done_build(5, mx+cnt-(round-1), my+round-1) = 1
												}
											}
										loop
										
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my-round+1) >= 0 and (my-round+1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my-round+1) = 0 {
													crime_rate(mx+cnt-(round-1),my-round+1) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+cnt-(round-1),my-round+1) > 100 {
														crime_rate(mx+cnt-(round-1),my-round+1) = 100
													}
													if crime_rate(mx+cnt-(round-1),my-round+1) < -100 {
														crime_rate(mx+cnt-(round-1),my-round+1) = -100
													}
													done_build(5, mx+cnt-(round-1), my-round+1) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx+round-1) >= 0 and (mx+round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx+round-1, my+cnt-(round-1)) = 0 {
													crime_rate(mx+round-1,my+cnt-(round-1)) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+round-1,my+cnt-(round-1)) > 100 {
														crime_rate(mx+round-1,my+cnt-(round-1)) = 100
													}
													if crime_rate(mx+round-1,my+cnt-(round-1)) < -100 {
														crime_rate(mx+round-1,my+cnt-(round-1)) = -100
													}
													done_build(5, mx+round-1, my+cnt-(round-1)) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx-round-1) >= 0 and (mx-round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx-round+1, my+cnt-(round-1)) = 0 {
													crime_rate(mx-round+1,my+cnt-(round-1)) += int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx-round+1,my+cnt-(round-1)) > 100 {
														crime_rate(mx-round+1,my+cnt-(round-1)) = 100
													}
													if crime_rate(mx-round+1,my+cnt-(round-1)) < -100 {
														crime_rate(mx-round+1,my+cnt-(round-1)) = -100
													}
													done_build(5, mx-round+1, my+cnt-(round-1)) = 1
												}
											}
										loop
									next
	
								}
	
							//教育度の変動
								addon_education_rate_influence__tmp = addon_education_rate_influence(addon_num_buf)
								
								if addon_education_rate_influence__tmp != 0 {
	
									addon_education_rate_influence_grid__tmp = addon_education_rate_influence_grid(addon_num_buf)
									
									add_value = addon_education_rate_influence__tmp / addon_education_rate_influence_grid__tmp
									round = 0
									
									for round, 1, addon_education_rate_influence_grid__tmp+1, 1
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my+round-1) >= 0 and (my+round-1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my+round-1) = 0 {
													education_rate(mx+cnt-(round-1),my+round-1) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx+cnt-(round-1), my+round-1) = 1
												}
											}
										loop
										
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my-round+1) >= 0 and (my-round+1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my-round+1) = 0 {
													education_rate(mx+cnt-(round-1),my-round+1) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx+cnt-(round-1), my-round+1) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx+round-1) >= 0 and (mx+round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx+round-1, my+cnt-(round-1)) = 0 {
													education_rate(mx+round-1,my+cnt-(round-1)) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx+round-1, my+cnt-(round-1)) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx-round-1) >= 0 and (mx-round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx-round+1, my+cnt-(round-1)) = 0 {
													education_rate(mx-round+1,my+cnt-(round-1)) += int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx-round+1, my+cnt-(round-1)) = 1
												}
											}
										loop
									next
	
								}
	
							//都市全体の収容可能人数或いは求人数を増やし、RCOIFメーターを変動
								if category_buf = "residential" and done_build(4,mx,my) = 0 {
									total_Residential_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build(4,mx,my) = 1
	
									demand_Residential -= 1
								}
								if category_buf = "commercial" and done_build(4,mx,my) = 0 {
									total_Commercial_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build(4,mx,my) = 1
	
									demand_Commercial -= 1
								}
								if category_buf = "office" and done_build(4,mx,my) = 0 {
									total_Office_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build(4,mx,my) = 1
	
									demand_Office -= 1
								}
								if category_buf = "industrial" and done_build(4,mx,my) = 0 {
									total_Industrial_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build(4,mx,my) = 1
	
									demand_Industrial -= 1
								}
								if category_buf = "farm" and done_build(4,mx,my) = 0 {
									total_Farm_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build(4,mx,my) = 1
	
									demand_Farm -= 1
								}
								if category_buf = "public" and done_build(4,mx,my) = 0 {
									total_Public_maximum_capacity += addon_maximum_capacity(addon_num_buf)
									Vacancies += addon_maximum_capacity(addon_num_buf)
									done_build(4,mx,my) = 1
								}
						}
					}	
					
			}
	
			return
	
*delete_obj
		//撤去
			//カーソルがマップ外にある場合はreturn
				if mx < 0 or my < 0 or mx > mapsize-1 or my > mapsize-1 {
					return
				}
			
			if mouse_right = 1 or (cursor_mode = "bulldozer" and mouse_left = 1) or from_build_obj = 1 {
				//オブジェクトの向きを取得
					addon_num_buf = addon_num(name(mx,my))
					tile_addon_num_buf = addon_num("tile_greenfield")
					obj_direction_buf = addon_direction(addon_num_buf, obj_type(mx,my), obj_dire(mx,my))
					
					category_buf = category(mx,my)
					
					p = 0
	
					obj_tiles_x_buf = obj_tiles_x(mx,my)
					obj_tiles_y_buf = obj_tiles_y(mx,my)
	
					obj_use_tiles_x_buf = obj_use_tiles_x(mx,my)
					obj_use_tiles_y_buf = obj_use_tiles_y(mx,my)
	
					if obj_use_tiles_x_buf = 0 {
						px = 1
					} else {
						px = 0
					}
					
					if obj_use_tiles_y_buf = 0 {
						py = 1
					} else {
						py = 0
					}
	
					reservation(mx,my) = "none"
					
					repeat obj_use_tiles_x_buf + px
						rx = cnt
	
						if obj_direction_buf = "right" and obj_use_tiles_x_buf > 1 {
							rx -= 1
						}
								
						repeat obj_use_tiles_y_buf + py
							ry = cnt
	
							if obj_direction_buf = "bottom" and obj_use_tiles_y_buf > 1 {
								ry -= 1
							}
							
							map(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = tile_addon_num_buf
							name(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = "tile_greenfield"
							category(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = "tile"
							category_2(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = ""
							category_3(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = ""
							obj_type(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = tile_greenfield_null_type_buf
							obj_dire(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = tile_greenfield_null_dire_buf

							original_name(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = ""
	
							crop(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = "none"
							crop_amount(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
								
							obj_serial_num(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_use_tiles_x(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_use_tiles_y(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_tiles_x(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							obj_tiles_y(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
	
							if category_buf = "residential" {
								Total_Population -= residents(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Residential_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								residents(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
			
							if category_buf = "commercial" {
								Total_workers_Commercial -= workers_Commercial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Commercial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Commercial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
				
							if category_buf = "office" {
								Total_workers_Office -= workers_Office(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Office_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Office(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
				
							if category_buf = "industrial" {
								Total_workers_Industrial -= workers_Industrial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Industrial_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Industrial(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
	
							if category_buf = "farm" {
								Total_workers_Farm -= workers_Farm(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Farm_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Farm(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
				
							if category_buf = "public" {
								Total_workers_Public -= workers_Public(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry)
								total_Public_maximum_capacity -= addon_maximum_capacity(addon_num_buf)
								Vacancies -= addon_maximum_capacity(addon_num_buf)
								workers_Public(mx-obj_tiles_x_buf+rx, my-obj_tiles_y_buf+ry) = 0
							}
	
							//地価の変動
								if instr(category_buf, 0, "road") = -1 and instr(category_buf, 0, "railroad") = -1 and instr(category_buf, 0, "tile") = -1 {
									addon_land_price_influence__tmp = addon_land_price_influence(addon_num_buf)
		
									addon_land_price_influence_grid__tmp = addon_land_price_influence_grid(addon_num_buf)
									
									if addon_land_price_influence_grid__tmp = 0 {
										addon_land_price_influence_grid__tmp = 1
									}
									add_value = addon_land_price_influence__tmp / addon_land_price_influence_grid__tmp
									round = 0
									
									for round, 1, addon_land_price_influence_grid__tmp+1, 1
										
										repeat (round*2-1)
											if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize and my+round-1>0 and my+round-1<mapsize {
												if done_build(2, mx+cnt-(round-1), my+round-1) = 0 {
													land_price(mx+cnt-(round-1),my+round-1) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
													done_build(2, mx+cnt-(round-1), my+round-1) = 1
												}
											}
										loop
										
										repeat (round*2-1)
											if mx+cnt-(round-1)>0 and mx+cnt-(round-1)<mapsize and my-round+1>0 and my-round+1<mapsize {
												if done_build(2, mx+cnt-(round-1), my-round+1) = 0 {
													land_price(mx+cnt-(round-1),my-round+1) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
													done_build(2, mx+cnt-(round-1), my-round+1) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if mx+round-1>0 and mx+round-1<mapsize and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize {
												if done_build(2, mx+round-1, my+cnt-(round-1)) = 0 {
													land_price(mx+round-1,my+cnt-(round-1)) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
													done_build(2, mx+round-1, my+cnt-(round-1)) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if mx-round+1>0 and mx-round+1<mapsize and my+cnt-(round-1)>0 and my+cnt-(round-1)<mapsize {
												if done_build(2, mx-round+1, my+cnt-(round-1)) = 0 {
													land_price(mx-round+1,my+cnt-(round-1)) -= int( addon_land_price_influence__tmp - (add_value*(round-1)) )
													done_build(2, mx-round+1, my+cnt-(round-1)) = 1
												}
											}
										loop
									next
								}
	
							//犯罪率の変動
								addon_crime_rate_influence__tmp = addon_crime_rate_influence(addon_num_buf)
								
								if addon_crime_rate_influence__tmp != 0 {
	
									addon_crime_rate_influence_grid__tmp = addon_crime_rate_influence_grid(addon_num_buf)
									
									add_value = addon_crime_rate_influence__tmp / addon_crime_rate_influence_grid__tmp
									round = 0
									
									for round, 1, addon_crime_rate_influence_grid__tmp+1, 1
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my+round-1) >= 0 and (my+round-1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my+round-1) = 0 {
													crime_rate(mx+cnt-(round-1),my+round-1) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+cnt-(round-1),my+round-1) > 100 {
														crime_rate(mx+cnt-(round-1),my+round-1) = 100
													}
													if crime_rate(mx+cnt-(round-1),my+round-1) < -100 {
														crime_rate(mx+cnt-(round-1),my+round-1) = -100
													}
													done_build(5, mx+cnt-(round-1), my+round-1) = 1
												}
											}
										loop
										
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my-round+1) >= 0 and (my-round+1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my-round+1) = 0 {
													crime_rate(mx+cnt-(round-1),my-round+1) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+cnt-(round-1),my-round+1) > 100 {
														crime_rate(mx+cnt-(round-1),my-round+1) = 100
													}
													if crime_rate(mx+cnt-(round-1),my-round+1) < -100 {
														crime_rate(mx+cnt-(round-1),my-round+1) = -100
													}
													done_build(5, mx+cnt-(round-1), my-round+1) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx+round-1) >= 0 and (mx+round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx+round-1, my+cnt-(round-1)) = 0 {
													crime_rate(mx+round-1,my+cnt-(round-1)) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx+round-1,my+cnt-(round-1)) > 100 {
														crime_rate(mx+round-1,my+cnt-(round-1)) = 100
													}
													if crime_rate(mx+round-1,my+cnt-(round-1)) < -100 {
														crime_rate(mx+round-1,my+cnt-(round-1)) = -100
													}
													done_build(5, mx+round-1, my+cnt-(round-1)) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx-round-1) >= 0 and (mx-round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx-round+1, my+cnt-(round-1)) = 0 {
													crime_rate(mx-round+1,my+cnt-(round-1)) -= int( addon_crime_rate_influence__tmp - (add_value*(round-1)) )
													if crime_rate(mx-round+1,my+cnt-(round-1)) > 100 {
														crime_rate(mx-round+1,my+cnt-(round-1)) = 100
													}
													if crime_rate(mx-round+1,my+cnt-(round-1)) < -100 {
														crime_rate(mx-round+1,my+cnt-(round-1)) = -100
													}
													done_build(5, mx-round+1, my+cnt-(round-1)) = 1
												}
											}
										loop
									next
	
								}
	
							//教育度の変動
								addon_education_rate_influence__tmp = addon_education_rate_influence(addon_num_buf)
								
								if addon_education_rate_influence__tmp != 0 {
	
									addon_education_rate_influence_grid__tmp = addon_education_rate_influence_grid(addon_num_buf)
									
									add_value = addon_education_rate_influence__tmp / addon_education_rate_influence_grid__tmp
									round = 0
									
									for round, 1, addon_education_rate_influence_grid__tmp+1, 1
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my+round-1) >= 0 and (my+round-1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my+round-1) = 0 {
													education_rate(mx+cnt-(round-1),my+round-1) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx+cnt-(round-1), my+round-1) = 1
												}
											}
										loop
										
										repeat (round*2-1)
											if (mx+cnt-(round-1)) >= 0 and (mx+cnt-(round-1)) <= mapsize and (my-round+1) >= 0 and (my-round+1) <= mapsize {
												if done_build(5, mx+cnt-(round-1), my-round+1) = 0 {
													education_rate(mx+cnt-(round-1),my-round+1) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx+cnt-(round-1), my-round+1) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx+round-1) >= 0 and (mx+round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx+round-1, my+cnt-(round-1)) = 0 {
													education_rate(mx+round-1,my+cnt-(round-1)) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx+round-1, my+cnt-(round-1)) = 1
												}
											}
										loop
		
										repeat (round*2-1)
											if (mx-round-1) >= 0 and (mx-round-1) <= mapsize and (my+cnt-(round-1)) >= 0 and (my+cnt-(round-1)) <= mapsize {
												if done_build(5, mx-round+1, my+cnt-(round-1)) = 0 {
													education_rate(mx-round+1,my+cnt-(round-1)) -= int( addon_education_rate_influence__tmp - (add_value*(round-1)) )
													done_build(5, mx-round+1, my+cnt-(round-1)) = 1
												}
											}
										loop
									next
	
								}
						loop
					loop
			}
	
		from_build_obj = 0
		
		return
		
*adjustment_road
	put_addon_name = name(x, y)
	
	if category_buf = "road" {
		if from_delete_obj = 0 {
			gosub *delete_obj
		}
	
		if category_2(x, y) != "train_crossing" {
			category_2(x, y) = ""
		}
		
		from_delete_obj = 0
		from_build_obj = 0
	
		//行き止まり
			if (left_chip = "road" or left_chip_2 = "train_crossing") and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "left")
	
				if category_buf = "railroad" or category_2(x, y) = "train_crossing" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
					category_2(x, y) = "train_crossing"
				}
	
				//マップの端なら直線道路に変更
					/*if x = 0 {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
					}*/
			}
			if left_chip != "road" and (top_chip = "road" or top_chip_2 = "train_crossing") and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "top")
	
				if category_buf = "railroad" or category_2(x, y) = "train_crossing" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
					category_2(x, y) = "train_crossing"
				}
	
				//マップの端なら直線道路に変更
					/*if y = 0 {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
					}*/
			}
			if left_chip != "road" and top_chip != "road" and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "bottom")
	
				if category_buf = "railroad" or category_2(x, y) = "train_crossing" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
					category_2(x, y) = "train_crossing"
				}
	
				//マップの端なら直線道路に変更
					/*if x = mapsize {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
					}*/
			}
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "right")
	
				if category_buf = "railroad" or category_2(x, y) = "train_crossing" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
					category_2(x, y) = "train_crossing"
				}
	
				//マップの端なら直線道路に変更
					/*if y = mapsize {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
					}*/
			}
	
		//曲がり角
			if (left_chip = "road" or left_chip_2 = "train_crossing") and (top_chip = "road" or top_chip_2 = "train_crossing") and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-top")
			}
			if left_chip != "road" and (top_chip = "road" or top_chip_2 = "train_crossing") and bottom_chip != "road" and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-top")
			}
			if (left_chip = "road" or left_chip_2 = "train_crossing") and top_chip != "road" and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-bottom")
			}
			if left_chip != "road" and top_chip != "road" and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-bottom")
			}
	
		//T字型交差点
			if (left_chip = "road" or left_chip_2 = "train_crossing") and (top_chip = "road" or top_chip_2 = "train_crossing") and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-top-bottom")
			}
			if (left_chip = "road" or left_chip_2 = "train_crossing") and (top_chip = "road" or top_chip_2 = "train_crossing") and bottom_chip != "road" and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-top")
			}
			if (left_chip = "road" or left_chip_2 = "train_crossing") and top_chip != "road" and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-bottom")
			}
			if left_chip != "road" and (top_chip = "road" or top_chip_2 = "train_crossing") and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "right-top-bottom")
			}
	
		//十字型交差点
			if (left_chip = "road" or left_chip_2 = "train_crossing") and (top_chip = "road" or top_chip_2 = "train_crossing") and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		//1マスだけ孤立した（周りに接続する道路がない）道路の場合はコンクリートタイルを表示
			if left_chip != "road" and top_chip != "road" and bottom_chip != "road" and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
			}
	
		//縦向き
			if left_chip != "road" and (top_chip = "road" or top_chip_2 = "train_crossing") and (bottom_chip = "road" or bottom_chip_2 = "train_crossing") and right_chip != "road" {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
	
				if category_buf = "railroad" or category_2(x, y) = "train_crossing" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
					category_2(x, y) = "train_crossing"
				}
			}
	
		//横向き
			if (left_chip = "road" or left_chip_2 = "train_crossing") and top_chip != "road" and bottom_chip != "road" and (right_chip = "road" or right_chip_2 = "train_crossing") {
				obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
				obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
	
				if category_buf = "railroad" or category_2(x, y) = "train_crossing" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
					category_2(x, y) = "train_crossing"
				}
			}
	
	}
	
	return
	
*adjustment_railroad
	put_addon_name = name(x, y)
	
	if category_buf = "railroad" or category_buf = "station" {
	
		if from_delete_obj = 0 {
			gosub *delete_obj
		}
	
		if category_2(x, y) != "train_crossing" and category_2(x, y) != "" {
			category_2(x, y) = ""
		}
		category_3(x,y) = ""
		
		from_delete_obj = 0
		from_build_obj = 0
		
		if category_buf = "railroad" {
			//縦向き
				if (left_chip != "railroad" and left_chip != "station") and (top_chip = "railroad" or top_chip = "station" or top_chip_2 = "train_crossing") and (bottom_chip = "railroad" or bottom_chip = "station" or bottom_chip_2 = "train_crossing") and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
					
					if category_buf = "road" or category_2(x, y) = "train_crossing" {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
						category_2(x, y) = "train_crossing"
					}
				}
		
			//横向き
				if (left_chip = "railroad" or left_chip = "station" or left_chip_2 = "train_crossing") and (top_chip != "railroad" and top_chip != "station") and (bottom_chip != "railroad" and bottom_chip != "station") and (right_chip = "railroad" or right_chip = "station" or right_chip_2 = "train_crossing") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
		
					if category_buf = "road" or category_2(x, y) = "train_crossing" {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
						category_2(x, y) = "train_crossing"
					}
				}
			
			//行き止まり
				if (left_chip = "railroad" or left_chip = "station" or left_chip_2 = "train_crossing") and (top_chip != "railroad" and top_chip != "station") and (bottom_chip != "railroad" and bottom_chip != "station") and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "left")
		
					if category_buf = "road" or category_2(x, y) = "train_crossing" {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
						category_2(x, y) = "train_crossing"
					}
		
					//マップの端なら直線道路に変更
						/*if x = 0 {
							obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
							obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
						}*/
				}
				if (left_chip != "railroad" and left_chip != "station") and (top_chip = "railroad" or top_chip = "station" or top_chip_2 = "train_crossing") and (bottom_chip != "railroad" and bottom_chip != "station") and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "top")
		
					if category_buf = "road" or category_2(x, y) = "train_crossing" {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
						category_2(x, y) = "train_crossing"
					}
		
					//マップの端なら直線道路に変更
						/*if y = 0 {
							obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
							obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
						}*/
				}
				if (left_chip != "railroad" and left_chip != "station") and (top_chip != "railroad" and top_chip != "station") and (bottom_chip = "railroad" or bottom_chip = "station" or bottom_chip_2 = "train_crossing") and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "bottom")
		
					if category_buf = "road" or category_2(x, y) = "train_crossing" {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "width")
						category_2(x, y) = "train_crossing"
					}
					
					//マップの端なら直線道路に変更
						/*if x = mapsize {
							obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
							obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
						}*/
				}
				if (left_chip != "railroad" and left_chip != "station") and (top_chip != "railroad" and top_chip != "station") and (bottom_chip != "railroad" and bottom_chip != "station") and (right_chip = "railroad" or right_chip = "station" or right_chip_2 = "train_crossing") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "right")
		
					if category_buf = "road" or category_2(x, y) = "train_crossing" {
						obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "train_crossing")
						obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "train_crossing", addon_direction, addon_total_addon_direction, "depth")
						category_2(x, y) = "train_crossing"
					}
		
					//マップの端なら直線道路に変更
						/*if y = mapsize {
							obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
							obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
						}*/
				}
				
			//曲がり角
				if left_chip = "railroad" and top_chip = "railroad" and (bottom_chip != "railroad" and bottom_chip != "station") and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-top")
				}
				if (left_chip != "railroad" and left_chip != "station") and top_chip = "railroad" and (bottom_chip != "railroad" and bottom_chip != "station") and right_chip = "railroad" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-top")
				}
				if left_chip = "railroad" and (top_chip != "railroad" and top_chip != "station") and bottom_chip = "railroad" and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "left-bottom")
				}
				if (left_chip != "railroad" and left_chip != "station") and (top_chip != "railroad" and top_chip != "station") and bottom_chip = "railroad" and right_chip = "railroad" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "turn")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "turn", addon_direction, addon_total_addon_direction, "right-bottom")
				}
		
			//T字型交差点
				if left_chip = "railroad" and top_chip = "railroad" and bottom_chip = "railroad" and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-top-bottom")
				}
				if left_chip = "railroad" and top_chip = "railroad" and (bottom_chip != "railroad" and bottom_chip != "station") and right_chip = "railroad" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-top")
				}
				if left_chip = "railroad" and (top_chip != "railroad" and top_chip != "station") and bottom_chip = "railroad" and right_chip = "railroad" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "left-right-bottom")
				}
				if (left_chip != "railroad" and left_chip != "station") and top_chip = "railroad" and bottom_chip = "railroad" and right_chip = "railroad" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_T")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_T", addon_direction, addon_total_addon_direction, "right-top-bottom")
				}
		
			//十字型交差点
				if left_chip = "railroad" and top_chip = "railroad" and bottom_chip = "railroad" and right_chip = "railroad" {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
				}
		
			//1マスだけ孤立した（周りに接続する線路がない）線路の場合はコンクリートタイルを表示
				if (left_chip != "railroad" and left_chip != "station") and (top_chip != "railroad" and top_chip != "station") and (bottom_chip != "railroad" and bottom_chip != "station") and (right_chip != "railroad" and right_chip != "station") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "intersection_cross")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "intersection_cross", addon_direction, addon_total_addon_direction, "null")
				}
		}
	
		if category_buf = "station" {
			//縦向き
				if (left_chip != "station" and left_chip != "railroad") and (top_chip = "station" or top_chip = "railroad" or top_chip_2 = "train_crossing") and (bottom_chip = "station" or bottom_chip = "railroad" or bottom_chip_2 = "train_crossing") and (right_chip != "station" and right_chip != "railroad") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "width")
				}
		
			//横向き
				if (left_chip = "station" or left_chip = "railroad" or left_chip_2 = "train_crossing") and (top_chip != "station" and top_chip != "railroad") and (bottom_chip != "station" and bottom_chip != "railroad") and (right_chip = "station" or right_chip = "railroad" or right_chip_2 = "train_crossing") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
				}
				
			//行き止まり
				if (left_chip = "station" or left_chip = "railroad" or left_chip_2 = "train_crossing") and (top_chip != "station" and top_chip != "railroad") and (bottom_chip != "station" and bottom_chip != "railroad") and (right_chip != "station" and right_chip != "railroad") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "left")
				}
				if (left_chip != "station" and left_chip != "railroad") and (top_chip = "station" or top_chip = "railroad" or top_chip_2 = "train_crossing") and (bottom_chip != "station" and bottom_chip != "railroad") and (right_chip != "station" and right_chip != "railroad") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "top")
				}
				if (left_chip != "station" and left_chip != "railroad") and (top_chip != "station" and top_chip != "railroad") and (bottom_chip = "station" or bottom_chip = "railroad" or bottom_chip_2 = "train_crossing") and (right_chip != "station" and right_chip != "railroad") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "bottom")
				}
				if (left_chip != "station" and left_chip != "railroad") and (top_chip != "station" and top_chip != "railroad") and (bottom_chip != "station" and bottom_chip != "railroad") and (right_chip = "station" or right_chip = "railroad" or right_chip_2 = "train_crossing") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "dead_end")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "dead_end", addon_direction, addon_total_addon_direction, "right")
				}
				
			//1マスだけ孤立した（周りに接続する駅がない）場合は横向きの駅を表示
				if (left_chip != "station" and left_chip != "railroad") and (top_chip != "station" and top_chip != "railroad") and (bottom_chip != "station" and bottom_chip != "railroad") and (right_chip != "station" and right_chip != "railroad") {
					obj_type(x, y) = element2( put_addon_name, use_type, addon_total_use_types, "default")
					obj_dire(x, y) = element3( put_addon_name, use_type, addon_total_use_types, "default", addon_direction, addon_total_addon_direction, "depth")
				}
		}
	
	}
	
	return
	
*set_area
	//地区設定
	
	;住居地区の設定
	if put_addon_name = "Area : low_density_Residential" {
		reservation(mx,my) = "low_density_residential"
	}
	if put_addon_name = "Area : high_density_Residential" {
		reservation(mx,my) = "high_density_residential"
	}
	
	;商業地区の設定
	if put_addon_name = "Area : low_density_Commercial" {
		reservation(mx,my) = "low_density_commercial"
	}
	if put_addon_name = "Area : high_density_Commercial" {
		reservation(mx,my) = "high_density_commercial"
	}
	
	;オフィス地区の設定
	if put_addon_name = "Area : Office" {
		reservation(mx,my) = "office"
	}
	
	;工業地区の設定
	if put_addon_name = "Area : Industrial" {
		reservation(mx,my) = "industrial"
	}
	
	;農業地区の設定
	if put_addon_name = "Area : Farm" {
		reservation(mx,my) = "farm"
	}
	
	return
	
*Build_on_Reservation_area
	//予約地区に建物を建設
	
		//他の建物を建設しようとしている場合はreturn
			if put_addon_name != "" {
				return
			}
	
	;住居地区
		if instr(reservation(x,y), 0, "residential") != -1 {
			if demand_Residential <= 0 {
				return
			}
			
			demand_Residential -= 1
	
		;低密度
			if reservation(x,y) = "low_density_residential" {
				notesel type_low_density_residential
				rnd_num = rnd(notemax)
				noteget put_addon_name, rnd_num
				
				notesel type_number_low_density_residential
				noteget addon_num_buf, rnd_num
	
		;高密度
			} else : if reservation(x,y) = "high_density_residential" {
				notesel type_high_density_residential
				rnd_num = rnd(notemax)
				noteget put_addon_name, rnd_num
				
				notesel type_number_high_density_residential
				noteget addon_num_buf, rnd_num
				
			}
	
			addon_num_buf = int(addon_num_buf)
	
			from_Build_on_Reservation_area = 1
	
			cursor_mode_tmp = cursor_mode
			cursor_mode = "put_Residential"
			mouse_left = 1
		}
	
	;商業地区
		if instr(reservation(x,y), 0, "commercial") != -1 {
			if demand_Commercial <= 0 {
				return
			}
			
			demand_Commercial -= 1
	
		;低密度
			if reservation(x,y) = "low_density_commercial" {
				notesel type_low_density_commercial
				rnd_num = rnd(notemax)
				noteget put_addon_name, rnd_num
				
				notesel type_number_low_density_commercial
				noteget addon_num_buf, rnd_num
	
		;高密度
			} else : if reservation(x,y) = "high_density_commercial" {
				notesel type_high_density_commercial
				rnd_num = rnd(notemax)
				noteget put_addon_name, rnd_num
				
				notesel type_number_high_density_commercial
				noteget addon_num_buf, rnd_num
				
			}
	
			addon_num_buf = int(addon_num_buf)
	
			from_Build_on_Reservation_area = 1
	
			cursor_mode_tmp = cursor_mode
			cursor_mode = "put_Commercial"
			mouse_left = 1
		}
	
	;オフィス地区
		if instr(reservation(x,y), 0, "office") != -1 {
			if demand_Office <= 0 {
				return
			}
			
			demand_Office -= 1
	
			notesel type_office
			rnd_num = rnd(notemax)
			noteget put_addon_name, rnd_num
			
			notesel type_number_office
			noteget addon_num_buf, rnd_num
	
			addon_num_buf = int(addon_num_buf)
	
			from_Build_on_Reservation_area = 1
	
			cursor_mode_tmp = cursor_mode
			cursor_mode = "put_Office"
			mouse_left = 1
		}
	
	;工業地区
		if instr(reservation(x,y), 0, "industrial") != -1 {
			if demand_Industrial <= 0 {
				return
			}
			
			demand_Industrial -= 1
	
			notesel type_industrial
			rnd_num = rnd(notemax)
			noteget put_addon_name, rnd_num
			
			notesel type_number_industrial
			noteget addon_num_buf, rnd_num
	
			addon_num_buf = int(addon_num_buf)
	
			from_Build_on_Reservation_area = 1
	
			cursor_mode_tmp = cursor_mode
			cursor_mode = "put_Industrial"
			mouse_left = 1
		}
	
	;農業地区
		if instr(reservation(x,y), 0, "farm") != -1 {
			if demand_Farm <= 0 {
				return
			}
			
			demand_Farm -= 1
	
			notesel type_farm
			rnd_num = rnd(notemax)
			noteget put_addon_name, rnd_num
			
			notesel type_number_farm
			noteget addon_num_buf, rnd_num
	
			addon_num_buf = int(addon_num_buf)
	
			from_Build_on_Reservation_area = 1
	
			cursor_mode_tmp = cursor_mode
			cursor_mode = "put_Farm"
			mouse_left = 1
		}
	
	x_tmp = x : y_tmp = y
	mx_tmp = mx : my_tmp = my
	mx = x : my = y
	gosub *build_obj
	
	x = x_tmp : y = y_tmp
	mx = mx_tmp : my = my_tmp
	
	if cannot_build_here = 0 {
		reservation(x,y) = "none"
	} else {
		cannot_build_here = 0
	}
	
	cursor_mode = cursor_mode_tmp
	
	put_addon_name = ""
	addon_num_buf = 0
	
	return
	
*open_menu_addon_menu
	if opening_addon_menu = 0 {
		return
	}
	
	color 0,162,232 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, windowx, windowy-70-titlebar_h
	
	if cursor_mode = "put_Road" and road_type = "roadway" {
		notesel type_number_Two_lane_road

		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 66, 0, 16, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 67, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Road" and road_type = "promenade" {
		notesel type_number_Promenade

		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 66, 0, 0, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 67, 0, 16, 16, 16 
	}
	if cursor_mode = "put_Railroad" {
		notesel type_number_Two_lane_railroad
	}
	if cursor_mode = "put_Residential" and density = "low" {
		notesel type_number_low_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 8, 0, 16, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 9, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Residential" and density = "high" {
		notesel type_number_high_density_residential
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 8, 0, 0, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 9, 0, 16, 16, 16
	}
	if cursor_mode = "put_Commercial" and density = "low" {
		notesel type_number_low_density_commercial
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 20, 0, 16, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 21, 0, 0, 16, 16 
	}
	if cursor_mode = "put_Commercial" and density = "high" {
		notesel type_number_high_density_commercial
	
		color 127,127,127 : gmode 3,,,200 : boxfa 0, windowy-70-titlebar_h-32-40, 16, windowy-70-titlebar_h
		pos 0, windowy-70-titlebar_h-2-32 : gmode 2 : gcopy 20, 0, 0, 16, 16
		pos 0, windowy-70-titlebar_h-2-16 : gmode 2 : gcopy 21, 0, 16, 16, 16
	}
	if cursor_mode = "put_Office" {
		notesel type_number_office
	}
	if cursor_mode = "put_Industrial" {
		notesel type_number_industrial
	}
	if cursor_mode = "put_Farm" {
		notesel type_number_farm
	}
	if cursor_mode = "put_Public" {
		notesel type_number_public
	}
	if cursor_mode = "put_Park" {
		notesel type_number_park
	}
	
	if cursor_mode != "put_Road" and cursor_mode != "put_Railroad" and cursor_mode != "put_Public" and cursor_mode != "put_Park" {
		p = 1
	} else {
		p = 0
	}
	
	repeat notemax + p
		noteget get_addon_number, cnt - p
		
		gmode 2
	
		if p = 0 or (p = 1 and cnt > 0) {
			if clicked_addon_number != cnt {
				pos 30 + (cnt)*35+10, windowy-70-titlebar_h-32 : gcopy int(get_addon_number) + 90000, 0, 0, 32, 32
			}
			if clicked_addon_number = cnt {
				//アドオンにアドオン建設可能回数が設定されている場合
				if addon_build_limit(addon_num_buf) >= 1 {
					s = 0
							
					repeat mapsize
						sx = cnt
						repeat mapsize
							sy = cnt
		
							if map(sx, sy) = addon_num_buf {
								s ++
							}
						loop
					loop
			
					await 30		; ←awaitを入れないと誤作動を起こすため
					
					color 255,255,255 : font SystemFont, 14
					pos 20, (windowy-70-titlebar_h-32-40+5) : mes ""+addon_jp_name(int(get_addon_number))+" (§5 残り"+(addon_build_limit(addon_num_buf)-s)+"回)"
					
				} else {
					color 255,255,255 : font SystemFont, 14
					pos 20, (windowy-70-titlebar_h-32-40+5) : mes ""+addon_jp_name(int(get_addon_number))+" (§5)"
				}
				
				color 255,255,255 : font SystemFont, 10
				pos 23, (windowy-70-titlebar_h-32-20) : mes addon_summary(int(get_addon_number))
				
				pos 30 + (cnt)*35+10, windowy-70-titlebar_h-32 : gcopy int(get_addon_number) + 90000, 0, 32, 32, 64
		
				pointer_icon = int(get_addon_number) + 90000
			}
		}
		
		
	loop
	
	// 地区設定のアイコンを表示
	if cursor_mode != "put_Road" and cursor_mode != "put_Railroad" and cursor_mode != "put_Public" and cursor_mode != "put_Park" {
		
		if cursor_mode = "put_Residential" {
			if clicked_addon_number = 0 {
				if density = "low" {
					color 255,255,255 : font SystemFont, 14
					pos 20, (windowy-70-titlebar_h-32-40+5) : mes "低密度な住居地区"
					
					color 255,255,255 : font SystemFont, 10
					pos 23, (windowy-70-titlebar_h-32-20) : mes "市民が住む場所を提供します。住居地区を設定すると住居建築物が建設されます。"
					
					pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 40, 0, 32, 32, 32
					
					put_addon_name = "Area : low_density_Residential"
					
				} else : if density = "high" {
					color 255,255,255 : font SystemFont, 14
					pos 20, (windowy-70-titlebar_h-32-40+5) : mes "高密度な住居地区"
					
					color 255,255,255 : font SystemFont, 10
					pos 23, (windowy-70-titlebar_h-32-20) : mes "市民が住む場所を提供します。住居地区を設定すると住居建築物が建設されます。"
					
					pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 40, 0, 32, 32, 32
					
					put_addon_name = "Area : high_density_Residential"
				}
				pointer_icon = 22
				
			} else {
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 40, 0, 0, 32, 32
			}
		}
	
		if cursor_mode = "put_Commercial" {
			if clicked_addon_number = 0 {
				if density = "low" {
					color 255,255,255 : font SystemFont, 14
					pos 20, (windowy-70-titlebar_h-32-40+5) : mes "低密度な商業地区"
					
					color 255,255,255 : font SystemFont, 10
					pos 23, (windowy-70-titlebar_h-32-20) : mes "市民が商業を営む場所を提供します。商業地区を設定すると商業建築物が建設されます。"
					
					pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 41, 0, 32, 32, 32
					
					put_addon_name = "Area : low_density_Commercial"
					
				} else : if density = "high" {
					color 255,255,255 : font SystemFont, 14
					pos 20, (windowy-70-titlebar_h-32-40+5) : mes "高密度な商業地区"
					
					color 255,255,255 : font SystemFont, 10
					pos 23, (windowy-70-titlebar_h-32-20) : mes "市民が商業を営む場所を提供します。商業地区を設定すると商業建築物が建設されます。"
					
					pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 41, 0, 32, 32, 32
					
					put_addon_name = "Area : high_density_Commercial"
				}
				pointer_icon = 23
				
			} else {
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 41, 0, 0, 32, 32
			}
		}
		
		if cursor_mode = "put_Office" {
			if clicked_addon_number = 0 {
				color 255,255,255 : font SystemFont, 14
				pos 20, (windowy-70-titlebar_h-32-40+5) : mes "オフィス地区"
				
				color 255,255,255 : font SystemFont, 10
				pos 23, (windowy-70-titlebar_h-32-20) : mes "市民が仕事する場を提供します。オフィス地区を設定するとオフィス建築物が建設されます。"
				
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 42, 0, 32, 32, 32
	
				put_addon_name = "Area : Office"
				pointer_icon = 24
				
			} else {
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 42, 0, 0, 32, 32
			}
		}
	
		if cursor_mode = "put_Industrial" {
			if clicked_addon_number = 0 {
				color 255,255,255 : font SystemFont, 14
				pos 20, (windowy-70-titlebar_h-32-40+5) : mes "工業地区"
				
				color 255,255,255 : font SystemFont, 10
				pos 23, (windowy-70-titlebar_h-32-20) : mes "市民がモノを生産する場を提供します。工業地区を設定すると工業建築物が建設されます。"
				
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 43, 0, 32, 32, 32
	
				put_addon_name = "Area : Industrial"
				pointer_icon = 25
				
			} else {
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 43, 0, 0, 32, 32
			}
		}
	
		if cursor_mode = "put_Farm" {
			if clicked_addon_number = 0 {
				color 255,255,255 : font SystemFont, 14
				pos 20, (windowy-70-titlebar_h-32-40+5) : mes "農業地区"
				
				color 255,255,255 : font SystemFont, 10
				pos 23, (windowy-70-titlebar_h-32-20) : mes "市民が農作物を生産する場を提供します。農業地区を設定すると畑や田、牧場が建設されます。"
				
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 58, 0, 32, 32, 32
	
				put_addon_name = "Area : Farm"
				pointer_icon = 59
				
			} else {
				pos 30 + 10, windowy-70-titlebar_h-32 : gcopy 58, 0, 0, 32, 32
			}
		}
	
	}
	
	return
	
*play_BGM
	//現在再生しているBGMの現在の再生位置と曲の長さを取得
		mci"status Cities-Box position"
		BGM_Position = stat		; 現在の再生位置
			
		mci "status Cities-Box length"
		BGM_Length = stat		; 曲の長さ
	
	//再生位置が曲の長さと同じなら次のBGMをランダムに選出
		if BGM_Position = BGM_Length {	
			chdir directory
			chdir "bgm"
	
			mci "close Cities-Box"
					
			//パス名を含めたファイル一覧を取得
				dirlist2h 1, ','
				dirlist2 buf_BGMs, "*.mp3", 1, '\\'
					
				sdim BGM_filelist, buf_BGMs
				dirlist2r BGM_filelist
		
				notesel BGM_filelist
				total_BGMs = notemax
			
			chdir directory
			
			//ランダムに選出
				randomize
	
				repeat
					BGM_rnd = rnd(total_BGMs)
					
					//現在再生しているBGMと同じ曲でないことと、特定の条件下のみで流れるBGM（ファイル名に[Sp]がある）でないことを確認
						notesel BGM_filelist
						noteget next_BGM_file, BGM_rnd
						
						if next_BGM_file != playing_BGM_file {
							if instr(next_BGM_file, 0, "[less_") != -1 {			; 人口○人以下の場合のみ流れるBGM
								less_var = int(strmid(next_BGM_file, 6, instr(next_BGM_file, 0, "]")))
									
								if Total_Population <= less_var {
									playing_BGM_file = next_BGM_file
									break
								}
							} else : if instr(next_BGM_file, 0, "[more_") != -1 {	; 人口○人以上の場合のみ流れるBGM
								more_var = int(strmid(next_BGM_file, 6, instr(next_BGM_file, 0, "]")))
									
								if Total_Population >= more_var {
									playing_BGM_file = next_BGM_file
									break
								}
							} else : if instr(next_BGM_file, 0, "[m_") != -1 {	; ○月のみ流れる曲
								month_var = int(strmid(next_BGM_file, 3, instr(next_BGM_file, 0, "]")))
								
								if month_var = time_month {
									playing_BGM_file = next_BGM_file
									break
								}
							} else : if instr(next_BGM_file, 0, "[Sp]") = -1 {
								playing_BGM_file = next_BGM_file
								break
							}
						}
	
					await 1
				loop
	
			//天気が雨なら、1/3の確率でランダムで雨っぽい曲を流す
				if add_rain > 0 {
					if rnd(3) = 2 {
						playing_BGM_file = "[Sp]Satie-Jeteveux.mp3"
					}
				}
	
			//再生
				mci"open \""+directory+"\\bgm\\"+playing_BGM_file+"\" alias Cities-Box"	; 開く
				mci"play Cities-Box"													; 再生
	
				changed_BGM = 1
		}
	
		; ボリューム
		if Set_Play_BGM = 0 {
			mci "setaudio Cities-Box volume to 0"
		} else {
			mci "setaudio Cities-Box volume to 1000"
		}
	
		return
	
*get_windowsize
	//現在のウィンドウサイズを取得
		windowx = ginfo_sizex
		windowy = ginfo_sizey
	
	//ウィンドウ左枠の横幅とタイトルバーの高さを取得
		dim rc, 2
		rc(0) = 0
		rc(1) = 0
		ClientToScreen hwnd, varptr(rc)
		
		window_left_breadth = rc(0) - ginfo_wx1
		titlebar_h = rc(1) - ginfo_wy1
	
	return
	
*fluctuation
	//人口・労働人口・需要度などを増減
	
		//nx = 0 and ny = 0の場合は、*fluctuation__get_firstにジャンプ
			if x = 0 and y = 0 {
				gosub *fluctuation__get_first
			}
	
		//変数初期化
			before_residents = 0
			before_workers_Commericial = 0
			before_workers_Office = 0
			before_workers_Industrial = 0
			before_workers_Farm = 0
			before_workers_Public = 0
	
		//住民数を変化させるかどうかを決める
			if residents(x,y) = 0 {
				rtmp = rnd(10)
			} else {
				rtmp = rnd(100)
			}
	
		//人口の増減
			if category(x,y) = "residential" and rtmp = 0 and demand_Residential != 0 {
				//住民数を増やすか・減らすかをランダムに決める（需要度によって確率が変動する）
					if demand_Residential < 0 {
						demand_Residential = 0
					}

					rndv = 10+(demand_Residential/10)
					
					f = rnd(rndv)+1		; fの値は住居地区の需要度が100％なら20〜0
					f2 = 0
						
				//変更前の住居地区の住民数
					before_residents = residents(x,y)
	
				//変更前の住人の年齢を取得
					sdim age_in_Residential_tmp, 16, before_residents + 10
					split age(x,y), "]", age_in_Residential_tmp
	
					dim age_in_Residential, before_residents + 10
					repeat before_residents
						split age_in_Residential_tmp(cnt), "[", cut, age_in_Residential_tmp(cnt)
						age_in_Residential(cnt) = int(age_in_Residential_tmp(cnt))
					loop
		
				//人口の増減処理
					if f >= (demand_Residential/10) / 2 {
						//各住居地区に何人増やすか
							if addon_maximum_capacity(map(x,y)) - before_residents > 0 {
								add_residents = rnd(addon_maximum_capacity(map(x,y)) - before_residents)
								residents(x,y) = before_residents + add_residents
	
								demand_Residential -= add_residents
								
								repeat add_residents
								
									new_age_tmp = rnd(120)
									
									if new_age_tmp <= 40 {
										new_age_tmp = 0			; 1/3の確率で0歳児
									} else {
										new_age_tmp -= 40		; new_age_tmp > 40の場合、new_age_tmpから40引いた歳を新しい住民の年齢とする
									}
									
									age(x,y) += "["+rnd(81)+"]"
								loop
							}
					}
				
					if f < (demand_Residential/10) / 2 {
						//各住居地区で何人減らすか
							if before_residents > 0 {
								cut_residents = rnd(before_residents+5) - 5
	
								if cut_residents < 0 and (addon_type(map(x,y)) = "low_density_residential" or addon_type(map(x,y)) = "Low_density_Residential" or addon_type(map(x,y)) = "low_density_Residential") {
									residents(x,y) = 0										; -5 <= cut_residents < 0の場合、その家の住民全員がマップ外へ出る（低密度住宅のみ）
								} else {
									residents(x,y) = before_residents - (cut_residents + 5)	; その他の場合、cut_residetsに5を足した人数がマップ外へ出る
								}
	
								age(x,y) = ""
	
								if residents(x,y) > 0 {
									repeat (before_residents-cut_residents)
										age(x,y) += "["+age_in_Residential(cnt)+"]"					; 要修正
									loop
								}
							}
					}
				
					if residents(x,y) < 0 {
						residents(x,y) = 0
					}
		
				//総人口数にも反映
					Total_Population = Total_Population - before_residents + residents(x,y)
	
				//変更後の住民の年齢を取得
					sdim age_in_Residential_tmp, 16, residents(x,y)
					split age(x,y), "]", age_in_Residential_tmp
	
				//年齢に1を足す
					dim age_in_Residential, residents(x,y)
					repeat residents(x,y)
						split age_in_Residential_tmp(cnt), "[", cut, age_in_Residential_tmp(cnt)
						age_in_Residential(cnt) = int(age_in_Residential_tmp(cnt))
					loop
			}
	
		//就職先または就学先の決定
			if residents(x,y) > 0 {
				gosub *fix_workplace
				gosub *fix_school
			}
	
		//需要度を増減
			//総求人数を取得
				before_Vacancies = Vacancies
				Vacancies = (total_Commercial_maximum_capacity-Total_workers_Commercial) + (total_Office_maximum_capacity-Total_workers_Office) + (total_Industrial_maximum_capacity-Total_workers_Industrial) + (total_Public_maximum_capacity-Total_workers_Public)
				
			//非労働者（学生含む）数を取得
				before_Vagrants = Vagrants
				Total_Vagrants = Total_Population - Total_workers_Commercial - Total_workers_Office - Total_workers_Industrial - Total_workers_Public
	
				if Total_Vagrants < 0 {
					Total_Vagrants = 0
				}
				
			//RCOIF需要メーターを変動
				;if Vacancies > 0 and Total_Vagrants >= 0 {
					if Total_Population > 0 {
						demand_Residential 	= happiness_ave + (rnd(20) - 10) + Special_demand_Residential
					} else {
						demand_Residential 	= 100
					}
					if demand_Residential < 0 {
						demand_Residential = 1
					}
					
					if Total_Commercial_maximum_capacity > 0 {
						demand_Commercial 	-= r - 10  + Special_demand_Commercial
						if demand_Commercial > 100 {
							demand_Commercial = 100
						} else : if demand_Commercial < 0 {
							demand_Commercial = 0
						}
					} else {
						demand_Commercial 	= 100
					}
					if demand_Commercial < 0 {
						demand_Commercial = 1
					}
					
					if Total_Office_maximum_capacity > 0 {
						demand_Office 		-= rnd(20) - 10  + Special_demand_Office
						if demand_Office > 100 {
							demand_Office = 100
						} else : if demand_Office < 0 {
							demand_Office = 0
						}
					} else {
						demand_Office 		= 100
					}
					if demand_Office < 0 {
						demand_Office = 1
					}
					
					if Total_Industrial_maximum_capacity > 0 {
						demand_Industrial 	-= rnd(20) - 10  + Special_demand_Industrial
						if demand_Industrial > 100 {
							demand_Industrial = 100
						} else : if demand_Industrial < 0 {
							demand_Industrial = 0
						}
					} else {
						demand_Industrial 	= 100
					}
					if demand_Industrial < 0 {
						demand_Industrial = 1
					}
	
					if Total_Farm_maximum_capacity > 0 {
						demand_Farm 	-= rnd(20) - 10  + Special_demand_Farm
						if demand_Farm > 100 {
							demand_Farm = 100
						} else : if demand_Farm < 0 {
							demand_Farm = 0
						}
					} else {
						demand_Farm 	= 100
					}
					if demand_Farm < 0 {
						demand_Farm = 1
					}
				;}
	
		//毎年1月1日に、住民の年齢に1を足す
			if Time_Month = 1 and Time_Date = 1 and residents(x,y) > 0 {
				//年齢に1を足す
					dim age_in_Residential, residents(x,y)
					repeat residents(x,y)
					//120歳を寿命として、drop = 0なら住人一人が死亡
						drop = rnd(121-age_in_Residential(cnt))
						
						if drop = 0 {
							age_in_Residential(cnt) = -1
	
							Total_Population -= 1
							
						} else {
							
							age_in_Residential(cnt) ++
						}
	
						age(x,y) = ""
						repeat residents(x,y)
							if age_in_Residential(cnt) >= 0 {
								age(x,y) += "["+age_in_Residential(cnt)+"]"
							}
						loop
					loop
			}
	
					
	
	return
	
*fluctuation__get_first
	//*fluctuationで扱う配列データのうち、取得に時間がかかるものを予め取得しておく
	
		//職場
			dim all_workplace_x, next_obj_serial_num
			dim all_workplace_y, next_obj_serial_num
	
			gx = 0 : gy = 0
			gi = 0
			
			repeat mapsize
				gx = cnt
	
				repeat mapsize
					gy = cnt
					
					if category(gx,gy) = "commercial" or category(gx,gy) = "office" or category(gx,gy) = "industrial" or category(gx,gy) = "farm" or category(gx,gy) = "public" {
						all_workplace_x(gi) = gx
						all_workplace_y(gi) = gy
						
						gi ++
					}
				loop
			loop
	
		//学校
			dim all_elementary_schools_x, next_obj_serial_num
			dim all_elementary_schools_y, next_obj_serial_num
			
			dim all_junior_high_schools_x, next_obj_serial_num
			dim all_junior_high_schools_y, next_obj_serial_num
	
			dim all_high_schools_x, next_obj_serial_num
			dim all_high_schools_y, next_obj_serial_num
	
			dim all_universities_x, next_obj_serial_num
			dim all_universities_y, next_obj_serial_num
	
			gx = 0 : gy = 0
			gi_e = 0
			gi_j = 0
			gi_h = 0
			gi_u = 0
			
			repeat mapsize
				gx = cnt
	
				repeat mapsize
					gy = cnt
					
					if category_3(gx,gy) = "elementary-school" or category_3(gx,gy) = "junior-high-school" or category_3(gx,gy) = "high-school" or category_3(gx,gy) = "university" {
						if category_3(gx,gy) = "elementary-school" {
							all_elementary_schools_x(gi_e) = gx
							all_elementary_schools_y(gi_e) = gy
							gi_e ++
						}
						if category_3(gx,gy) = "junior-high-school" {
							all_junior_high_schools_x(gi_j) = gx
							all_junior_high_schools_y(gi_j) = gy
							gi_j ++
						}
						if category_3(gx,gy) = "high-school" {
							all_high_schools_x(gi_h) = gx
							all_high_schools_y(gi_h) = gy
							gi_h ++
						}
						if category_3(gx,gy) = "university" {
							all_universities_x(gi_u) = gx
							all_universities_y(gi_u) = gy
							gi_u ++
						}
					}
				loop
			loop
		
	return
	
*fix_workplace
	//住人の年齢を取得
		sdim age_in_Residential_tmp, 16, residents(x,y)
		split age(x,y), "]", age_in_Residential_tmp

		dim age_in_Residential, residents(x,y)
		repeat residents(x,y)
			split age_in_Residential_tmp(cnt), "[", cut, age_in_Residential_tmp(cnt)
			age_in_Residential(cnt) = int(age_in_Residential_tmp(cnt))
		loop
	
	sdim workplace_tmp, 8, residents(x,y)
	split workplace(x,y), "][", workplace_tmp
	
	workplace(x,y) = ""
	
	repeat residents(x,y)
		if instr(workplace_tmp(cnt), 0, "[") != -1 {
			split workplace_tmp(cnt), "[", cut, workplace_tmp(cnt)
		}
		if instr(workplace_tmp(cnt), 0, "]") != -1 {
			split workplace_tmp(cnt), "]", workplace_tmp(cnt), cut
		}
	
		//労働者が居るのに総労働者数が0の場合（バグ対策）
			if workers_zero = 1 {
				if instr(workplace(x,y), 0, "c") != -1 {
					Total_workers_Commercial += 1
				}
				if instr(workplace(x,y), 0, "o") != -1 {
					Total_workers_Office += 1
				}
				if instr(workplace(x,y), 0, "i") != -1 {
					Total_workers_Industrial += 1
				}
				if instr(workplace(x,y), 0, "f") != -1 {
					Total_workers_Farm += 1
				}
				if instr(workplace(x,y), 0, "p") != -1 {
					Total_workers_Public += 1
				}
	
				if nx = mapsize and y = mapsize {
					workers_zero = 0
				}
			}
		
		if workplace_tmp(cnt) = "" and age_in_Residential(cnt) >= 18 and age_in_Residential(cnt) <= 60 {
			//就職先が決まっておらず、かつ18歳以上60歳以下なら(年齢/10)分の1の確率で就職先を決める
				dr = rnd((age_in_Residential(cnt)/10))
				
				if dr = 0 {
					new_workplace_rnd = rnd(gi-1)	; 職場はランダムに決める
					new_workplace_x = all_workplace_x(new_workplace_rnd)
					new_workplace_y = all_workplace_y(new_workplace_rnd)
	
					//収容人数内に収まる場合は就職を決定する
						if category(new_workplace_x, new_workplace_y) = "commercial" {
							if addon_maximum_capacity(map(new_workplace_x, new_workplace_y)) >= workers_Commercial(new_workplace_x, new_workplace_y) + 1 {
								workers_Commercial(new_workplace_x, new_workplace_y) ++
								workplace_tmp(cnt) = "c"+str(obj_serial_num(new_workplace_x, new_workplace_y))+"
	
								Total_workers_Commercial ++
								demand_Commercial --
	
								repeat gi
									if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y) {
										workers_Commercial(all_workplace_x(cnt), all_workplace_y(cnt)) ++
									}
								loop
							}
						}
						if category(new_workplace_x, new_workplace_y) = "office" {
							if addon_maximum_capacity(map(new_workplace_x, new_workplace_y)) >= workers_Office(new_workplace_x, new_workplace_y) + 1 {
								workers_Office(new_workplace_x, new_workplace_y) ++
								workplace_tmp(cnt) = "o"+str(obj_serial_num(new_workplace_x, new_workplace_y))+""
	
								Total_workers_Office ++
								demand_Office --
	
								repeat gi
									if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y) {
										workers_Office(all_workplace_x(cnt), all_workplace_y(cnt)) ++
									}
								loop
							}
						}
						if category(new_workplace_x, new_workplace_y) = "industrial" {
							if addon_maximum_capacity(map(new_workplace_x, new_workplace_y)) >= workers_Industrial(new_workplace_x, new_workplace_y) + 1 {
								workers_Industrial(new_workplace_x, new_workplace_y) ++
								workplace_tmp(cnt) = "i"+str(obj_serial_num(new_workplace_x, new_workplace_y))+""
	
								Total_workers_Industrial ++
								demand_Industrial --
							}
	
							repeat gi
									if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y) {
										workers_Industrial(all_workplace_x(cnt), all_workplace_y(cnt)) ++
									}
								loop
						}
						if category(new_workplace_x, new_workplace_y) = "farm" {
							if addon_maximum_capacity(map(new_workplace_x, new_workplace_y)) >= workers_Farm(new_workplace_x, new_workplace_y) + 1 {
								workers_Farm(new_workplace_x, new_workplace_y) ++
								workplace_tmp(cnt) = "f"+str(obj_serial_num(new_workplace_x, new_workplace_y))+""
	
								Total_workers_Farm ++
								demand_Farm --
	
								repeat gi
									if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y) {
										workers_Farm(all_workplace_x(cnt), all_workplace_y(cnt)) ++
									}
								loop
							}
						}
						if category(new_workplace_x, new_workplace_y) = "public" {
							if addon_maximum_capacity(map(new_workplace_x, new_workplace_y)) >= workers_Public(new_workplace_x, new_workplace_y) + 1 {
								workers_Public(new_workplace_x, new_workplace_y) ++
								workplace_tmp(cnt) = "p"+str(obj_serial_num(new_workplace_x, new_workplace_y))+""
	
								Total_workers_Public ++
								demand_Public --
	
								repeat gi
									if obj_serial_num(all_workplace_x(cnt), all_workplace_y(cnt)) = obj_serial_num(new_workplace_x, new_workplace_y) {
										workers_Public(all_workplace_x(cnt), all_workplace_y(cnt)) ++
									}
								loop
							}
						}
				}
		}
	
		workplace(x,y) += "["+workplace_tmp(cnt)+"]"
	loop
	
	return
	
*fix_school
	//住人の年齢を取得
		sdim age_in_Residential_tmp, 16, residents(x,y)
		split age(x,y), "]", age_in_Residential_tmp

		dim age_in_Residential, residents(x,y)
		repeat residents(x,y)
			split age_in_Residential_tmp(cnt), "[", cut, age_in_Residential_tmp(cnt)
			age_in_Residential(cnt) = int(age_in_Residential_tmp(cnt))
		loop
	
	sdim school_tmp, 8, residents(x,y)
	split school(x,y), "][", school_tmp
	
	sdim workplace_tmp, 8, residents(x,y)
	split workplace(x,y), "][", workplace_tmp
	
	school(x,y) = ""
	
	repeat residents(x,y)
		if instr(school_tmp(cnt), 0, "[") != -1 {
			split school_tmp(cnt), "[", cut, school_tmp(cnt)
		}
		if instr(school_tmp(cnt), 0, "]") != -1 {
			split school_tmp(cnt), "]", school_tmp(cnt), cut
		}
	
		if instr(workplace_tmp(cnt), 0, "[") != -1 {
			split workplace_tmp(cnt), "[", cut, workplace_tmp(cnt)
		}
		if instr(workplace_tmp(cnt), 0, "]") != -1 {
			split workplace_tmp(cnt), "]", workplace_tmp(cnt), cut
		}
		
		//就学先を年齢別で決める
		if school_tmp(cnt) = "" {
			//小学校
			if age_in_Residential(cnt) >= 6 and age_in_Residential(cnt) <= 12 and gi_e >= 1 {
				new_school_rnd = rnd(gi_e-1)	; 学校はランダムに決める
				new_school_x = all_elementary_schools_x(new_school_rnd)
				new_school_y = all_elementary_schools_y(new_school_rnd)
	
				if addon_maximum_capacity(map(new_school_x, new_school_y)) >= students(new_school_x, new_school_y) + 1 {
					school_tmp(cnt) = "e"+str(obj_serial_num(new_school_x, new_school_y))+""
					students(new_school_x, new_school_y) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_e
						if obj_serial_num(all_elementary_schools_x(cnt), all_elementary_schools_y(cnt)) = obj_serial_num(new_school_x, new_school_y) {
							students(all_elementary_schools_x(cnt), all_elementary_schools_y(cnt)) = students(new_school_x, new_school_y)
						}
					loop
				}
			}
			//中学校
			if age_in_Residential(cnt) >= 13 and age_in_Residential(cnt) <= 15 and gi_j >= 1 {
				new_school_rnd = rnd(gi_j-1)	; 学校はランダムに決める
				new_school_x = all_junior_high_schools_x(new_school_rnd)
				new_school_y = all_junior_high_schools_y(new_school_rnd)
	
				if addon_maximum_capacity(map(new_school_x, new_school_y)) >= students(new_school_x, new_school_y) + 1 {
					school_tmp(cnt) = "j"+str(obj_serial_num(new_school_x, new_school_y))+""
					students(new_school_x, new_school_y) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_j
						if obj_serial_num(all_junior_high_schools_x(cnt), all_junior_high_schools_y(cnt)) = obj_serial_num(new_school_x, new_school_y) {
							students(all_junior_high_schools_x(cnt), all_junior_high_schools_y(cnt)) = students(new_school_x, new_school_y)
						}
					loop
				}
			}
		}
		if school_tmp(cnt) = "" and workplace_tmp(cnt) = "" and age_in_Residential(cnt) >= 16 and age_in_Residential(cnt) <= 50 {
			//高校
			dr_h = rnd(3)	; 高校は 1/3の確率で入る
	
			if dr_h = 0 and age_in_Residential(cnt) >= 16 and age_in_Residential(cnt) <= 18 and gi_h >= 1 {
				new_school_rnd = rnd(gi_h-1)	; 学校はランダムに決める
				new_school_x = all_high_schools_x(new_school_rnd)
				new_school_y = all_high_schools_y(new_school_rnd)
	
				if addon_maximum_capacity(map(new_school_x, new_school_y)) >= students(new_school_x, new_school_y) + 1 {
					school_tmp(cnt) = "h"+str(obj_serial_num(new_school_x, new_school_y))+""
					students(new_school_x, new_school_y) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_h
						if obj_serial_num(all_high_schools_x(cnt), all_high_schools_y(cnt)) = obj_serial_num(new_school_x, new_school_y) {
							students(all_high_schools_x(cnt), all_high_schools_y(cnt)) = students(new_school_x, new_school_y)
						}
					loop
				}
			}
	
			//大学
			dr_u = rnd(age_in_Residential(cnt))	; 大学は1/年齢の確率で入る
			
			if dr_u = 0 and age_in_Residential(cnt) >= 19 and age_in_Residential(cnt) <= 50 and gi_u >= 1 {
				new_school_rnd = rnd(gi_u-1)	; 学校はランダムに決める
				new_school_x = all_universities_x(new_school_rnd)
				new_school_y = all_universities_y(new_school_rnd)
	
				if addon_maximum_capacity(map(new_school_x, new_school_y)) >= students(new_school_x, new_school_y) + 1 {
					school_tmp(cnt) = "u"+str(obj_serial_num(new_school_x, new_school_y))+""
					students(new_school_x, new_school_y) += 1
	
					//１つで2マス以上の学校の場合、学校内で同じ生徒数にする
					repeat gi_j
						if obj_serial_num(all_universities_x(cnt), all_universities_y(cnt)) = obj_serial_num(new_school_x, new_school_y) {
							students(all_universities_x(cnt), all_universities_y(cnt)) = students(new_school_x, new_school_y)
						}
					loop
				}
			}
		}
	
		school(x,y) += "["+school_tmp(cnt)+"]"
	loop
		
	return
	
*get_happiness_level
	; 幸福度を算出する前に、地価と犯罪率、教育度を調節
		if land_price(x,y) > 1000 {
			land_price(x,y) = 1000
		}
		if land_price(x,y) < 0 {
			land_price(x,y) = 0
		}
	
		if crime_rate(x,y) > 100 {
			crime_rate(x,y) = 100
		}
		if crime_rate(x,y) < -100 {
			crime_rate(x,y) = -100
		}
	
		if education_rate(x,y) > 100 {
			education_rate(x,y) = 100
		}
		if education_rate(x,y) < 0 {
			education_rate(x,y) = 0
		}
		
	happiness(x,y) = (int(((double(land_price(x,y))/200)*100)*0.50) - int((double(crime_rate(x,y)/50)*0.30)) + int(((double(education_rate(x,y))/60)*100)*0.20))
	
	if happiness(x,y) < 0 {
		happiness(x,y) = 0
	}
	if happiness(x,y) > 100 {
		happiness(x,y) = 100
	}
	
	return
	
*get_approval_rate
	approval_rate = happiness_ave
	return
	
*get_gender_all_people
	//住民の性別の人口を取得
		gender_M = 0
		gender_F = 0
		
		repeat mapsize
			gx = cnt
		
			repeat mapsize
				gy = cnt
	
				if gender(gx,gy) != "" and residents(gx,gy) > 0 {
					sdim gender_tmp, 8, residents(gx,gy)
					split gender(gx,gy), "]", gender_tmp
	
					repeat residents(gx,gy)
						if instr(gender_tmp(cnt), 0, "m") != -1 {
							gender_M ++
						}
						if instr(gender_tmp(cnt), 0, "f") != -1 {
							gender_F ++
						}
					loop
				}
			loop
		loop
	
	return
	
*show_detail
	if showing_detail = 0 or (clicked_mx != before_clicked_mx and clicked_my != before_clicked_my) and mouse_right = 0 {
		before_clicked_mx_tmp = before_clicked_mx
		before_clicked_my_tmp = before_clicked_my
		
		before_clicked_mx = clicked_mx
		before_clicked_my = clicked_my

		showing_detail = 1
	} else : if (clicked != clicked_before and showing_detail = 1 and clicked_mx = before_clicked_mx and clicked_my = before_clicked_my) or mouse_right = 1 {
		showing_detail = 0
	}
	
	clicked_before = clicked

	if (clicked_mx < 0 or clicked_mx > mapsize or clicked_my < 0 or clicked_my > mapsize) or showing_detail = 0 {
		return
	}
	
	qv2 clicked_mx, clicked_my

	macro1_sd = macro1 : macro2_sd = macro2
	
	color 255, 255, 255
	line macro1_sd+32, macro2_sd-100, macro1_sd+32, macro2_sd-32
	
	//ダイアログの大きさを文字列の長さによって決める
		if before_clicked_mx_tmp != clicked_mx or before_clicked_my_tmp != clicked_my {
			;get_str_print_length(name(clicked_mx,clicked_my))		←文字列の表示の長さを求める関数（後日作成予定）
			buffer 999
				font SystemFont, 14

				if original_name(clicked_mx, clicked_my) = "" {
					mes addon_jp_name(map(clicked_mx,clicked_my))
				} else {
					mes original_name(clicked_mx, clicked_my)
				}
		
				diax = ginfo(14) + 5
				diay1 = ginfo(15) + 2
	
			gsel 0
		}

	if diax < 100 {
		diax = 100
	}

	//詳細
		if before_clicked_mx_tmp != clicked_mx or before_clicked_my_tmp != clicked_my {
			
			dia_lines = 0
			mes_tmp = ""
	
			if category(clicked_mx, clicked_my) = "residential" {
				mes_tmp = "住宅地区\n住民 : "+residents(clicked_mx, clicked_my)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my)+"\n教育度 : "+education_rate(clicked_mx, clicked_my)+"\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000"
				dia_lines = 5
			}
			if category(clicked_mx, clicked_my) = "commercial" {
				mes_tmp = "商業地区\n労働者数 : "+workers_Commercial(clicked_mx, clicked_my)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my)+"\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000"
				dia_lines = 4
			}
			if category(clicked_mx, clicked_my) = "office" {
				mes_tmp = "オフィス地区\n労働者数 : "+workers_Office(clicked_mx, clicked_my)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my)+"\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000"
				dia_lines = 4
			}
			if category(clicked_mx, clicked_my) = "industrial" {
				mes_tmp = "工業地区\n労働者数 : "+workers_Industrial(clicked_mx, clicked_my)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my)+"\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000"
				dia_lines = 4
			}
			if category(clicked_mx, clicked_my) = "farm" {
				mes_tmp = "農業地区\n労働者数 : "+workers_Farm(clicked_mx, clicked_my)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my)+"\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000\n生産物 : "+crop(clicked_mx, clicked_my)+""
				dia_lines = 5
			}
			if category(clicked_mx, clicked_my) = "public" {
				mes_tmp = "公共施設\n労働者数 : "+workers_Public(clicked_mx, clicked_my)+"人\n幸福度 : "+happiness(clicked_mx, clicked_my)+"\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000"
				dia_lines = 4
			}
	
			if category(clicked_mx, clicked_my) = "park" {
				mes_tmp = "公園\n地価 : §"+land_price(clicked_mx, clicked_my)+"0000"
				dia_lines = 2
			}
	
			; 詳細の表示にかかるサイズを取得
				buffer 999

				font SystemFont, 10
	
				pos 0, 0
				mes mes_tmp
	
				diay2 = ginfo(15) * dia_lines
				
				gsel 0
		}
			
	//表示
		color 0, 0, 0
		sboxf 128, macro1_sd+32, macro2_sd-100-(diay1+5+diay2+5), macro1_sd+32+15+diax+25, macro2_sd-100
	
		if category(clicked_mx, clicked_my) = "residential" {
			color 34, 177, 76
		}
		if category(clicked_mx, clicked_my) = "commercial" {
			color 63, 72, 204
		}
		if category(clicked_mx, clicked_my) = "office" {
			color 0, 162, 232
		}
		if category(clicked_mx, clicked_my) = "industrial" {
			color 255, 242, 0
		}
		if category(clicked_mx, clicked_my) = "farm" {
			color 185, 122, 87
		}
		if category(clicked_mx, clicked_my) = "public" {
			color 195, 195, 195
		}
	
		if category(clicked_mx, clicked_my) = "park" {
			color 119, 153, 17
		}
	
		if category(clicked_mx, clicked_my) = "road" {
			color 50, 50, 50
		}
		if category(clicked_mx, clicked_my) = "railroad" {
			color 175, 112, 77
		}
		if category(clicked_mx, clicked_my) = "station" {
			color 255, 0, 0
		}
	
		boxf macro1_sd+32, macro2_sd-100-(diay1+5+diay2+5), macro1_sd+32+10, macro2_sd-100
	
		color 255, 255, 255

		//建物名（アドオン名）
			font SystemFont, 14
			pos macro1_sd+32+15, macro2_sd-100-(diay1+5+diay2+5)+5
			if original_name(clicked_mx, clicked_my) = "" {
				mes addon_jp_name(map(clicked_mx,clicked_my))
			} else {
				mes original_name(clicked_mx, clicked_my)
			}

		//詳細
			font SystemFont, 10
			pos macro1_sd+32+15, macro2_sd-100-(diay1+5+diay2+5)+diay1+5 : mes mes_tmp

		//建物名変更ボタン
			pos macro1_sd+32+15+diax+25-20, macro2_sd-100-(diay1+5+diay2+5) : gmode 2 : gcopy 71, 0, 0, 20, 20
			
	return

*fix_new_name
	original_name(clicked_mx, clicked_my) = new_name
	
	clrobj new_name_stat
	showing_new_name_input = 0
					
	return
	
	
*information_panel
	screen 1, 400, 300
	
	gsel 1, 2
	
	color 128, 128, 128 : boxf
	
	title "情報パネル"
	
	mci "stop Cities-Box"
	
	mci "set Cities-Box_2 time format milliseconds"
	
	if approval_rate > 50 {
		mci"open \""+directory+"\\bgm\\[Sp]Satie-Jeteveux.mp3\" alias Cities-Box_2"
	} else {
		mci"open \""+directory+"\\bgm\\[Sp]Tchikovsky-Serenade-1st.mp3\" alias Cities-Box_2"
	}
	
	if Set_Play_BGM = 1 {
		mci "play Cities-Box_2"
	}
	
	pos 10, 10 : gmode 2 : gcopy 52, 0, 0, 32, 32
	
	font SystemFont, 16 : color 255, 255, 255
	pos 50, 15 : mes "都市の情報"
	
	color 255, 255, 255 : boxf 10, 45, 390, 95
	color 128, 128, 128 : boxf 11, 46, 389, 94
	
	color 255, 255, 255 : font SystemFont, 14
	pos 15, 50  : mes "都市名 "+city_name+"\n市長　 "+mayor_name+""
	pos 200, 50 : mes "資金　 § "+Money+"\n支持率 "+approval_rate+"%"
	
	color 255, 255, 255 : boxf 10, 100, 390, 200
	color 128, 128, 128 : boxf 11, 101, 389, 199
	
	color 255, 255, 255 : font SystemFont, 14
	pos 15, 105  : mes "商業地区の労働者数 　　"+Total_workers_Commercial+"人\nオフィス地区の労働者数　　"+Total_workers_Office+"人\n工業地区の労働者数 　　"+Total_workers_Industrial+"人\n農業地区の労働者数　　"+Total_workers_Farm+"人\n公務員の労働者数　　　"+Total_workers_Public+"人"
	pos 230, 105  : mes "非労働者数 　　"+Total_Vagrants+"人"
	
	color 255, 255, 255 : boxf 10, 205, 390, 245
	color 128, 128, 128 : boxf 11, 206, 389, 244
	
	color 255, 255, 255 : font SystemFont, 14
	pos 15, 210 : mes "人口 "+Total_Population+"人"
	pos 200, 210 : mes "男性人口 "+gender_M+"人\n女性人口 "+gender_F+"人"
	
	stop
	
*budget_panel
	screen 1, 300, 380
	
	gsel 1, 2
	
	color 128, 128, 128 : boxf
	
	title "予算パネル"
	
	mci "stop Cities-Box"
	
	mci "set Cities-Box_2 time format milliseconds"
	
	if Money > 0 {
		mci"open \""+directory+"\\bgm\\[Sp]Satie-Jeteveux.mp3\" alias Cities-Box_2"
	} else {
		mci"open \""+directory+"\\bgm\\[Sp]Tchikovsky-Serenade-1st.mp3\" alias Cities-Box_2"
	}
	
	if Set_Play_BGM = 1 {
		mci "play Cities-Box_2"
	}
	
	repeat mapsize
		rx = cnt
		repeat mapsize
			ry = cnt
	
			if category_2(rx,ry) = "police_station" {
				total_Police += 1
			}
			if category_2(rx,ry) = "fire_depertment" {
				total_Fire_Depertment += 1
			}
			if category_2(rx,ry) = "post_office" {
				total_Post_Office += 1
			}
			if category_2(rx,ry) = "education" {
				total_Education += 1
			}
		loop
	loop
	
	objsize 50, 20
	font SystemFont, 14 : color 255, 255, 255
	
	//支出率
		pos 200, 70  : input budget_of_Police : input_stat__budget_of_Police = stat
		pos 280, 70  : mes "%"
		
		pos 200, 90  : input budget_of_Fire_Depertment : input_stat__budget_of_Fire_Depertment = stat
		pos 280, 90  : mes "%"
		
		pos 200, 110 : input budget_of_Post_Office : input_stat__budget_of_Post_Office = stat
		pos 280, 110 : mes "%"
		
		pos 200, 130 : input budget_of_Education : input_stat__budget_of_Education = stat
		pos 280, 130 : mes "%"
	
	//税率
		pos 200, 190 : input tax_of_Residential : input_stat__tax_of_Residential = stat
		pos 290, 190 : mes "%"
		
		pos 200, 210 : input tax_of_Commercial : input_stat__tax_of_Commercial = stat
		pos 290, 210 : mes "%"
		
		pos 200, 230 : input tax_of_Office : input_stat__tax_of_Office = stat
		pos 290, 230 : mes "%"
		
		pos 200, 250 : input tax_of_Industrial : input_stat__tax_of_Industrial = stat
		pos 290, 250 : mes "%"
	
		pos 200, 280 : input tax_of_Farm : input_stat__tax_of_Farm = stat
		pos 290, 280 : mes "%"
	
	objsize 50, 20
	pos 240, 350 : button "OK", *fix_budget
	
	repeat
		redraw 0
	
		color 128, 128, 128 : boxf
	
		font SystemFont, 16 : color 255, 255, 255
		pos 10, 10 : mes "今月の予算"
	
		//支出率のパーセンテージを上限・下限に合わせる
			if budget_of_Police < 0 {
				budget_of_Police = 0
				objprm input_stat__budget_of_Police, budget_of_Police
			}
			if budget_of_Fire_Depertment < 0 {
				budget_of_Fire_Depertment = 0
				objprm input_stat__budget_of_Fire_Depertment, budget_of_Fire_Depertment
			}
			if budget_of_Post_Office < 0 {
				budget_of_Post_Office = 0
				objprm input_stat__budget_of_Post_Office, budget_of_Post_Office
			}
			if budget_of_Education < 0 {
				budget_of_Education = 0
				objprm input_stat__budget_of_Education, budget_of_Education
			}
			
			if budget_of_Police > 100 {
				budget_of_Police = 100
				objprm input_stat__budget_of_Police, budget_of_Police
			}
			if budget_of_Fire_Depertment > 100 {
				budget_of_Fire_Depertment = 100
				objprm input_stat__budget_of_Fire_Depertment, budget_of_Fire_Depertment
			}
			if budget_of_Post_Office > 100 {
				budget_of_Post_Office = 100
				objprm input_stat__budget_of_Post_Office, budget_of_Post_Office
			}
			if budget_of_Education > 100 {
				budget_of_Education = 100
				objprm input_stat__budget_of_Education, budget_of_Education
			}
	
		//税率のパーセンテージを上限・下限に合わせる
			if tax_of_Residential < 0 {
				tax_of_Residential = 0
				objprm input_stat__tax_of_Residential, tax_of_Residential
			}
			if tax_of_Commercial < 0 {
				tax_of_Commercial = 0
				objprm input_stat__tax_of_Commercial, tax_of_Commercial
			}
			if tax_of_Office < 0 {
				tax_of_Office = 0
				objprm input_stat__tax_of_Office, tax_of_Office
			}
			if tax_of_Industrial < 0 {
				tax_of_Industrial = 0
				objprm input_stat__tax_of_Industrial, tax_of_Industrial
			}
			if tax_of_Farm < 0 {
				tax_of_Farm = 0
				objprm input_stat__tax_of_Farm, tax_of_Farm
			}
			
			if tax_of_Residential > 100 {
				tax_of_Residential = 100
				objprm input_stat__tax_of_Residential, tax_of_Residential
			}
			if tax_of_Commercial > 100 {
				tax_of_Commercial = 100
				objprm input_stat__tax_of_Commercial, tax_of_Commercial
			}
			if tax_of_Office > 100 {
				tax_of_Office = 100
				objprm input_stat__tax_of_Office, tax_of_Office
			}
			if tax_of_Industrial > 100 {
				tax_of_Industrial = 100
				objprm input_stat__tax_of_Industrial, tax_of_Industrial
			}
			if tax_of_Farm > 100 {
				tax_of_Farm = 100
				objprm input_stat__tax_of_Farm, tax_of_Farm
			}
	
		//支出の具体的な金額を算出
			if total_Police = 0 {
				take_budget_of_Police = 0
			} else {
				take_budget_of_Police = total_Police * (1000 / (1001-(budget_of_Police*10)))
			}
			if total_Fire_Depertment = 0 {
				take_budget_of_Fire_Depertment = 0
			} else {
				take_budget_of_Fire_Depertment = total_Fire_Depertment * (1000 / (1001-(budget_of_Fire_Depertment*10)))
			}
			if total_Post_Office = 0 {
				take_budget_of_Post_Office = 0
			} else {
				take_budget_of_Post_Office = total_Post_Office * (1000 / (1001-(budget_of_Post_Office*10)))
			}
			if total_Education = 0 {
				take_budget_of_Education = 0
			} else {
				take_budget_of_Education = total_Education * (1000 / (1001-(budget_of_Education*10)))
			}
	
		//収入の具体的な金額を算出
			if Total_Population = 0 {
				take_tax_of_Residential = 0
			} else {
				take_tax_of_Residential = Total_Population * (10 / (11-(tax_of_Residential/10)))
			}
			if total_workers_Commercial = 0 {
				take_tax_of_Commercial = 0
			} else {
				take_tax_of_Commercial = total_workers_Commercial * (10 / (11-(tax_of_Commercial/10)))
			}
			if total_workers_Office = 0 {
				take_tax_of_Office = 0
			} else {
				take_tax_of_Office = total_workers_Office * (10 / (11-(tax_of_Office/10)))
			}
			if total_workers_Industrial = 0 {
				take_tax_of_Industrial = 0
			} else {
				take_tax_of_Industrial = total_workers_Industrial * (10 / (11-(tax_of_Industrial/10)))
			}
			if total_workers_Farm = 0 {
				take_tax_of_Farm = 0
			} else {
				take_tax_of_Farm = total_workers_Farm * (10 / (11-(tax_of_Farm/10)))
			}
	
		font SystemFont, 14
		
		color 255, 127, 39
		pos 10, 30 : mes "繰越金 §"+Money+""
	
		color 255, 255, 255
	
		pos 8, 50  : mes "支出"
		pos 10, 70  : mes "警察署　 　　§-"+take_budget_of_Police+""
		pos 10, 90  : mes "消防署　　　 §-"+take_budget_of_Fire_Depertment+""
		pos 10, 110  : mes "郵便事業 　　§-"+take_budget_of_Post_Office+""
		pos 10, 130 : mes "教育事業　　 §-"+take_budget_of_Education+""
	
		pos 8, 170  : mes "収入"
		pos 10, 190 : mes "住居地区　　 §+"+take_tax_of_Residential+""
		pos 10, 210 : mes "商業地区　　 §+"+take_tax_of_Commercial+""
		pos 10, 230 : mes "オフィス地区 　§+"+take_tax_of_Office+""
		pos 10, 250 : mes "工業地区 　　§+"+take_tax_of_Industrial+""
		pos 10, 270 : mes "農業地区 　　§+"+take_tax_of_Farm+""
	
		repeat 4
			pos 250, 70+(cnt*20)  : mes "%"
		loop
	
		repeat 4
			pos 250, 190+(cnt*20) : mes "%"
		loop
	
		expenses = take_budget_of_Police + take_budget_of_Fire_Depertment + take_budget_of_Post_Office + take_budget_of_Education
		color 255, 0, 0
		pos 10, 290 : mes "今月の支出　 §-"+expenses+""
	
		income = take_tax_of_Residential + take_tax_of_Commercial + take_tax_of_Office + take_tax_of_Industrial + take_tax_of_Farm
		color 0, 255, 0
		pos 10, 310 : mes "今月の収入　 §+"+income+""
	
		color 0, 162, 232
		pos 10, 330 : mes "月末の資金　 §"+(Money - expenses + income)+""
	
		redraw 1
		wait 10
	loop
	
	stop
	
*fix_budget
	gsel ginfo_act, -1
	
	if Set_Play_BGM = 1 {
		mci "stop Cities-Box_2"
		mci "play Cities-Box"
	}
	
	gsel 0
	goto *main
	
*pay_budget
	//毎月1日になったら資金から予算分を引いて税金分を増やす
		repeat mapsize
			rx = cnt
			repeat mapsize
				ry = cnt
		
				if category_2(rx,ry) = "police_station" {
					total_Police += 1
				}
				if category_2(rx,ry) = "fire_depertment" {
					total_Fire_Depertment += 1
				}
				if category_2(rx,ry) = "post_office" {
					total_Post_Office += 1
				}
				if category_2(rx,ry) = "education" {
					total_Education += 1
				}
		
				if workers_Commercial(rx,ry) > 0 {
					total_workers_Commercial += workers_Commercial(rx,ry)
				}
				if workers_Office(rx,ry) > 0 {
					total_workers_Office += workers_Office(rx,ry)
				}
				if workers_Industrial(rx,ry) > 0 {
					total_workers_Industrial += workers_Industrial(rx,ry)
				}
				if workers_Farm(rx,ry) > 0 {
					total_workers_Farm += workers_Farm(rx,ry)
				}
					
			loop
		loop
		
		//支出の具体的な金額を算出
			if total_Police = 0 {
				take_budget_of_Police = 0
			} else {
				take_budget_of_Police = total_Police * (1000 / (1001-(budget_of_Police*10)))
			}
			if total_Fire_Depertment = 0 {
				take_budget_of_Fire_Depertment = 0
			} else {
				take_budget_of_Fire_Depertment = total_Fire_Depertment * (1000 / (1001-(budget_of_Fire_Depertment*10)))
			}
			if total_Post_Office = 0 {
				take_budget_of_Post_Office = 0
			} else {
				take_budget_of_Post_Office = total_Post_Office * (1000 / (1001-(budget_of_Post_Office*10)))
			}
			if total_Education = 0 {
				take_budget_of_Education = 0
			} else {
				take_budget_of_Education = total_Education * (1000 / (1001-(budget_of_Education*10)))
			}
	
		//収入の具体的な金額を算出
			if Total_Population = 0 {
				take_tax_of_Residential = 0
			} else {
				take_tax_of_Residential = Total_Population * (10 / (11-(tax_of_Residential/10)))
			}
			if total_workers_Commercial = 0 {
				take_tax_of_Commercial = 0
			} else {
				take_tax_of_Commercial = total_workers_Commercial * (10 / (11-(tax_of_Commercial/10)))
			}
			if total_workers_Office = 0 {
				take_tax_of_Office = 0
			} else {
				take_tax_of_Office = total_workers_Office * (10 / (11-(tax_of_Office/10)))
			}
			if total_workers_Industrial = 0 {
				take_tax_of_Industrial = 0
			} else {
				take_tax_of_Industrial = total_workers_Industrial * (10 / (11-(tax_of_Industrial/10)))
			}
			if total_workers_Farm = 0 {
				take_tax_of_Farm = 0
			} else {
				take_tax_of_Farm = total_workers_Farm * (10 / (11-(tax_of_Farm/10)))
			}
		
		Money -= take_budget_of_Police + take_budget_of_Fire_Depertment + take_budget_of_Post_Office + take_budget_of_Education
		Money += take_tax_of_Residential + take_tax_of_Commercial + take_tax_of_Office + take_tax_of_Industriale + take_tax_of_Farm
		
	return
	
*climate
	//天候の変動
		//気温の変動
			change_temperature = rnd(5)
	
			if change_temperature = 0 and pause = 0 {
				
				//日中は気温が上がりやすく、夜間は下がりやすくする
					temperature_increase_or_decrease = rnd(8)
			
					//日中
						if 8 <= time_Hour and 14 >= time_Hour {
							if 0 <= temperature_increase_or_decrease and 5 >= temperature_increase_or_decrease {
								temperature_increase = 1
								temperature_decrease = 0
							}
							if 6 <= temperature_increase_or_decrease and 7 >= temperature_increase_or_decrease {
								temperature_increase = 0
								temperature_decrease = 1
							}
			
					//夜間
						} else {
							if 0 <= temperature_increase_or_decrease and 1 >= temperature_increase_or_decrease {
								temperature_increase = 1
								temperature_decrease = 0
							}
							if 2 <= temperature_increase_or_decrease and 7 >= temperature_increase_or_decrease {
								temperature_increase = 0
								temperature_decrease = 1
							}
						}
				
				//12月〜2月：-10℃〜15℃の範囲で気温を変動
					if time_Month = 12 or (1 <= time_Month and 2 >= time_Month) {
						
						if temperature_increase = 1 {
							if temperature < 15 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > -10 {
								temperature --
							}
						}
						
					}
			
				//3月〜5月：10℃〜25℃の範囲で気温を変動
					if 3 <= time_Month and 5 >= time_Month {
						
						if temperature_increase = 1 {
							if temperature < 25 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > 10 {
								temperature --
							}
						}
						
					}
			
				//6月〜8月：20℃〜35℃の範囲で気温を変動
					if 6 <= time_Month and 8 >= time_Month {
						
						if temperature_increase = 1 {
							if temperature < 35 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > 20 {
								temperature --
							}
						}
						
					}
			
				//9月〜11月：10℃〜25℃の範囲で気温を変動
					if 9 <= time_Month and 11 >= time_Month {
						
						if temperature_increase = 1 {
							if temperature < 25 {
								temperature ++
							}
						}
						if temperature_decrease = 1 {
							if temperature > 10 {
								temperature --
							}
						}
						
					}
			}
	
		//天気の変動
			//雨・雪の表示、気温の変動
				if Set_Change_Weather = 1 {
					randomize
									
					add_rain_increase_or_decrease = rnd(2)
			
					if add_rain_increase_or_decrease = 0 {
						add_rain --
					} else : add_rain_increase_or_decrease = 1 {
						add_rain ++
					}
						
					repeat 100
						if rain_y(cnt) >= windowy or rain(cnt) = 0 {
							rain_increase_or_decrease = rnd(2)
								
							if rain_increase_or_decrease = 0 and add_rain >= 0 {
								rain(cnt) = 1
								rain_x(cnt) = rnd(windowx)
								rain_y(cnt) = -rnd(windowy)
								snow_size(cnt) = rnd(5)+1
							} else {
								rain(cnt) = 0
								rain_x(cnt) = 0
								rain_y(cnt) = 0
								snow_size(cnt) = 0
							}
						}
			
						if rain(cnt) = 1 {
							color 255, 255, 255
			
							if temperature >= 3 {	; 気温が3℃以上なら雨
								if pause = 0 {
									rain_y(cnt) += 5 * speed
								}
								line rain_x(cnt), rain_y(cnt), rain_x(cnt), rain_y(cnt)+20
									
							} else {				; 気温が2℃以下なら雪
								if pause = 0 {
									rain_x(cnt) += (rnd(3)-1)*2
									rain_y(cnt) += 1 * speed
								}
								circle rain_x(cnt), rain_y(cnt), rain_x(cnt)+snow_size(cnt), rain_y(cnt)+snow_size(cnt)
									
							}
						}
		
					loop
				}
		
		return
	
*get_news
	//都市のニュースの取得
	
		first_loop = 0
		news_content = ""
	
		//特殊ニュース
			notesel news_file
			noteload "data/news/special.news"
			
			; マップ作成直後
				if not_displayed_news_new_map = 1 {
					not_displayed_news_new_map = 0
	
					same_news = 0
	
					; 同じ内容のニュースを複数読み込む
					repeat notemax
						noteget news_tmp, cnt
	
						if instr(news_tmp, 0, "case=\"new_map\"") != -1 {
							split news_tmp, ", ", tmp, news_content_candidate_tmp
							news_content_candidate(same_news) = strmid(news_content_candidate_tmp, 0, instr(news_content_candidate_tmp, 0, "}"))	; 表示するニュースの候補
							same_news ++	; 同じ内容のニュースの数
						}
					loop
					
					if same_news > 0 {
						news_content = news_content_candidate(rnd(same_news))		; 候補の中からひとつランダムに選ぶ
					}
				}

			; 人口増加
				if before_Total_Population != Total_Population {
					show_news_population = ""

					if before_Total_Population < 1000 and Total_Population >= 1000 {
						show_news_population = "over_1000"
					}
					if before_Total_Population < 5000 and Total_Population >= 5000 {
						show_news_population = "over_5000"
					}
					if before_Total_Population < 10000 and Total_Population >= 10000 {
						show_news_population = "over_10000"
					}
					if before_Total_Population < 30000 and Total_Population >= 30000 {
						show_news_population = "over_30000"
					}
					if before_Total_Population < 50000 and Total_Population >= 50000 {
						show_news_population = "over_50000"
					}
					if before_Total_Population < 80000 and Total_Population >= 80000 {
						show_news_population = "over_80000"
					}
					if before_Total_Population < 100000 and Total_Population >= 100000 {
						show_news_population = "over_100000"
					}
					if before_Total_Population < 200000 and Total_Population >= 200000 {
						show_news_population = "over_200000"
					}
					if before_Total_Population < 300000 and Total_Population >= 300000 {
						show_news_population = "over_300000"
					}
					if before_Total_Population < 400000 and Total_Population >= 400000 {
						show_news_population = "over_400000"
					}
					if before_Total_Population < 500000 and Total_Population >= 500000 {
						show_news_population = "over_500000"
					}
					if before_Total_Population < 600000 and Total_Population >= 600000 {
						show_news_population = "over_600000"
					}
					if before_Total_Population < 700000 and Total_Population >= 700000 {
						show_news_population = "over_700000"
					}
					if before_Total_Population < 800000 and Total_Population >= 800000 {
						show_news_population = "over_800000"
					}
					if before_Total_Population < 900000 and Total_Population >= 900000 {
						show_news_population = "over_900000"
					}
					if before_Total_Population < 1000000 and Total_Population >= 1000000 {
						show_news_population = "over_1000000"
					}
					
					same_news = 0
	
					; 同じ内容のニュースを複数読み込む
					repeat notemax
						noteget news_tmp, cnt
	
						if instr(news_tmp, 0, "case=\""+show_news_population+"\"") != -1 {
							split news_tmp, ", ", tmp, news_content_candidate_tmp
							news_content_candidate(same_news) = strmid(news_content_candidate_tmp, 0, instr(news_content_candidate_tmp, 0, "}"))	; 表示するニュースの候補
							same_news ++	; 同じ内容のニュースの数
						}
					loop
					
					if same_news > 0 {
						news_content = news_content_candidate(rnd(same_news))		; 候補の中からひとつランダムに選ぶ
					}
				}
	
		//特に報じることがない場合、どうでもいいニュースを表示
			notesel news_file
			noteload "data/news/others.news"
			
			if news_content = "" {
				not_displayed_news_new_map = 0

				same_news = 0
	
				; 同じ内容のニュースを複数読み込む
				repeat notemax
					noteget news_tmp, cnt
	
					if instr(news_tmp, 0, "case=\"others\"") != -1 {
						split news_tmp, ", ", tmp, news_content_candidate_tmp
						news_content_candidate(same_news) = strmid(news_content_candidate_tmp, 0, instr(news_content_candidate_tmp, 0, "}"))	; 表示するニュースの候補
						same_news ++	; 同じ内容のニュースの数
					}
				loop
				
				if same_news > 0 {
					news_content = news_content_candidate(rnd(same_news))		; 候補の中からひとつランダムに選ぶ
				}
			}

		before_Total_Population = Total_Population
	
	return
					
	
*setting
	screen 1, 300, 400
	gsel 1
	
	title "Cities Box 設定"
	
	onclick *setting_onclick
	
	color 95, 95, 95 : boxf
	
	if from_setting_onclick = 0 {
		setting_SystemFont = SystemFont
	}
	
	color 255, 255, 255
	font setting_SystemFont, 16
	
	//都市名(City_Name)
		pos 10, 10 : mes "都市名"
	
		if from_setting_onclick = 0 {
			setting_City_Name = City_Name
		}
		
		objsize 210, 20
		pos 80, 10 : input setting_City_Name
	
	//市長名(Mayor_Name)
		pos 10, 40 : mes "市長名"
	
		if from_setting_onclick = 0 {
			setting_Mayor_Name = Mayor_Name
		}
		
		objsize 210, 20
		pos 80, 40 : input setting_Mayor_Name
	
	//天候の変化(Set_Change_Weather)
		if from_setting_onclick = 0 {
			setting_Set_Change_Weather = Set_Change_Weather
		}
		
		if setting_Set_Change_Weather = 0 {
			pos 10, 73 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 73 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 70 : mes "天候の変化"
	
	//夜間は暗くする(Set_Dark_on_Night)
		if from_setting_onclick = 0 {
			setting_Set_Dark_on_Night = Set_Dark_on_Night
		}
		
		if setting_Set_Dark_on_Night = 0 {
			pos 10, 103 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 103 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 100 : mes "夜間は暗くする"
	
	//BGMの再生の有無(Set_Play_BGM)
		if from_setting_onclick = 0 {
			setting_Set_Play_BGM = Set_Play_BGM
		}
		
		if setting_Set_Play_BGM = 0 {
			pos 10, 133 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 133 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 130 : mes "BGMの再生"
	
	//フォント(SystemFont)
		pos 10, 160 : mes "フォント"
	
		objsize 194, 20
		pos 80, 160 : input setting_SystemFont
	
		gmode 2
		pos 274, 160 : gcopy 16, 0, 0, 16, 16
	
	//OKボタン
		color 255, 255, 255 : boxf 100, 360, 200, 390
		color 95, 95, 95 : boxf 101, 361, 199, 389
	
		color 255, 255, 255 : font setting_SystemFont, 20
		cmes "OK", 100, 360, 200, 390
	
	from_setting_onclick = 0
		
	stop
	
*setting_onclick
	gsel 1
	
	from_setting_onclick = 1
	
	//天候の変化(Set_Change_Weather)
		//チェックボックス
			if click_range(10, 73, 10+16, 73+16) = 1 {
				if setting_Set_Change_Weather = 0 {
					setting_Set_Change_Weather = 1
				} else {
					setting_Set_Change_Weather = 0
				}
			}
	
	//夜間は暗くする(Set_Dark_on_Night)
		//チェックボックス
			if click_range(10, 103, 10+16, 103+16) = 1 {
				if setting_Set_Dark_on_Night = 0 {
					setting_Set_Dark_on_Night = 1
				} else {
					setting_Set_Dark_on_Night = 0
				}
			}
	
	//BGMの再生の有無(Set_Play_BGM)
		//チェックボックス
			if click_range(10, 133, 10+16, 133+16) = 1 {
				if setting_Set_Play_BGM = 0 {
					setting_Set_Play_BGM = 1
				} else {
					setting_Set_Play_BGM = 0
				}
			}
	
	//フォント(SystemFont)
		//参照ボタン
			if click_range(274, 160, 274+16, 160+16) = 1 {
				gosub *refer_fonts
			}
	
	//OKボタン
		if click_range(100, 360, 200, 390) = 1 {
	
			// マップ作成時の設定の場合
				if from_new_map = 1 {
					City_Name = setting_City_Name
					Mayor_Name = setting_Mayor_Name
					Set_Change_Name = setting_Set_Change_Name
					SystemFont = setting_SystemFont
					
					gosub *save
	
					gsel 1, -1
					gsel 0
	
					load_mapdata_name = save_mapdata_name
	
					from_setting_onclick = 0
	
					onclick 0
					
					goto *load_map
				}
			
			gosub *save_setting
			
			gsel 1, -1
			onclick 0
			from_setting_onclick = 0
	
			gsel 0
			goto *main
		}
	
	clrobj
	
	goto *setting
	
*new_map_setting
	screen 1, 400, 300
	
	gsel 1
	title "新規マップ作成"
	
	onclick gosub *new_map_setting_onclick
	
	color 95, 95, 95 : boxf
	
	color 255, 255, 255
	font SystemFont, 16
	
	//都市名(City_Name)
		pos 10, 10 : mes "都市名"
	
		if from_setting_onclick = 0 {
			setting_City_Name = City_Name
		}
		
		objsize 280, 20
		pos 80, 10 : input setting_City_Name
	
	//市長名(Mayor_Name)
		pos 10, 40 : mes "市長名"
	
		if from_setting_onclick = 0 {
			setting_Mayor_Name = Mayor_Name
		}
		
		objsize 280, 20
		pos 80, 40 : input setting_Mayor_Name
	
	//天候の変化(Set_Change_Weather)
		if from_setting_onclick = 0 {
			setting_Set_Change_Weather = Set_Change_Weather
		}
		
		if setting_Set_Change_Weather = 0 {
			pos 10, 73 : gcopy 14, 0, 0, 16, 16
		} else {
			pos 10, 73 : gcopy 14, 0, 16, 16, 16
		}
		
		pos 35, 70 : mes "天候の変化"
	
	//OKボタン
		color 255, 255, 255 : boxf 150, 260, 250, 290
		color 95, 95, 95 : boxf 151, 261, 249, 289
	
		color 255, 255, 255 : font SystemFont, 20
		cmes "OK", 150, 260, 250, 290
		
	stop
	
*new_map_setting_onclick
	gsel 1
	
	from_setting_onclick = 1
	
	//天候の変化(Set_Change_Weather)
		//チェックボックス
			if click_range(10, 73, 10+16, 73+16) = 1 {
				if setting_Set_Change_Weather = 0 {
					setting_Set_Change_Weather = 1
				} else {
					setting_Set_Change_Weather = 0
				}
			}
	
	//OKボタン
		if click_range(150, 260, 250, 290) = 1 {
	
		// マップ作成時の初期設定
			City_Name = setting_City_Name
			Mayor_Name = setting_Mayor_Name
			Set_Change_Name = setting_Set_Change_Name
			
			gosub *save

			gsel 1, -1
			gsel 0
	
			load_mapdata_name = save_mapdata_name
			
			from_setting_onclick = 0
	
			not_displayed_news_new_map = 1

			onclick 0
			
			goto *load_map
		}
	
	clrobj
	
	goto *new_map_setting
	
*set_ignore_update
	clrobj
	
	setting_SystemFont = SystemFont
	setting_Set_Play_BGM = Set_Play_BGM
	setting_Ignore_Update = 1
	goto *save_setting
	
*save_setting
	chdir directory
	
	//まずは本体設定(data/config.dat)を保存
		noteadd_SystemFont = 0
		noteadd_Set_Play_BGM = 0
		noteadd_Ignore_Update = 0
		noteadd_Get_Dev_Version = 0
		
		notesel config
	
		repeat notemax
			noteget config_buf, cnt
	
			if instr(config_buf, 0, "SystemFont") != -1 {
				SystemFont = setting_SystemFont
				noteadd "SystemFont = \""+SystemFont+"\"", cnt, 1
				noteadd_SystemFont = 1
			}
	
			if instr(config_buf, 0, "Set_Play_BGM") != -1 {
				Set_Play_BGM = setting_Set_Play_BGM
				noteadd "Set_Play_BGM = "+Set_Play_BGM+";", cnt, 1
				noteadd_Set_Play_BGM = 1
			}
	
			if instr(config_buf, 0, "Ignore_Update") != -1 {
				Ignore_Update = setting_Ignore_Update
				noteadd "Ignore_Update = "+Ignore_Update+";", cnt, 1
				noteadd_Ignore_Update = 1
			}

			if instr(config_buf, 0, "Get_Dev_Version") != -1 {
				Ignore_Update = setting_Ignore_Update
				noteadd "Get_Dev_Version = "+Get_Dev_Version+";", cnt, 1
				noteadd_Get_Dev_Version = 1
			}
	
			wait 1
		loop
	
		if noteadd_SystemFont = 0 {
			SystemFont = setting_SystemFont
			noteadd "SystemFont = \""+SystemFont+"\"", -1
		}
		if noteadd_Set_Play_BGM = 0 {
			Set_Play_BGM = setting_Set_Play_BGM
			noteadd "Set_Play_BGM = "+Set_Play_BGM+";", -1
		}
		if noteadd_Ignore_Update = 0 {
			Ignore_Update = setting_Ignore_Update
			noteadd "Ignore_Update = "+Ignore_Update+";", -1
		}
		if noteadd_Get_Dev_Version = 0 {
			Get_Dev_Version = setting_Get_Dev_Version
			noteadd "Get_Dev_Version = "+Get_Dev_Version+";", -1
		}
	
		notesave "data/config.dat"
	
	//次に各マップデータ(*.cbx)の設定を保存
		City_Name = setting_City_Name
		Mayor_Name = setting_Mayor_Name
		Set_Change_Weather = setting_Set_Change_Weather
		Set_Dark_on_Night = setting_Set_Dark_on_Night
	
	return
	
*refer_fonts
	#uselib "comdlg32.dll"
	#func ChooseFont "ChooseFontA" int
	
	mref bmscr, 67
	dim chfont,16
	dim logfont,16
	sdim setting_SystemFont,32
	
	chfont.0 = 60 
	chfont.1 = bmscr.13
	chfont.3=varptr(logfont)
	chfont.5 = 0x01000141
	
	pm=varptr(chfont)
	ChooseFont pm
	
	if stat = 0 {
		return
	}
	
	style=0
	if (chfont.12 & 0x0100):style=style+1
	if (chfont.12 & 0x0200):style=style+2 
	if (logfont.5 & 0x0000FF00):style=style+4 
	if (logfont.5 & 0x00FF0000):style=style+8
	size=chfont.4/10
	memcpy setting_SystemFont,logfont,32,0,28

	if now_in_menu = 1 {
		objprm SyetmFont__stat, setting_SystemFont
		SystemFont = setting_SystemFont
	}
	
	return
	
*save
	save_mapdata = ""
	
	//誤反応防止
		if from_setting = 0 and from_new_map = 0 and click_range(0, 0, windowx, windowy) = 1 and click_range(windowx-54, windowy-40-titlebar_h, windowx, windowy) = 0 {
			return
		}
	
	//保存先ファイルの選択
			dialog "cbd", 17, "Cities Box マップデータ"
			
			save_mapdata_name = refstr
			if instr(save_mapdata_name, 0, ".cbx") = -1 and instr(save_mapdata_name, 0, ".cbd") = -1 {
				save_mapdata_name = ""+save_mapdata_name+".cbd"
			}
			
			if stat = 0 {
				return
			}
	
	//保存中表示
		color : sboxf 128, 0, 0, windowx, windowy
		
		color 255, 255, 255 : font SystemFont, 26
		cmes "保存中...", 0, (windowy/2)-18, windowx, (windowy/2)+18
	
	//マップ保存
		title "保存中..."
		
		notesel save_mapdata
	
		//保存したCities Boxのバージョン（リリースナンバー）
			noteadd "Version = "+NOW_Release_number+";", -1
	
		//空白
			noteadd " ", -1
			wait 2
		
		//次に各マップデータ(*.cbx)の設定を保存
			noteadd "City_Name = \""+City_Name+"\";", -1
			noteadd "Mayor_Name = \""+Mayor_Name+"\";", -1
	
			noteadd "Total_Population = "+Total_Population+";", -1
			
			noteadd "Set_Change_Weather = "+Set_Change_Weather+";", -1
			noteadd "Temperature = "+temperature+";", -1
			
			noteadd "Set_Dark_on_Nightr = "+Set_Dark_on_Night+";", -1
	
		//空白
			noteadd " ", -1
			await 2
	
		//マップサイズ
			noteadd "mapsize = "+mapsize+";", -1
			noteadd "mapsize = "+mapsize+";", -1
	
		//空白
			noteadd " ", -1
			await 2
	
		//日時
			noteadd "time_Year = "+time_Year+";", -1
			noteadd "time_Month = "+time_Month+";", -1
			noteadd "time_Date = "+time_Date+";", -1
			noteadd "time_Hour = "+time_Hour+";", -1
			noteadd "time_Minutes = "+time_Minutes+";", -1
	
		//空白
			noteadd " ", -1
			await 2
	
		//需要度
			noteadd "demand_Residential = "+demand_Residential+";", -1
			noteadd "demand_Commercial = "+demand_Commercial+";", -1
			noteadd "demand_Office = "+demand_Office+";", -1
			noteadd "demand_Industrial = "+demand_Industrial+";", -1
			noteadd "demand_Farm = "+demand_Farm+";", -1
	
		//資金
			noteadd "Money = "+Money+";", -1
	
		//空白
			noteadd " ", -1
			await 2
	
		//予算
			noteadd "budget_of_Police = "+budget_of_Police+";", -1
			noteadd "budget_of_Fire_Depertment = "+budget_of_Fire_Depertment+";", -1
			noteadd "budget_of_Post_Office = "+budget_of_Post_Office+";", -1
			noteadd "budget_of_Education = "+budget_of_Education+";", -1
	
			noteadd "tax_of_Residential = "+tax_of_Residential+";", -1
			noteadd "tax_of_Commercial = "+tax_of_Commercial+";", -1
			noteadd "tax_of_Office = "+tax_of_Office+";", -1
			noteadd "tax_of_Industrial = "+tax_of_Industrial+";", -1
			noteadd "tax_of_Farm = "+tax_of_Farm+";", -1
	
		//空白
			noteadd " ", -1
			await 2
	
		//空白
			noteadd " ", -1
			await 2
	
		//name(x,y)
			noteadd "name(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
					
					if cnt = 0 {
						map_data_buf = name(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+name(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
			
		//category(x,y)
			noteadd "category(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
					
					if cnt = 0 {
						map_data_buf = category(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+category(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//category_2(x,y)
			noteadd "category_2(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
					
					if cnt = 0 {
						map_data_buf = category_2(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+category_2(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//category_3(x,y)
			noteadd "category_3(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
					
					if cnt = 0 {
						map_data_buf = category_3(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+category_3(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_type(x,y)
			noteadd "obj_type(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_type(x,y))		; 3桁に揃えているのは見やすくするためなので特に意味は無いです。4桁（1000以上）も読み込み可
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_type(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_dire(x,y)
			noteadd "obj_dire(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_dire(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_dire(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_serial_num(x,y)
			noteadd "obj_serial_num(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_serial_num(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_serial_num(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_use_tiles_x(x,y)
			noteadd "obj_use_tiles_x(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_use_tiles_x(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_use_tiles_x(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_use_tiles_y(x,y)
			noteadd "obj_use_tiles_y(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_use_tiles_y(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_use_tiles_y(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_tiles_x(x,y)
			noteadd "obj_tiles_x(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_tiles_x(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_tiles_x(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//obj_tiles_y(x,y)
			noteadd "obj_tiles_y(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", obj_tiles_y(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", obj_tiles_y(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//residents(x,y)
			noteadd "residents(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", residents(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", residents(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//workers_Commercial(x,y)
			noteadd "workers_Commercial(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Commercial(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Commercial(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//workers_Office(x,y)
			noteadd "workers_Office(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Office(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Office(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//workers_Industrial(x,y)
			noteadd "workers_Industrial(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Industrial(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Industrial(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//workers_Farm(x,y)
			noteadd "workers_Farm(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Farm(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Farm(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//workers_Public(x,y)
			noteadd "workers_Public(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", workers_Public(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", workers_Public(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//students(x,y)
			noteadd "students(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", students(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", students(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//land_price(x,y)
			noteadd "land_price(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", land_price(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", land_price(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
		
		//crime_rate(x,y)
			noteadd "crime_rate(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", crime_rate(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", crime_rate(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//education_rate(x,y)
			noteadd "education_rate(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", education_rate(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", education_rate(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//happiness(x,y)
			noteadd "happiness(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", happiness(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", happiness(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//crop(x,y)
			noteadd "crop(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = crop(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+crop(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//crop_amount(x,y)
			noteadd "crop_amount(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = strf("%03d", crop_amount(x,y))
					} else {
						map_data_buf = ""+map_data_buf+", "+strf("%03d", crop_amount(x,y))+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//age(x,y)
			noteadd "age(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = age(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+age(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//gender(x,y)
			noteadd "gender(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = gender(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+gender(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//workplace(x,y)
			noteadd "workplace(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = workplace(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+workplace(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//school(x,y)
			noteadd "school(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = school(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+school(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//reservation(x,y)
			noteadd "reservation(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = reservation(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+reservation(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1

		//original_name(x,y)
			noteadd "original_name(x,y) {", -1
			
			repeat mapsize
				y = cnt
			
				map_data_buf = ""
			
				repeat mapsize
					x = cnt
			
					if cnt = 0 {
						map_data_buf = original_name(x,y)
					} else {
						map_data_buf = ""+map_data_buf+", "+original_name(x,y)+""
					}
				loop
			
				noteadd map_data_buf, -1
				await 2
			loop
			
			noteadd "}", -1
	
		//暗号化（cbxで保存した場合のみ）
			if (instr(save_mapdata_name, 0, ".cbd") = -1 and stat = 1) {
				from_setting = 0
				
				notesel save_mapdata
				l = notemax
				
				repeat l
					sdim save_mapdata_buf, 4096
					
					notesel save_mapdata
					noteget save_mapdata_buf, cnt
					
					save_mapdata_buf_strlen = strlen(save_mapdata_buf)
					enc save_mapdata_buf, (strlen(getpath(save_mapdata_name,8+1))/2), save_mapdata_buf_strlen
		
					notesel save_mapdata_Cipher
					noteadd save_mapdata_buf, cnt
	
					await 5
				loop
				
			} else : if instr(save_mapdata_name, 0, ".cbd") != -1 {
				notesel save_mapdata
				notesave save_mapdata_name
	
				title about_title
	
				return
			}
	
		//保存
			if stat = 1 {
				notesel save_mapdata_Cipher
				notesave save_mapdata_name
			}
			
		title about_title
	
		return
	
*update
	//アップデーター起動
		color 0, 0, 0
		sboxf 128, 0, 0, windowx, windowy
		
		font SystemFont, 14
		color 255, 255, 255 : cmes "アップデータをダウンロード中です\nしばらくお待ち下さい...", 0, windowy/2-20, windowx, windowy/2+20

		if normalUpdate = 1 {
			latest_version__Updater = get_chapter(latest_version, "Updater", " : ", ";")
			latest_version__Updater_Name = get_chapter(latest_version, "Updater_Name", " : ", ";")
	
			download latest_version__Updater, latest_version__Updater_Name, latest_version__Updater_Name
	
			exist latest_version__Updater_Name
		} else : if devUpdate = 1 {
			Dev_latest_version__Updater = get_chapter(Dev_latest_version, "Updater", " : ", ";")
			Dev_latest_version__Updater_Name = get_chapter(Dev_latest_version, "Updater_Name", " : ", ";")
	
			download Dev_latest_version__Updater, Dev_latest_version__Updater_Name, Dev_latest_version__Updater_Name
	
			exist Dev_latest_version__Updater_Name
		}
	
		if strsize = -1 {
			dialog "アップデートに失敗しました"
			return
			
		} else {
			if normalUpdate = 1 {
				exec latest_version__Updater_Name
			} else {
				exec Dev_latest_version__Updater_Name
			}
			end
		}
	
	stop
			
*exit
	if ginfo_act = 0 {
		//一時ファイルを削除
			if now_loading = 0 {
				repeat total_addons
					exist "data/temp/"+addon_name(cnt)+".temp"
					
					if strsize != -1 {
						delete "data/temp/"+addon_name(cnt)+".temp"
					}
				
					wait 1
				loop
			}
	
		gsel 0
		end
		
	} else {
		gsel ginfo_act, -1
		
		onclick 0
	
		from_setting_onclick = 0
	
		gsel 0

		//新マップ作成ウィンドウ
			if from_new_map = 1 {
				from_new_map = 0
				goto *menu
			}

		//メニュー画面の設定
			if now_in_menu = 1 {
				//閉じる際に設定を保存
					notesel config
					noteload "data/config.dat"

					Get_Dev_Version__before = int( get_chapter(config, "Get_Dev_Version", " = ", ";") )

					repeat notemax
						noteget config_tmp, cnt
						
						if instr(config_tmp, 0, "SystemFont") != -1 {
							noteadd "SystemFont = \""+SystemFont+"\"", cnt, 1
						}
						if instr(config_tmp, 0, "Set_Play_BGM") != -1 {
							noteadd "Set_Play_BGM = "+Set_Play_BGM+";", cnt, 1
						}
						if instr(config_tmp, 0, "Ignore_Update") != -1 {
							noteadd "Ignore_Update = "+Ignore_Update+";", cnt, 1
						}
						if instr(config_tmp, 0, "Get_Dev_Version") != -1 {
							noteadd "Get_Dev_Version = "+Get_Dev_Version+";", cnt, 1
						}

						if instr(config_tmp, 0, "OS") != -1 {
							noteadd "OS = \""+OS+"\";", cnt, 1
						}

						if instr(config_tmp, 0, "Adjustment_Interval") != -1 {
							noteadd "Adjustment_Interval = "+Adjustment_Interval+";", cnt, 1
						}
						if instr(config_tmp, 0, "Drow_Interval") != -1 {
							noteadd "Drow_Interval = "+Drow_Interval+";", cnt, 1
						}

					loop

					notesave "data/config.dat"

				if Get_Dev_Version__before != Get_Dev_Version and Get_Dev_Version = 1 {
					goto *check_update
				} else {
					goto *menu
				}
			}
	
		cursor_mode = "normal"
	
		mci "close Cities-Box_2"
		mci "play Cities-Box"
		
		goto *main
	}